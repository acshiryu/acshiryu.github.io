<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>永夜初晗凝碧天</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://acshiryu.github.io/"/>
  <updated>2018-09-16T03:34:07.697Z</updated>
  <id>https://acshiryu.github.io/</id>
  
  <author>
    <name>永夜初晗</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《算法竞赛入门经典训练指南》动态规划习题1</title>
    <link href="https://acshiryu.github.io/archives/acm/acm-training-guide-dp-problem-1.html"/>
    <id>https://acshiryu.github.io/archives/acm/acm-training-guide-dp-problem-1.html</id>
    <published>2018-09-16T03:13:00.000Z</published>
    <updated>2018-09-16T03:34:07.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划习题-1"><a href="#动态规划习题-1" class="headerlink" title="动态规划习题(1)"></a>动态规划习题(1)</h1><h2 id="入门习题-Exercises-Beginner"><a href="#入门习题-Exercises-Beginner" class="headerlink" title="入门习题 (Exercises: Beginner)"></a>入门习题 (Exercises: Beginner)</h2><table><tr><td><a href="http://uva.onlinejudge.org/external/115/11584.html" target="_blank" rel="noopener">UVa11584</a></td><td>Partitioning by Palindromes</td><td>入门题目</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/42/4256.html" target="_blank" rel="noopener">LA4256</a></td><td>Salesman</td><td>入门题目</td></tr> <tr><td><a href="http://uva.onlinejudge.org/external/105/10534.html" target="_blank" rel="noopener">UVa10534</a></td><td>Wavio Sequence</td><td>可以转化为经典问题，时间O(nlogn)</td></tr> <tr><td><a href="http://uva.onlinejudge.org/external/115/11552.html" target="_blank" rel="noopener">UVa11552</a></td><td>Fewest Flops</td><td>序列划分模型；状态设计</td></tr> <tr><td><a href="http://uva.onlinejudge.org/external/114/11404.html" target="_blank" rel="noopener">UVa11404</a></td><td>Palindromic Subsequence</td><td>可以转化为LCS</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/47/4731.html" target="_blank" rel="noopener">LA4731</a></td><td>Cellular Network</td><td>需要一点概率知识和推理</td></tr> <tr><td><a href="http://uva.onlinejudge.org/external/117/11795.html" target="_blank" rel="noopener">UVa11795</a></td><td>Mega Man&#x27;s Missions</td><td>基础的集合动态规划</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/47/4727.html" target="_blank" rel="noopener">LA4727</a></td><td>Jump</td><td>Joseph问题的变形</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/35/3530.html" target="_blank" rel="noopener">LA3530</a></td><td>Martian Mining</td><td>模型简单，但需要减少重复计算</td></tr> <tr><td><a href="http://uva.onlinejudge.org/external/105/10564.html" target="_blank" rel="noopener">UVa10564</a></td><td>Paths through the Hourglass</td><td>类似01 背包问题</td></tr> <tr><td><a href="http://uva.onlinejudge.org/external/108/10817.html" target="_blank" rel="noopener">UVa10817</a></td><td>Headmaster&#x27;s Headache</td><td>集合动态规划</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/20/2038.html" target="_blank" rel="noopener">LA2038</a></td><td>Strategic Game</td><td>树上动态规划（基础题）</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/33/3363.html" target="_blank" rel="noopener">LA3363</a></td><td>String Compression</td><td>字符串动态规划</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/20/2031.html" target="_blank" rel="noopener">LA2031</a></td><td>Dance Dance Revolution</td><td>以跳舞机为背景的题目</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/46/4643.html" target="_blank" rel="noopener">LA4643</a></td><td>Twenty Questions</td><td>有趣的问题；比较基础的动态规划</td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/101/10163.html" target="_blank" rel="noopener">UVa10163</a></td><td>Storage Keepers</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/104/10453.html" target="_blank" rel="noopener">UVa10453</a></td><td>Make Palindrome</td><td></td></tr> <tr><td>(extra)UVa10254</td><td>The Priest Mathematician</td></tr> <tr><td>(extra)UVa437</td><td>The Tower of Babylon</td></tr> <tr><td>(extra)UVa442</td><td>Matrix Chain Multiplication</td><td>最优矩阵乘法</td></tr> <tr><td>(extra)UVa473</td><td>Raucous Rockers</td><td>可以优化</td></tr> <tr><td>(extra)UVa590</td><td>Always on the Run</td></tr> <tr><td>(extra)UVa607</td><td>Scheduling Lectures</td></tr> <tr><td>(extra)UVa662</td><td>Fast Food</td><td>可以优化</td></tr> <tr><td>(extra)UVa672</td><td>Gangsters</td></tr> </table><h2 id="中级习题-Exercises：Intermediate"><a href="#中级习题-Exercises：Intermediate" class="headerlink" title="中级习题 (Exercises：Intermediate)"></a>中级习题 (Exercises：Intermediate)</h2><table><tr><td><a href="http://livearchive.onlinejudge.org/external/49/4945.html" target="_blank" rel="noopener">LA4945</a></td><td>Free Goodies</td><td>也可以贪心，时间效率更高</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/43/4327.html" target="_blank" rel="noopener">LA4327</a></td><td>Parade</td><td>模型不难想，但需要优化</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/40/4015.html" target="_blank" rel="noopener">LA4015</a></td><td>Cave</td><td>树的动态规划</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/44/4490.html" target="_blank" rel="noopener">LA4490</a></td><td>Help Bubu</td></tr> <tr><td><a href="http://uva.onlinejudge.org/external/116/11600.html" target="_blank" rel="noopener">UVa11600</a></td><td>Masud Rana</td><td>注意状态表示</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/49/4987.html" target="_blank" rel="noopener">LA4987</a></td><td>Evacuation Plan</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/46/4613.html" target="_blank" rel="noopener">LA4613</a></td><td>Mountain Road</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/46/4614.html" target="_blank" rel="noopener">LA4614</a></td><td>Moving to Nuremberg</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/40/4050.html" target="_blank" rel="noopener">LA4050</a></td><td>Hanoi Towers</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/33/3305.html" target="_blank" rel="noopener">LA3305</a></td><td>Tour</td><td>经典问题</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/34/3412.html" target="_blank" rel="noopener">LA3412</a></td><td>Pesky Heroes</td><td>树的动态规划（题目不太好理解）</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/36/3679.html" target="_blank" rel="noopener">LA3679</a></td><td>Pitcher Rotation</td><td>需要一点优化（精简状态）</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/36/3605.html" target="_blank" rel="noopener">LA3605</a></td><td>Roommate</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/36/3608.html" target="_blank" rel="noopener">LA3608</a></td><td>Period</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/36/3610.html" target="_blank" rel="noopener">LA3610</a></td><td>Log Jumping</td><td>可以转化为经典问题</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/22/2221.html" target="_blank" rel="noopener">LA2221</a></td><td>Frontier</td><td>涉及到几何（见第四章）的动态规划</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/31/3132.html" target="_blank" rel="noopener">LA3132</a></td><td>Minimax Triangulation</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/37/3710.html" target="_blank" rel="noopener">LA3710</a></td><td>Interconnect</td><td>注意状态表示</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/50/5088.html" target="_blank" rel="noopener">LA5088</a></td><td>Alice and Bob&#x27;s Trip</td><td>树上的动态规划</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/37/3782.html" target="_blank" rel="noopener">LA3782</a></td><td>Bigger is Better</td><td>有多种方法。可以不用高精度</td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/100/10003.html" target="_blank" rel="noopener">UVa10003</a></td><td>Cutting Sticks</td><td>经典的动态规划题目。可以用四边形不等式优化</td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/102/10239.html" target="_blank" rel="noopener">UVa10239</a></td><td>The Book-shelver&#x27;s Problem</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/102/10271.html" target="_blank" rel="noopener">UVa10271</a></td><td>Chopsticks</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/103/10304.html" target="_blank" rel="noopener">UVa10304</a></td><td>Optimal Binary Search Tree</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/105/10599.html" target="_blank" rel="noopener">UVa10599</a></td><td>Robots(II)</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/106/10604.html" target="_blank" rel="noopener">UVa10604</a></td><td>Chemical Reaction</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/106/10618.html" target="_blank" rel="noopener">UVa10618</a></td><td>Tango Tango Insurrection</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/106/10641.html" target="_blank" rel="noopener">UVa10641</a></td><td>Barisal Stadium</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/106/10671.html" target="_blank" rel="noopener">UVa10671</a></td><td>Grid Speed</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/106/10688.html" target="_blank" rel="noopener">UVa10688</a></td><td>The Poor Giant</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/112/11263.html" target="_blank" rel="noopener">UVa11263</a></td><td>Nested Rectangles</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/114/11400.html" target="_blank" rel="noopener">UVa11400</a></td><td>Lighting System Design</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/115/11578.html" target="_blank" rel="noopener">UVa11578</a></td><td>Situp Benches</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/116/11691.html" target="_blank" rel="noopener">UVa11691</a></td><td>Allergy Test</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/117/11766.html" target="_blank" rel="noopener">UVa11766</a></td><td>Racing Car Computer</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/120/12002.html" target="_blank" rel="noopener">UVa12002</a></td><td>Happy Birthday</td><td></td></tr> <tr><td>(extra)UVa10723</td><td>Cyborg Genes</td><td>推荐</td></tr> <tr><td>(extra)UVa10934</td><td>Dropping water</td><td>推荐</td></tr> <tr><td>(extra)UVa10981</td><td>String Morphing</td><td>推荐</td></tr> <tr><td>(extra)UVa11307</td><td>Alternative Arborescene</td><td>推荐</td></tr> <tr><td>(extra)UVa11456</td><td>Trainsorting</td></tr> <tr><td>(extra)UVa11782</td><td>Optimal Cut</td></tr> <tr><td>(extra)LA2096</td><td>Taekwondo</td></tr> <tr><td>(extra)LA2151</td><td>Telescope</td></tr> </table><h2 id="提高习题-Exercises-Advanced"><a href="#提高习题-Exercises-Advanced" class="headerlink" title="提高习题 (Exercises: Advanced)"></a>提高习题 (Exercises: Advanced)</h2><table><tr><td><a href="http://livearchive.onlinejudge.org/external/43/4394.html" target="_blank" rel="noopener">LA4394</a></td><td>String Painter</td><td>序列的动态规划，有一定难度</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/45/4593.html" target="_blank" rel="noopener">LA4593</a></td><td>Exclusive Access 2</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/40/4048.html" target="_blank" rel="noopener">LA4048</a></td><td>Fund Management</td><td>注意状态表示</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/46/4625.html" target="_blank" rel="noopener">LA4625</a></td><td>Garlands</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/36/3683.html" target="_blank" rel="noopener">LA3683</a></td><td>A Scheduling Problem</td><td>树的动态规划</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/36/3637.html" target="_blank" rel="noopener">LA3637</a></td><td>The Bookcase</td><td>不太容易想到，且需要优化</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/57/5717.html" target="_blank" rel="noopener">LA5717</a></td><td>Peach Blossom Spring</td><td>一类经典题目（最早出现在NWERC2006，但本题数据更强）</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/36/3623.html" target="_blank" rel="noopener">LA3623</a></td><td>The Best Name for Your Baby</td><td>有难度的动态规划；注意计算顺序</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/40/4002.html" target="_blank" rel="noopener">LA4002</a></td><td>The Ultimate Password</td><td>有难度的动态规划；注意计算顺序</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/21/2178.html" target="_blank" rel="noopener">LA2178</a></td><td>The Minimum Number of Rooks</td><td>有难度的动态规划</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/29/2923.html" target="_blank" rel="noopener">LA2923</a></td><td>Bundling</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/29/2930.html" target="_blank" rel="noopener">LA2930</a></td><td>Minimizing Maximizer</td><td>01 原则；数据结构优化动态规划</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/31/3181.html" target="_blank" rel="noopener">LA3181</a></td><td>Fixing the Great Wall</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/42/4290.html" target="_blank" rel="noopener">LA4290</a></td><td>Easy Climb</td><td>需要优化</td></tr> <tr><td><a href="http://uva.onlinejudge.org/external/105/10559.html" target="_blank" rel="noopener">UVa10559</a></td><td>Blocks</td><td>重点是设计状态及其转移</td></tr> <tr><td><a href="http://livearchive.onlinejudge.org/external/40/4031.html" target="_blank" rel="noopener">LA4031</a></td><td>Integer Transmission</td><td>需要认真思考。可以做到O(n^2)时间。</td></tr> <tr><td><a href="http://uva.onlinejudge.org/external/115/11521.html" target="_blank" rel="noopener">UVa11521</a></td><td>Compressor</td><td>需要认真思考。很容易写错。</td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/109/10949.html" target="_blank" rel="noopener">UVa10949</a></td><td>Kids in a Grid</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/111/11193.html" target="_blank" rel="noopener">UVa11193</a></td><td>Infinix</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/111/11194.html" target="_blank" rel="noopener">UVa11194</a></td><td>Stone Grid</td><td></td></tr> <tr><td>(extra)<a href="http://uva.onlinejudge.org/external/118/11810.html" target="_blank" rel="noopener">UVa11810</a></td><td>Gentle ping, to the old King</td><td></td></tr> <tr><td>(extra)UVa11171</td><td>SMS</td></tr> <tr><td>(extra)UVa11435</td><td>Network EXTREME!!!</td><td>推荐</td></tr> <tr><td>(extra)UVa11502</td><td>Rocket Stages</td></tr> <tr><td>(extra)UVa11750</td><td>Red-Blue Tree</td><td>推荐</td></tr> <tr><td>(extra)UVa11803</td><td>The Great Merge</td></tr> </table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态规划习题-1&quot;&gt;&lt;a href=&quot;#动态规划习题-1&quot; class=&quot;headerlink&quot; title=&quot;动态规划习题(1)&quot;&gt;&lt;/a&gt;动态规划习题(1)&lt;/h1&gt;&lt;h2 id=&quot;入门习题-Exercises-Beginner&quot;&gt;&lt;a href=&quot;#入门习题
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="算法竞赛入门经典训练指南" scheme="https://acshiryu.github.io/tags/acm-training-guide/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典训练指南》动态规划习题2</title>
    <link href="https://acshiryu.github.io/archives/acm/acm-training-guide-dp-problem-2.html"/>
    <id>https://acshiryu.github.io/archives/acm/acm-training-guide-dp-problem-2.html</id>
    <published>2018-09-16T03:12:00.000Z</published>
    <updated>2018-09-16T02:58:10.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划习题-2"><a href="#动态规划习题-2" class="headerlink" title="动态规划习题(2)"></a>动态规划习题(2)</h1><h2 id="划分成回文串（Partitioning-by-Palindromes-Uva-11584）"><a href="#划分成回文串（Partitioning-by-Palindromes-Uva-11584）" class="headerlink" title="划分成回文串（Partitioning by Palindromes, Uva 11584）"></a>划分成回文串（Partitioning by Palindromes, <a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2631" title="11584 - Partitioning by Palindromes" target="_blank" rel="noopener">Uva 11584</a>）</h2><p>简单动态规划，用dp[i]表示前i部分的划分情况。记录每个点j，以j为中点的回文串长度，然后dp[i]=min(dp[i-s-1]|其中a[i-s~i]为回文串)</p><figure class="highlight cpp"><figcaption><span>Uva 11584 Partitioning by Palindromes</span><a href="/assets/code/uva/11584.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> setmax(a) memset(a,0x7f,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="keyword">int</span> hw[maxn];</span><br><span class="line"><span class="keyword">int</span> hw2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">{</span><br><span class="line">hw[i]=hw2[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;i+j&lt;=l&amp;&amp;i-j&gt;<span class="number">0</span>;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(s[i+j]==s[i-j])</span><br><span class="line">hw[i]++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;i+j+<span class="number">1</span>&lt;=l&amp;&amp;i-j&gt;<span class="number">0</span>;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(s[i+j+<span class="number">1</span>]==s[i-j])</span><br><span class="line">hw2[i]++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">zero(dp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">{</span><br><span class="line">dp[i]=dp[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(hw[j]+j<span class="number">-1</span>&gt;=i)</span><br><span class="line">dp[i]=min(dp[i],dp[<span class="number">2</span>*j-i<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(hw2[j]+j&gt;=i)</span><br><span class="line">dp[i]=min(dp[i],dp[<span class="number">2</span>*j-i]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[l]);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="商人（Salesmen-LA-4256）"><a href="#商人（Salesmen-LA-4256）" class="headerlink" title="商人（Salesmen, LA 4256）"></a>商人（Salesmen, <a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2257" title="4256 - Salesmen" target="_blank" rel="noopener">LA 4256</a>）</h2><p>简单动态规划</p><figure class="highlight cpp"><figcaption><span>LA 4256 Salesmen</span><a href="/assets/code/la/4256.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> setmax(a) memset(a,0x7f,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">205</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">v[i].clear();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">v[a].push_back(b);</span><br><span class="line">v[b].push_back(a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p);</span><br><span class="line">setmax(dp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> bl=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(j==k)</span><br><span class="line">bl=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">bl=<span class="number">1</span>;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j]+bl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;v[j].size();d++)</span><br><span class="line">{</span><br><span class="line">dp[i][j]=min(dp[i][j],dp[i<span class="number">-1</span>][v[j][d]]+bl);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">ans=min(dp[p][i],ans);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h1 id="波浪子序列（Wavio-Sequence-Uva-10534）"><a href="#波浪子序列（Wavio-Sequence-Uva-10534）" class="headerlink" title="波浪子序列（Wavio Sequence, Uva 10534）"></a>波浪子序列（Wavio Sequence, <a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1475" title="10534 - Wavio Sequence" target="_blank" rel="noopener">Uva 10534</a>）</h1><p>做两次最长上升子序列就可以了</p><figure class="highlight cpp"><figcaption><span>Uva 10534 Wavio Sequence</span><a href="/assets/code/uva/10534.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> dp2[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erfen</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> m=(i+j)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[m]&gt;=k)</span><br><span class="line">j=m<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i=m;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line">zero(dp);</span><br><span class="line">zero(dp2);</span><br><span class="line">zero(t);</span><br><span class="line"></span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line">t[<span class="number">0</span>]=-maxn;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;t[j])</span><br><span class="line">{</span><br><span class="line">j++;</span><br><span class="line">t[j]=a[i];</span><br><span class="line">dp[i]=j;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k=erfen(<span class="number">0</span>,j,a[i]);</span><br><span class="line">dp[i]=k+<span class="number">1</span>;</span><br><span class="line">t[k+<span class="number">1</span>]=a[i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">zero(t);</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line">t[j]=-maxn;</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;t[j])</span><br><span class="line">{</span><br><span class="line">j++;</span><br><span class="line">t[j]=a[i];</span><br><span class="line">dp2[i]=j;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k=erfen(<span class="number">0</span>,j,a[i]);</span><br><span class="line">dp2[i]=k+<span class="number">1</span>;</span><br><span class="line">t[k+<span class="number">1</span>]=a[i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">ans=max(ans,<span class="number">2</span>*min(dp[i],dp2[i])<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态规划习题-2&quot;&gt;&lt;a href=&quot;#动态规划习题-2&quot; class=&quot;headerlink&quot; title=&quot;动态规划习题(2)&quot;&gt;&lt;/a&gt;动态规划习题(2)&lt;/h1&gt;&lt;h2 id=&quot;划分成回文串（Partitioning-by-Palindromes-Uva-11584）&quot;&gt;&lt;a href=&quot;#划分成回文串（Partitioning-by-Palindromes-Uva-11584）&quot; class=&quot;headerlink&quot; title=&quot;划分成回文串（Partitioning by Palindromes, Uva 11584）&quot;&gt;&lt;/a&gt;划分成回文串（Partitioning by Palindromes, &lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2631&quot; title=&quot;11584 - Partitioning by Palindromes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Uva 11584&lt;/a&gt;）&lt;/h2&gt;&lt;p&gt;简单动态规划，用dp[i]表示前i部分的划分情况。记录每个点j，以j为中点的回文串长度，然后dp[i]=min(dp[i-s-1]|其中a[i-s~i]为回文串)&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Uva 11584 Partitioning by Palindromes&lt;/span&gt;&lt;a href=&quot;/assets/code/uva/11584.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; zero(a) memset(a,0,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; one(a) memset(a,1,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; fone(a) memset(a,-1,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; setmax(a) memset(a,0x7f,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; pow2(a) ((a)*(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; pow3(a) ((pow2(a))*(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxn=&lt;span class=&quot;number&quot;&gt;1005&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; s[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dp[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hw[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hw2[maxn];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,s+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l=&lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(s+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=l;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			hw[i]=hw2[i]=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i+j&amp;lt;=l&amp;amp;&amp;amp;i-j&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s[i+j]==s[i-j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					hw[i]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i+j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;=l&amp;amp;&amp;amp;i-j&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s[i+j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]==s[i-j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					hw2[i]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		zero(dp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=l;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dp[i]=dp[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;j&amp;lt;i;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(hw[j]+j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;gt;=i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					dp[i]=min(dp[i],dp[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*j-i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(hw2[j]+j&amp;gt;=i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					dp[i]=min(dp[i],dp[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*j-i]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,dp[l]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="算法竞赛入门经典训练指南" scheme="https://acshiryu.github.io/tags/acm-training-guide/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典训练指南》高效算法设计举例1</title>
    <link href="https://acshiryu.github.io/archives/acm/acm-training-guide-efficient-algorithm-example-1.html"/>
    <id>https://acshiryu.github.io/archives/acm/acm-training-guide-efficient-algorithm-example-1.html</id>
    <published>2018-09-16T03:11:00.000Z</published>
    <updated>2018-09-16T02:57:27.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高效算法设计举例-1"><a href="#高效算法设计举例-1" class="headerlink" title="高效算法设计举例(1)"></a>高效算法设计举例(1)</h1><h2 id="例题17-年龄排序（Age-Sort，Uva11462）"><a href="#例题17-年龄排序（Age-Sort，Uva11462）" class="headerlink" title="例题17 年龄排序（Age Sort，Uva11462）"></a>例题17 年龄排序（Age Sort，<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2457" title="11462 - Age Sort" target="_blank" rel="noopener">Uva11462</a>）</h2><p>计数排序</p><figure class="highlight cpp"><figcaption><span>Uva 11462 Age Sort</span><a href="/assets/code/uva/11462.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">a[k]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> sc=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(a[i]--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(sc)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">sc=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="例题18-开放式学分制（Open-Credit-System，Uva11078）"><a href="#例题18-开放式学分制（Open-Credit-System，Uva11078）" class="headerlink" title="例题18 开放式学分制（Open Credit System，Uva11078）"></a>例题18 开放式学分制（Open Credit System，<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2019" title="11078 - Open Credit System" target="_blank" rel="noopener">Uva11078</a>）</h2><p>简单贪心</p><figure class="highlight cpp"><figcaption><span>Uva 11078 Open Credit System</span><a href="/assets/code/uva/11078.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> maxn=<span class="number">-150000</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">-300000</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">ans=max(ans,maxn-k);</span><br><span class="line">maxn=max(maxn,k);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题19-计算器谜题（Calculator-Conundrum，Uva11549）"><a href="#例题19-计算器谜题（Calculator-Conundrum，Uva11549）" class="headerlink" title="例题19 计算器谜题（Calculator Conundrum，Uva11549）"></a>例题19 计算器谜题（Calculator Conundrum，<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2544" title="11549 - Calculator Conundrum" target="_blank" rel="noopener">Uva11549</a>）</h2><p>找循环节，输出寻找过程中出现最大的值。用STL来判断每个值是否出现过</p><p>关于判重，训练指南上有一个更巧妙的方法，空间复杂度瞬间降为O(1)，使用floyd判圈算法</p><figure class="highlight cpp"><figcaption><span>Uva 11549 Calculator Conundrum</span><a href="/assets/code/uva/11549.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> __int64;</span><br><span class="line">__int64 mypow10[]={<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>,<span class="number">10000</span>,<span class="number">100000</span>,<span class="number">1000000</span>,<span class="number">10000000</span>,<span class="number">100000000</span>,<span class="number">1000000000</span>,<span class="number">100000000000</span>};</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(__int64 k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">{</span><br><span class="line">k=k/<span class="number">10</span>;</span><br><span class="line">cnt++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line">__int64 n,k;</span><br><span class="line"><span class="comment">//scanf("%I64d%I64d",&amp;n,&amp;k);</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="keyword">int</span> maxn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s.count(k)==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">maxn=max(maxn,(<span class="keyword">int</span>)k);</span><br><span class="line">s.insert(k);</span><br><span class="line">k=k*k;</span><br><span class="line"><span class="keyword">int</span> l=count(k);</span><br><span class="line"><span class="keyword">if</span>(l&gt;n)</span><br><span class="line">k=k/mypow10[l-n];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,maxn);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题20-流星（Meteor，LA3905）"><a href="#例题20-流星（Meteor，LA3905）" class="headerlink" title="例题20 流星（Meteor，LA3905）"></a>例题20 流星（Meteor，<a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1906" title="3905 - Meteor" target="_blank" rel="noopener">LA3905</a>）</h2><p>计算几何,代码和白书差不多</p><figure class="highlight cpp"><figcaption><span>LA 3905 Meteor</span><a href="/assets/code/la/3905.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">1e-6</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="keyword">bool</span> fx;</span><br><span class="line">prog(<span class="keyword">double</span> y,<span class="keyword">bool</span> f)</span><br><span class="line">{</span><br><span class="line">x=y;</span><br><span class="line">fx=f;</span><br><span class="line">}</span><br><span class="line">prog(){}</span><br><span class="line">}lr[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a,<span class="keyword">int</span> w,<span class="keyword">double</span> &amp;L,<span class="keyword">double</span> &amp;R)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(x&lt;=<span class="number">0</span>||x&gt;=w)</span><br><span class="line">R=L<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a&gt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">L=max(L,<span class="number">-1.0</span>*x/a);</span><br><span class="line">R=min(R,<span class="number">1.0</span>*(w-x)/a);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">L=max(L,<span class="number">1.0</span>*(w-x)/a);</span><br><span class="line">R=min(R,<span class="number">-1.0</span>*x/a);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(prog a,prog b)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a.x==b.x)</span><br><span class="line"><span class="keyword">return</span> a.fx&gt;b.fx;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> w,h,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;w,&amp;h,&amp;n);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y,a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x,&amp;y,&amp;a,&amp;b);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">double</span> L=<span class="number">0</span>,R=<span class="number">1e9</span>;</span><br><span class="line"> update(x,a,w,L,R);</span><br><span class="line"> update(y,b,h,L,R);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(R&gt;L)</span><br><span class="line"> {</span><br><span class="line"> lr[num++]=prog(L,<span class="number">0</span>);</span><br><span class="line"> lr[num++]=prog(R,<span class="number">1</span>);</span><br><span class="line"> }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sort(lr,lr+num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(lr[i].fx==<span class="number">0</span>)</span><br><span class="line">ans=max(ans,++cnt);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cnt--;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高效算法设计举例-1&quot;&gt;&lt;a href=&quot;#高效算法设计举例-1&quot; class=&quot;headerlink&quot; title=&quot;高效算法设计举例(1)&quot;&gt;&lt;/a&gt;高效算法设计举例(1)&lt;/h1&gt;&lt;h2 id=&quot;例题17-年龄排序（Age-Sort，Uva11462）&quot;&gt;&lt;a href=&quot;#例题17-年龄排序（Age-Sort，Uva11462）&quot; class=&quot;headerlink&quot; title=&quot;例题17 年龄排序（Age Sort，Uva11462）&quot;&gt;&lt;/a&gt;例题17 年龄排序（Age Sort，&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2457&quot; title=&quot;11462 - Age Sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Uva11462&lt;/a&gt;）&lt;/h2&gt;&lt;p&gt;计数排序&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Uva 11462 Age Sort&lt;/span&gt;&lt;a href=&quot;/assets/code/uva/11462.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;n),n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(a,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(a));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(n--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			a[k]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; sc=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(a[i]--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				sc=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="算法竞赛入门经典训练指南" scheme="https://acshiryu.github.io/tags/acm-training-guide/"/>
    
      <category term="排序" scheme="https://acshiryu.github.io/tags/sort/"/>
    
      <category term="计算几何" scheme="https://acshiryu.github.io/tags/computation-geometry/"/>
    
      <category term="贪心" scheme="https://acshiryu.github.io/tags/greedy/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典训练指南》高效算法设计举例2</title>
    <link href="https://acshiryu.github.io/archives/acm/acm-training-guide-efficient-algorithm-example-2.html"/>
    <id>https://acshiryu.github.io/archives/acm/acm-training-guide-efficient-algorithm-example-2.html</id>
    <published>2018-09-16T03:10:00.000Z</published>
    <updated>2018-09-16T02:57:16.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高效算法设计举例-2"><a href="#高效算法设计举例-2" class="headerlink" title="高效算法设计举例(2)"></a>高效算法设计举例(2)</h1><h2 id="例题21-子序列（Subsequence-SEERC-2006-LA-2678）"><a href="#例题21-子序列（Subsequence-SEERC-2006-LA-2678）" class="headerlink" title="例题21 子序列（Subsequence, SEERC 2006, LA 2678）"></a>例题21 子序列（Subsequence, SEERC 2006, <a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=679" title="2678 - Subsequence" target="_blank" rel="noopener">LA 2678</a>）</h2><p>简单题</p><figure class="highlight cpp"><figcaption><span>LA 2678 - Subsequence</span><a href="/assets/code/la/2678.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">200000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,s;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;s))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len=inf;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sum+=a[i];</span><br><span class="line"><span class="keyword">while</span>(sum&gt;=s)</span><br><span class="line">{</span><br><span class="line">len=min(len,i-k);</span><br><span class="line">sum-=a[++k];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(sum&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">len=<span class="number">1</span>;</span><br><span class="line">k=i;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(len==inf)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,len);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="例题22-最大子矩阵（City-Game-SEERC-2004-LA-3029）"><a href="#例题22-最大子矩阵（City-Game-SEERC-2004-LA-3029）" class="headerlink" title="例题22 最大子矩阵（City Game, SEERC 2004, LA 3029）"></a>例题22 最大子矩阵（City Game, SEERC 2004, <a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1030" title="3029 - City Game" target="_blank" rel="noopener">LA 3029</a>）</h2><p>DP46题之一，算是DP系列的入门题</p><figure class="highlight cpp"><figcaption><span>LA 3029 - City Game</span><a href="/assets/code/la/3029.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sd[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line">zero(dp);</span><br><span class="line">zero(mp);</span><br><span class="line">zero(sd);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">mp[i][j]=s[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">{</span><br><span class="line">k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(mp[j][i]==<span class="string">'R'</span>)</span><br><span class="line">{</span><br><span class="line">sd[j][i]=j;</span><br><span class="line">k=j;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mp[j][i]==<span class="string">'F'</span>)</span><br><span class="line">{</span><br><span class="line">sd[j][i]=k;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> mj=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">k=<span class="number">-1</span>;</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">{</span><br><span class="line">k=j<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(k!=<span class="number">-1</span>&amp;&amp;sd[i][k]&lt;=sd[i][j])</span><br><span class="line">k=dp[k];</span><br><span class="line">dp[j]=k;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">mj=max(mj,(j-dp[j])*(i-sd[i][j]));</span><br><span class="line"></span><br><span class="line">k=m;</span><br><span class="line">dp[m<span class="number">-1</span>]=m;</span><br><span class="line"><span class="keyword">for</span>(j=m<span class="number">-2</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">{</span><br><span class="line">k=j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k!=m&amp;&amp;sd[i][k]&lt;=sd[i][j])</span><br><span class="line">k=dp[k];</span><br><span class="line">dp[j]=k;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">mj=max(mj,(dp[j]-j)*(i-sd[i][j]));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">3</span>*mj);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题23-遥远的银河（Distant-Galaxy-Shanghai-2006-LA-3695）"><a href="#例题23-遥远的银河（Distant-Galaxy-Shanghai-2006-LA-3695）" class="headerlink" title="例题23 遥远的银河（Distant Galaxy, Shanghai 2006, LA 3695）"></a>例题23 遥远的银河（Distant Galaxy, Shanghai 2006, <a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1696" title="3695 - Distant Galaxy" target="_blank" rel="noopener">LA 3695</a>）</h2><p>和上一题(City Game)类似，但这题略复杂。明显每个点的坐标相差太大，第一步需要对坐标进行离散化，然后记录每一个点上面和左面点的个数，最后四个循环解决问题。</p><figure class="highlight cpp"><figcaption><span>LA 3695 - Distant Galaxy</span><a href="/assets/code/la/3695.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> tx,ty;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">}p[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a.tx&lt;b.tx;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a.ty&lt;b.ty;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x_num;</span><br><span class="line"><span class="keyword">int</span> y_num;</span><br><span class="line"><span class="keyword">int</span> sumx[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> sumy[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="keyword">bool</span> mp[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i].tx,&amp;p[i].ty);</span><br><span class="line">p[i].i=i;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//��ɢ��</span></span><br><span class="line">x_num=y_num=<span class="number">1</span>;</span><br><span class="line">sort(p,p+n,cmpx);</span><br><span class="line">p[<span class="number">0</span>].x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(p[i].tx==p[i<span class="number">-1</span>].tx)</span><br><span class="line">p[i].x=p[i<span class="number">-1</span>].x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p[i].x=p[i<span class="number">-1</span>].x+<span class="number">1</span>;</span><br><span class="line">x_num=p[i].x+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sort(p,p+n,cmpy);</span><br><span class="line">p[<span class="number">0</span>].y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(p[i].ty==p[i<span class="number">-1</span>].ty)</span><br><span class="line">p[i].y=p[i<span class="number">-1</span>].y;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p[i].y=p[i<span class="number">-1</span>].y+<span class="number">1</span>;</span><br><span class="line">y_num=p[i].y+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">zero(mp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">mp[p[i].x][p[i].y]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;x_num;i++)</span><br><span class="line">{</span><br><span class="line">sumy[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=y_num;j++)</span><br><span class="line">{</span><br><span class="line">sumy[i][j]=sumy[i][j<span class="number">-1</span>]+mp[i][j<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;y_num;i++)</span><br><span class="line">{</span><br><span class="line">sumx[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=x_num;j++)</span><br><span class="line">{</span><br><span class="line">sumx[j][i]=sumx[j<span class="number">-1</span>][i]+mp[j<span class="number">-1</span>][i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;x_num;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;y_num;j++)</span><br><span class="line">{</span><br><span class="line">num=max(num,sumy[i][y_num]);</span><br><span class="line">num=max(num,sumx[x_num][i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;x_num;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;x_num;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;y_num;s++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=s+<span class="number">1</span>;t&lt;y_num;t++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> shang=sumx[j][s]-sumx[i+<span class="number">1</span>][s];</span><br><span class="line"><span class="keyword">int</span> xia=sumx[j][t]-sumx[i+<span class="number">1</span>][t];</span><br><span class="line"><span class="keyword">int</span> zuo=sumy[i][t]-sumy[i][s+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> you=sumy[j][t]-sumy[j][s+<span class="number">1</span>];</span><br><span class="line">num=max(num,shang+xia+zuo+you+mp[i][s]+mp[i][t]+mp[j][s]+mp[j][t]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,cas++,num);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题24-废料堆（Garbage-Heap-UVa-10755）"><a href="#例题24-废料堆（Garbage-Heap-UVa-10755）" class="headerlink" title="例题24 废料堆（Garbage Heap, UVa 10755）"></a>例题24 废料堆（Garbage Heap, <a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1696" title="10755 - Garbage Heap" target="_blank" rel="noopener">UVa 10755</a>）</h2><p>和前两题类似，这题只是将题目维度增加到三维，求立方体的最大价值和，做法差不多，详看白书及代码</p><figure class="highlight cpp"><figcaption><span>uva 10755 - Garbage Heap</span><a href="/assets/code/uva/10755.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mp[<span class="number">25</span>][<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[<span class="number">25</span>][<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inf=(<span class="number">1L</span>L)&lt;&lt;<span class="number">55</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">zero(mp);</span><br><span class="line">zero(sum);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=c;k++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;mp[i][j][k]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h,ia,ib,ja,jb;</span><br><span class="line"><span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=c;h++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">{</span><br><span class="line">sum[i][j][h]=mp[i][j][h]+sum[i<span class="number">-1</span>][j][h]+sum[i][j<span class="number">-1</span>][h]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>][h];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=-inf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(ia=<span class="number">0</span>;ia&lt;a;ia++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(ja=<span class="number">0</span>;ja&lt;b;ja++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(ib=ia+<span class="number">1</span>;ib&lt;=a;ib++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(jb=ja+<span class="number">1</span>;jb&lt;=b;jb++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> maxk=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=c;h++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp=sum[ib][jb][h]+sum[ia][ja][h]-sum[ib][ja][h]-sum[ia][jb][h];</span><br><span class="line">ans=max(ans,maxk+tmp);</span><br><span class="line">maxk=max(maxk+tmp,<span class="number">0L</span>L);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">if</span>(T)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题25-侏罗纪（Jurassic-Remains-SEERC-2003-POJ-1903-LA-2965）"><a href="#例题25-侏罗纪（Jurassic-Remains-SEERC-2003-POJ-1903-LA-2965）" class="headerlink" title="例题25 侏罗纪（Jurassic Remains, SEERC 2003, POJ 1903, LA 2965）"></a>例题25 侏罗纪（Jurassic Remains, SEERC 2003, <a href="http://poj.org/problem?id=1903" title="Jurassic Remains" target="_blank" rel="noopener">POJ 1903</a>, <a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=966" title="2965 - Jurassic Remains" target="_blank" rel="noopener">LA 2965</a>）</h2><p>最好想的办法是穷举，但复杂度是$O({2}^{n})$，有点大。这题就可以用中途相遇法，先求前$n/2$个字符串能得到的值，再求剩余字符串能得到的值，最后二分判断是否可以相遇</p><figure class="highlight cpp"><figcaption><span>poj 1903 - Jurassic Remains</span><a href="/assets/code/poj/1903.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> num2[<span class="number">30</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> xh;</span><br><span class="line">}qian[<span class="number">5000</span>],hou[<span class="number">5000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mycount</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">bool</span> zl)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">prog *tmp;</span><br><span class="line"><span class="keyword">if</span>(zl==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">tmp=qian;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">tmp=hou;</span><br><span class="line">}</span><br><span class="line">zero(tmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> len2=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;(r-l));i++)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k=i;</span><br><span class="line">j=l;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">ans=ans^num2[j];</span><br><span class="line">len++;</span><br><span class="line">}</span><br><span class="line">j++;</span><br><span class="line">k/=<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">tmp[i].num=ans;</span><br><span class="line">tmp[i].len=len;</span><br><span class="line">tmp[i].xh=i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erfen</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(l+<span class="number">1</span>==r)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(hou[l].num==k)</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(hou[m].num&lt;=k)</span><br><span class="line"><span class="keyword">return</span> erfen(m,r,k);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> erfen(l,m,k);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a.num==b.num)</span><br><span class="line"><span class="keyword">return</span> a.len&lt;b.len;</span><br><span class="line"><span class="keyword">return</span> a.num&lt;b.num;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">zero(num);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;s[i].length();j++)</span><br><span class="line">{</span><br><span class="line">num[i][s[i][j]-<span class="string">'A'</span>]=(!num[i][s[i][j]-<span class="string">'A'</span>]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">num2[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">{</span><br><span class="line">num2[i]=<span class="number">2</span>*num2[i]+num[i][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">mycount(<span class="number">0</span>,n/<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">mycount(n/<span class="number">2</span>,n,<span class="number">1</span>);</span><br><span class="line">sort(hou,hou+(<span class="number">1</span>&lt;&lt;(n-n/<span class="number">2</span>)),cmp);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ansi,ansj;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;(n/<span class="number">2</span>));i++)</span><br><span class="line">{</span><br><span class="line">j=erfen(<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;(n-n/<span class="number">2</span>)),qian[i].num);</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> qianhou=qian[i].len+hou[j].len;</span><br><span class="line"><span class="keyword">if</span>(qianhou&gt;ans)</span><br><span class="line">{</span><br><span class="line">ansi=qian[i].xh;</span><br><span class="line">ansj=hou[j].xh;</span><br><span class="line">ans=qianhou;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">bool</span> sp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ansi)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ansi%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(sp)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;t+<span class="number">1</span>;</span><br><span class="line">sp=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">t++;</span><br><span class="line">ansi/=<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">t=n/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(ansj)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ansj%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(sp)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;t+<span class="number">1</span>;</span><br><span class="line">sp=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">t++;</span><br><span class="line">ansj/=<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高效算法设计举例-2&quot;&gt;&lt;a href=&quot;#高效算法设计举例-2&quot; class=&quot;headerlink&quot; title=&quot;高效算法设计举例(2)&quot;&gt;&lt;/a&gt;高效算法设计举例(2)&lt;/h1&gt;&lt;h2 id=&quot;例题21-子序列（Subsequence-SEERC-2006-LA-2678）&quot;&gt;&lt;a href=&quot;#例题21-子序列（Subsequence-SEERC-2006-LA-2678）&quot; class=&quot;headerlink&quot; title=&quot;例题21 子序列（Subsequence, SEERC 2006, LA 2678）&quot;&gt;&lt;/a&gt;例题21 子序列（Subsequence, SEERC 2006, &lt;a href=&quot;https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=679&quot; title=&quot;2678 - Subsequence&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LA 2678&lt;/a&gt;）&lt;/h2&gt;&lt;p&gt;简单题&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;LA 2678 - Subsequence&lt;/span&gt;&lt;a href=&quot;/assets/code/la/2678.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;100005&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; inf=&lt;span class=&quot;number&quot;&gt;200000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(~&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d%d&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;s))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len=inf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			sum+=a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(sum&amp;gt;=s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				len=min(len,i-k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				sum-=a[++k];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				len=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				k=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(len==inf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="算法竞赛入门经典训练指南" scheme="https://acshiryu.github.io/tags/acm-training-guide/"/>
    
      <category term="离散" scheme="https://acshiryu.github.io/tags/disperse/"/>
    
      <category term="二分" scheme="https://acshiryu.github.io/tags/dichotomize/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典训练指南》问题求解常见策略1</title>
    <link href="https://acshiryu.github.io/archives/acm/acm-training-guide-problem-solving-strategy-1.html"/>
    <id>https://acshiryu.github.io/archives/acm/acm-training-guide-problem-solving-strategy-1.html</id>
    <published>2018-09-16T03:09:00.000Z</published>
    <updated>2018-09-16T02:57:06.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题求解常见策略-1"><a href="#问题求解常见策略-1" class="headerlink" title="问题求解常见策略(1)"></a>问题求解常见策略(1)</h1><h2 id="例题7-偶数矩阵（Even-Parity，Uva11464）"><a href="#例题7-偶数矩阵（Even-Parity，Uva11464）" class="headerlink" title="例题7 偶数矩阵（Even Parity，Uva11464）"></a>例题7 偶数矩阵（Even Parity，<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2459" title="11464 - Even Parity" target="_blank" rel="noopener">Uva11464</a>）</h2><p>枚举题，只需要枚举处第一行的最终状态就可以推出其他行，然后在判断是否满足变换规则。最后找出最小变动量</p><figure class="highlight cpp"><figcaption><span>Uva11464</span><a href="/assets/code/uva/11464.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000000</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">}a[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">a[<span class="number">0</span>][i].y=<span class="number">0</span>;</span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">{</span><br><span class="line">a[<span class="number">0</span>][i].y=k%<span class="number">2</span>;</span><br><span class="line">k=k/<span class="number">2</span>;</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>][i].x==<span class="number">1</span>&amp;&amp;a[<span class="number">0</span>][i].y==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">2</span>)</span><br><span class="line">sum+=a[i<span class="number">-2</span>][j].y;</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">0</span>)</span><br><span class="line">sum+=a[i<span class="number">-1</span>][j<span class="number">-1</span>].y;</span><br><span class="line"><span class="keyword">if</span>(j&lt;n<span class="number">-1</span>)</span><br><span class="line">sum+=a[i<span class="number">-1</span>][j+<span class="number">1</span>].y;</span><br><span class="line"><span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">a[i][j].y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i][j].y=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j].y==<span class="number">0</span>&amp;&amp;a[i][j].x==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> MAX;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span>(a[i][j].x==<span class="number">0</span>&amp;&amp;a[i][j].y==<span class="number">1</span>)</span><br><span class="line">cnt++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j].x);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=MAX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(check(i)==<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">ans=min(ans,fun());</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ans!=MAX)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,cas++,ans);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: -1\n"</span>,cas++);</span><br><span class="line">}</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="例题8-彩色立方体（Colored-Cubes，LA3401-POJ2741）"><a href="#例题8-彩色立方体（Colored-Cubes，LA3401-POJ2741）" class="headerlink" title="例题8 彩色立方体（Colored Cubes，LA3401,POJ2741）"></a>例题8 彩色立方体（Colored Cubes，<a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1402" title="3401 - Colored Cubes" target="_blank" rel="noopener">LA3401</a>,<a href="http://poj.org/problem?id=2741" title="POJ2741 - Colored Cubes" target="_blank" rel="noopener">POJ2741</a>）</h2><p>枚举题，枚举每个立方体的24种旋转，然后求出最小填涂方案。注意，第一个立方体就不必枚举了</p><figure class="highlight cpp"><figcaption><span>POJ2741</span><a href="/assets/code/poj/2741.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xz[<span class="number">30</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> xz_cnt;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="built_in">string</span> color[<span class="number">6</span>];</span><br><span class="line">}a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> cr[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//cout&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(k==n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j,p;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum_tmp;</span><br><span class="line">sum_tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> xt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">cr[j]=a[j].color[xz[x[j]][i]];</span><br><span class="line"><span class="keyword">for</span>(p=<span class="number">0</span>;p&lt;j;p++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(cr[j].compare(cr[p])==<span class="number">0</span>)</span><br><span class="line">xt++;</span><br><span class="line">}</span><br><span class="line">sum_tmp=max(sum_tmp,xt);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sum+=(n-sum_tmp);</span><br><span class="line"><span class="keyword">if</span>(sum&gt;=ans)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line">ans=sum;</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;xz_cnt;i++)</span><br><span class="line">{</span><br><span class="line">x[k]=i;</span><br><span class="line">DFS(k+<span class="number">1</span>,x);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xuanzhuan</span><span class="params">(<span class="keyword">int</span> ding,<span class="keyword">int</span> di,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> abcd[<span class="number">4</span>];</span><br><span class="line">abcd[<span class="number">0</span>]=a;</span><br><span class="line">abcd[<span class="number">1</span>]=b;</span><br><span class="line">abcd[<span class="number">2</span>]=c;</span><br><span class="line">abcd[<span class="number">3</span>]=d;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++,xz_cnt++)</span><br><span class="line">{</span><br><span class="line">xz[xz_cnt][<span class="number">0</span>]=ding;</span><br><span class="line">xz[xz_cnt][<span class="number">5</span>]=di;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)</span><br><span class="line">xz[xz_cnt][j]=abcd[(i+j)%<span class="number">4</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">zero(xz);</span><br><span class="line">xz_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//1�Ķ�����6,2�Ķ�����5,3�Ķ�����4</span></span><br><span class="line">xuanzhuan(<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>);</span><br><span class="line">xuanzhuan(<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line">xuanzhuan(<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">xuanzhuan(<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">xuanzhuan(<span class="number">0</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">xuanzhuan(<span class="number">5</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i].color[j];</span><br><span class="line"><span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line">ans=MAX;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">10</span>];</span><br><span class="line">x[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">DFS(<span class="number">1</span>,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题9-中国麻将（Chinese-Mahjong，Uva11210）"><a href="#例题9-中国麻将（Chinese-Mahjong，Uva11210）" class="headerlink" title="例题9 中国麻将（Chinese Mahjong，Uva11210）"></a>例题9 中国麻将（Chinese Mahjong，<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2151" title="11210 - Chinese Mahjong" target="_blank" rel="noopener">Uva11210</a>）</h2><p>枚举题，先枚举出将，然后搜索对剩余的一张牌搜索出他的顺和刻</p><figure class="highlight cpp"><figcaption><span>Uva11210</span><a href="/assets/code/uva/11210.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> mj[<span class="number">50</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> mj_num;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> own[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> own_num;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">mj_num=<span class="number">0</span>;</span><br><span class="line">zero(mj);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++,mj_num++)</span><br><span class="line">{</span><br><span class="line">mj[mj_num][<span class="number">0</span>]=i+<span class="string">'0'</span>;</span><br><span class="line">mj[mj_num][<span class="number">1</span>]=<span class="string">'T'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++,mj_num++)</span><br><span class="line">{</span><br><span class="line">mj[mj_num][<span class="number">0</span>]=i+<span class="string">'0'</span>;</span><br><span class="line">mj[mj_num][<span class="number">1</span>]=<span class="string">'S'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++,mj_num++)</span><br><span class="line">{</span><br><span class="line">mj[mj_num][<span class="number">0</span>]=i+<span class="string">'0'</span>;</span><br><span class="line">mj[mj_num][<span class="number">1</span>]=<span class="string">'W'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">strcpy</span>(mj[mj_num++],<span class="string">"DONG"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(mj[mj_num++],<span class="string">"NAN"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(mj[mj_num++],<span class="string">"XI"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(mj[mj_num++],<span class="string">"BEI"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(mj[mj_num++],<span class="string">"ZHONG"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(mj[mj_num++],<span class="string">"FA"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(mj[mj_num++],<span class="string">"BAI"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mj_num_cnt</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'T'</span>)</span><br><span class="line"><span class="keyword">return</span> s[<span class="number">0</span>]-<span class="string">'0'</span><span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'S'</span>)</span><br><span class="line"><span class="keyword">return</span> s[<span class="number">0</span>]-<span class="string">'0'</span>+<span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">'W'</span>)</span><br><span class="line"><span class="keyword">return</span> s[<span class="number">0</span>]-<span class="string">'0'</span>+<span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">27</span>;i&lt;<span class="number">34</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(s,mj[i])==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> ans_num;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> mj_i,<span class="keyword">int</span> sd)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">if</span>(ans_num&gt;<span class="number">0</span>&amp;&amp;ans[ans_num<span class="number">-1</span>]==mj_i)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(sd==<span class="number">5</span>)</span><br><span class="line">{</span><br><span class="line">ans[ans_num++]=mj_i;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> dt=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;own_num;i++)</span><br><span class="line">{</span><br><span class="line">j=own[i];</span><br><span class="line"><span class="keyword">if</span>(a[j]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(a[j]==<span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line">a[j]-=<span class="number">3</span>;</span><br><span class="line">DFS(mj_i,sd+<span class="number">1</span>);</span><br><span class="line">a[j]+=<span class="number">3</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>( (j&lt;<span class="number">9</span>&amp;&amp;j&gt;<span class="number">1</span>) ||(j&lt;<span class="number">18</span>&amp;&amp;j&gt;<span class="number">10</span>) ||(j&lt;<span class="number">27</span>&amp;&amp;j&gt;<span class="number">19</span>))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[j<span class="number">-1</span>]&gt;<span class="number">0</span>&amp;&amp;a[j<span class="number">-2</span>]&gt;<span class="number">0</span>&amp;&amp;a[j]&gt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">a[j<span class="number">-1</span>]--;</span><br><span class="line">a[j<span class="number">-2</span>]--;</span><br><span class="line">a[j]--;</span><br><span class="line">DFS(mj_i,sd+<span class="number">1</span>);</span><br><span class="line">a[j<span class="number">-1</span>]++;</span><br><span class="line">a[j<span class="number">-2</span>]++;</span><br><span class="line">a[j]++;</span><br><span class="line">dt=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (j&lt;<span class="number">8</span>&amp;&amp;j&gt;<span class="number">0</span>) ||(j&lt;<span class="number">17</span>&amp;&amp;j&gt;<span class="number">9</span>) ||(j&lt;<span class="number">26</span>&amp;&amp;j&gt;<span class="number">18</span>))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[j<span class="number">-1</span>]&gt;<span class="number">0</span>&amp;&amp;a[j+<span class="number">1</span>]&gt;<span class="number">0</span>&amp;&amp;a[j]&gt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">a[j<span class="number">-1</span>]--;</span><br><span class="line">a[j+<span class="number">1</span>]--;</span><br><span class="line">a[j]--;</span><br><span class="line">DFS(mj_i,sd+<span class="number">1</span>);</span><br><span class="line">a[j<span class="number">-1</span>]++;</span><br><span class="line">a[j+<span class="number">1</span>]++;</span><br><span class="line">a[j]++;</span><br><span class="line">dt=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (j&lt;<span class="number">7</span>&amp;&amp;j&gt;=<span class="number">0</span>) ||(j&lt;<span class="number">16</span>&amp;&amp;j&gt;=<span class="number">9</span>) ||(j&lt;<span class="number">25</span>&amp;&amp;j&gt;=<span class="number">18</span>))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[j+<span class="number">2</span>]&gt;<span class="number">0</span>&amp;&amp;a[j+<span class="number">1</span>]&gt;<span class="number">0</span>&amp;&amp;a[j]&gt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">a[j+<span class="number">2</span>]--;</span><br><span class="line">a[j+<span class="number">1</span>]--;</span><br><span class="line">a[j]--;</span><br><span class="line">DFS(mj_i,sd+<span class="number">1</span>);</span><br><span class="line">a[j+<span class="number">2</span>]++;</span><br><span class="line">a[j+<span class="number">1</span>]++;</span><br><span class="line">a[j]++;</span><br><span class="line">dt=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(dt==<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//cout&lt;&lt;mj_num_cnt("FA")&lt;&lt;' '&lt;&lt;mj[32]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">while</span>(zero(a),~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'0'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">zero(own);</span><br><span class="line">j=mj_num_cnt(s);</span><br><span class="line">own[<span class="number">0</span>]=j;</span><br><span class="line">own_num=<span class="number">1</span>;</span><br><span class="line">a[j]++;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">13</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">j=mj_num_cnt(s);</span><br><span class="line"><span class="keyword">if</span>(a[j]==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">own[own_num++]=j;</span><br><span class="line">}</span><br><span class="line">a[j]++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ans_num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">34</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">4</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">own[own_num++]=i;</span><br><span class="line">}</span><br><span class="line">a[i]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;own_num;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[own[j]]&gt;=<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line">a[own[j]]-=<span class="number">2</span>;</span><br><span class="line">DFS(i,<span class="number">1</span>);</span><br><span class="line">a[own[j]]+=<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">1</span>)</span><br><span class="line">own_num--;</span><br><span class="line">a[i]--;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: "</span>,cas++);</span><br><span class="line"><span class="keyword">if</span>(ans_num==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not ready\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ans_num;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,mj[ans[i]]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题10-正整数序列（Help-is-needed-for-Dexter，Uva11384）"><a href="#例题10-正整数序列（Help-is-needed-for-Dexter，Uva11384）" class="headerlink" title="例题10 正整数序列（Help is needed for Dexter，Uva11384）"></a>例题10 正整数序列（Help is needed for Dexter，<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2379" title="11384 - Help is needed for Dexter" target="_blank" rel="noopener">Uva11384</a>）</h2><p>终于不是枚举题了，比较简单的一道递推，公式f(n)=f(n/2)+1</p><figure class="highlight cpp"><figcaption><span>Uva11384</span><a href="/assets/code/uva/11384.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> f(n/<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f(n));</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题11-新汉诺塔问题（A-Different-Task，Uva10795）"><a href="#例题11-新汉诺塔问题（A-Different-Task，Uva10795）" class="headerlink" title="例题11 新汉诺塔问题（A Different Task，Uva10795）"></a>例题11 新汉诺塔问题（A Different Task，<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1736" title="10795 - A Different Task" target="_blank" rel="noopener">Uva10795</a>）</h2><p>较复杂的一道递推题，方法还是和经典汉诺塔推理方法类似，详情还是看白书吧</p><figure class="highlight cpp"><figcaption><span>Uva10795</span><a href="/assets/code/uva/10795.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> k,<span class="keyword">int</span> zd)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(k&lt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(p[k]==zd)</span><br><span class="line"><span class="keyword">return</span> f(p,k<span class="number">-1</span>,zd);</span><br><span class="line"><span class="keyword">return</span> f(p,k<span class="number">-1</span>,<span class="number">6</span>-p[k]-zd)+((<span class="number">1L</span>L)&lt;&lt;(k));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(s[i]!=t[i])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: 0\n"</span>,cas++);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">6</span>-s[i]-t[i];</span><br><span class="line">ans=f(s,i<span class="number">-1</span>,k)+f(t,i<span class="number">-1</span>,k)+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>,cas++,ans);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题求解常见策略-1&quot;&gt;&lt;a href=&quot;#问题求解常见策略-1&quot; class=&quot;headerlink&quot; title=&quot;问题求解常见策略(1)&quot;&gt;&lt;/a&gt;问题求解常见策略(1)&lt;/h1&gt;&lt;h2 id=&quot;例题7-偶数矩阵（Even-Parity，Uva11464）&quot;&gt;&lt;a href=&quot;#例题7-偶数矩阵（Even-Parity，Uva11464）&quot; class=&quot;headerlink&quot; title=&quot;例题7 偶数矩阵（Even Parity，Uva11464）&quot;&gt;&lt;/a&gt;例题7 偶数矩阵（Even Parity，&lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2459&quot; title=&quot;11464 - Even Parity&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Uva11464&lt;/a&gt;）&lt;/h2&gt;&lt;p&gt;枚举题，只需要枚举处第一行的最终状态就可以推出其他行，然后在判断是否满足变换规则。最后找出最小变动量&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Uva11464&lt;/span&gt;&lt;a href=&quot;/assets/code/uva/11464.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; zero(a) memset(a,0,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; one(a) memset(a,1,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; fone(a) memset(a,-1,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; pow2(a) ((a)*(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; pow3(a) ((pow2(a))*(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MAX 10000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x,y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}a[&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][i].y=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][i].y=k%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		k=k/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][i].x==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;amp;&amp;amp;a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][i].y==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i&amp;gt;=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				sum+=a[i&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;][j].y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				sum+=a[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;].y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j&amp;lt;n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				sum+=a[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				a[i][j].y=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				a[i][j].y=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[i][j].y==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;a[i][j].x==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[i][j].x==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;a[i][j].y==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				cnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cas=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;a[i][j].x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans=MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;n);i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(check(i)==&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans=min(ans,fun());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ans!=MAX)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Case %d: %d\n&quot;&lt;/span&gt;,cas++,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Case %d: -1\n&quot;&lt;/span&gt;,cas++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="算法竞赛入门经典训练指南" scheme="https://acshiryu.github.io/tags/acm-training-guide/"/>
    
      <category term="深度优先搜索" scheme="https://acshiryu.github.io/tags/depth-first-search/"/>
    
      <category term="递归" scheme="https://acshiryu.github.io/tags/recursive/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典训练指南》问题求解常见策略2</title>
    <link href="https://acshiryu.github.io/archives/acm/acm-training-guide-problem-solving-strategy-2.html"/>
    <id>https://acshiryu.github.io/archives/acm/acm-training-guide-problem-solving-strategy-2.html</id>
    <published>2018-09-16T03:08:00.000Z</published>
    <updated>2018-09-16T02:56:55.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题求解常见策略-2"><a href="#问题求解常见策略-2" class="headerlink" title="问题求解常见策略(2)"></a>问题求解常见策略(2)</h1><h2 id="例题12-组装电脑（Assemble，LA3971，POJ3497）"><a href="#例题12-组装电脑（Assemble，LA3971，POJ3497）" class="headerlink" title="例题12 组装电脑（Assemble，LA3971，POJ3497）"></a>例题12 组装电脑（Assemble，<a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1972" title="3971 - Assemble" target="_blank" rel="noopener">LA3971</a>，<a href="http://poj.org/problem?id=3497" title="POJ3497 - Assemble" target="_blank" rel="noopener">POJ3497</a>）</h2><p>简单二分</p><figure class="highlight cpp"><figcaption><span>POJ 3497 - Assemble</span><a href="/assets/code/poj/3497.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">char</span> type[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">int</span> quality;</span><br><span class="line">}com[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare_type</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(a.type,b.type)==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a.quality==b.quality)</span><br><span class="line"><span class="keyword">return</span> a.price&lt;b.price;</span><br><span class="line"><span class="keyword">return</span> a.quality&lt;b.quality;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(a.type,b.type)&gt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> com_start[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> com_type;</span><br><span class="line"><span class="keyword">int</span> n,b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erfen</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(s==t)</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"><span class="keyword">int</span> m=(s+t)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;com_type;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> less=<span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">for</span>(j=com_start[i];j&lt;com_start[i+<span class="number">1</span>];j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(com[j].quality&gt;=m)</span><br><span class="line">{</span><br><span class="line">less=min(less,com[j].price);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">sum+=less;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(sum&lt;=b)</span><br><span class="line"><span class="keyword">return</span> erfen(m,t);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> erfen(s,m<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;b);</span><br><span class="line"><span class="keyword">int</span> max_quality,min_quality;</span><br><span class="line">max_quality=<span class="number">0</span>;</span><br><span class="line">min_quality=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s%d%d"</span>,&amp;com[i].type,&amp;com[i].name,&amp;com[i].price,&amp;com[i].quality);</span><br><span class="line">max_quality=max(max_quality,com[i].quality);</span><br><span class="line">min_quality=min(min_quality,com[i].quality);</span><br><span class="line">}</span><br><span class="line">sort(com,com+n,compare_type);</span><br><span class="line"></span><br><span class="line">com_start[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(com[i].type,com[i<span class="number">-1</span>].type))</span><br><span class="line">com_start[j++]=i;</span><br><span class="line">}</span><br><span class="line">com_type=j;</span><br><span class="line">com_start[j]=n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,erfen(min_quality,max_quality));</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="例题13-派（Pie，LA3635，POJ3211）"><a href="#例题13-派（Pie，LA3635，POJ3211）" class="headerlink" title="例题13 派（Pie，LA3635，POJ3211）"></a>例题13 派（Pie，<a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;category=19&amp;problem=1636&amp;mosmsg=Submission+received+with+ID+1264444" title="3635 - Pie" target="_blank" rel="noopener">LA3635</a>，<a href="http://poj.org/problem?id=3122" title="POJ3122 - Pie" target="_blank" rel="noopener">POJ3211</a>）</h2><p>二分题，和上题类似，注意精度问题</p><figure class="highlight cpp"><figcaption><span>POJ 3211 - Pie</span><a href="/assets/code/poj/3211.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="number">3.14159265359</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf=<span class="number">0.00001</span>;</span><br><span class="line"><span class="keyword">double</span> area[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> n,f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">erfen</span><span class="params">(<span class="keyword">double</span> s,<span class="keyword">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">double</span> m=(s+t)/<span class="number">2</span>+inf;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(s-t)&lt;inf)</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">sum+=(<span class="keyword">int</span>)(area[i]/m);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(sum&gt;=f)</span><br><span class="line"><span class="keyword">return</span> erfen(m,t);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> erfen(s,m-inf);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;f);</span><br><span class="line">f++;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r);</span><br><span class="line">area[i]=pi*r*r;</span><br><span class="line">sum+=area[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,erfen(<span class="number">0</span>,sum/f));</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题14-填充正方形（Fill-the-Square，Uva11520）"><a href="#例题14-填充正方形（Fill-the-Square，Uva11520）" class="headerlink" title="例题14 填充正方形（Fill the Square，Uva11520）"></a>例题14 填充正方形（Fill the Square，<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2515" title="11520 - Fill the Square" target="_blank" rel="noopener">Uva11520</a>）</h2><p>水题</p><figure class="highlight cpp"><figcaption><span>Uva 11520 Fill the Square</span><a href="/assets/code/uva/11520.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> mat[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T,cas=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> n,i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">memset</span>(mat,<span class="string">'.'</span>,<span class="keyword">sizeof</span>(mat));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,mat[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(mat[i][j]==<span class="string">'.'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'A'</span>;c&lt;=<span class="string">'Z'</span>;c++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(c!=mat[i][j<span class="number">-1</span>]&amp;&amp;c!=mat[i][j+<span class="number">1</span>]&amp;&amp;c!=mat[i<span class="number">-1</span>][j]&amp;&amp;c!=mat[i+<span class="number">1</span>][j])</span><br><span class="line">{</span><br><span class="line">mat[i][j]=c;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,cas++);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,mat[i]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题15-网络（Network，LA3902）"><a href="#例题15-网络（Network，LA3902）" class="headerlink" title="例题15 网络（Network，LA3902）"></a>例题15 网络（Network，<a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1903" title="3902 - Network" target="_blank" rel="noopener">LA3902</a>）</h2><p>深搜的题，看着白书过的</p><figure class="highlight cpp"><figcaption><span>LA 3902 Network</span><a href="/assets/code/la/3902.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;link[maxn],node[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="keyword">int</span> n,s,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">link[i].clear();</span><br><span class="line">node[i].clear();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> father,<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">fa[root]=father;</span><br><span class="line"><span class="keyword">if</span>(link[root].size()==<span class="number">1</span>&amp;&amp;dep&gt;k)</span><br><span class="line">node[dep].push_back(root);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;link[root].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> knode=link[root][i];</span><br><span class="line"><span class="keyword">if</span>(knode!=father)</span><br><span class="line">{</span><br><span class="line">build(knode,root,dep+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root ,<span class="keyword">int</span> fat,<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//cout&lt;&lt;root&lt;&lt;' '&lt;&lt;dep&lt;&lt;endl;</span></span><br><span class="line">vis[root]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(dep==k)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;link[root].size();i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> knode=link[root][i];</span><br><span class="line"><span class="keyword">if</span>(knode!=fat)</span><br><span class="line">{</span><br><span class="line">dfs(knode,root,dep+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;s,&amp;k);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">link[a].push_back(b);</span><br><span class="line">link[b].push_back(a);</span><br><span class="line">}</span><br><span class="line">build(s,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">zero(vis);</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;k;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;node[i].size();j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> knode=node[i][j];</span><br><span class="line"><span class="keyword">if</span>(vis[knode])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;d&lt;k;d++)</span><br><span class="line">{</span><br><span class="line">knode=fa[knode];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dfs(knode,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">ans++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题16-长城守卫（Beijing-Guards，LA3177）"><a href="#例题16-长城守卫（Beijing-Guards，LA3177）" class="headerlink" title="例题16 长城守卫（Beijing Guards，LA3177）"></a>例题16 长城守卫（Beijing Guards，<a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1178" title="3177 - Beijing Guards" target="_blank" rel="noopener">LA3177</a>）</h2><p>二分，当n为偶数时，很容易输出答案，唯一麻烦的就是n为基数的情况，详看白书</p><figure class="highlight cpp"><figcaption><span>LA 3177 Beijing Guards</span><a href="/assets/code/la/3177.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erfen</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> b=(a+c)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a==c)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> left,right;</span><br><span class="line">left=right=<span class="number">0</span>;</span><br><span class="line">left=r[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">right=b-r[<span class="number">0</span>]-right;</span><br><span class="line"><span class="keyword">if</span>(right&gt;r[i])</span><br><span class="line">{</span><br><span class="line">right=r[i];</span><br><span class="line">left=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">left=r[i]-right;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">left=r[<span class="number">0</span>]-left;</span><br><span class="line"><span class="keyword">if</span>(left&gt;r[i])</span><br><span class="line">{</span><br><span class="line">left=r[i];</span><br><span class="line">right=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">right=r[i]-left;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout&lt;&lt;left&lt;&lt;' '&lt;&lt;right&lt;&lt;' '&lt;&lt;b&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">int</span> all=r[<span class="number">0</span>]+right+r[n<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(all&gt;b)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> erfen(b+<span class="number">1</span>,c);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> erfen(a,b);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> l,m;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r[i]);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,r[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">l=m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">l=max(l,r[i]+r[(i+<span class="number">1</span>)%n]);</span><br><span class="line">m=max(m,<span class="number">3</span>*r[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,l);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,erfen(l,m));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题求解常见策略-2&quot;&gt;&lt;a href=&quot;#问题求解常见策略-2&quot; class=&quot;headerlink&quot; title=&quot;问题求解常见策略(2)&quot;&gt;&lt;/a&gt;问题求解常见策略(2)&lt;/h1&gt;&lt;h2 id=&quot;例题12-组装电脑（Assemble，LA3971，POJ3497）&quot;&gt;&lt;a href=&quot;#例题12-组装电脑（Assemble，LA3971，POJ3497）&quot; class=&quot;headerlink&quot; title=&quot;例题12 组装电脑（Assemble，LA3971，POJ3497）&quot;&gt;&lt;/a&gt;例题12 组装电脑（Assemble，&lt;a href=&quot;https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1972&quot; title=&quot;3971 - Assemble&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LA3971&lt;/a&gt;，&lt;a href=&quot;http://poj.org/problem?id=3497&quot; title=&quot;POJ3497 - Assemble&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POJ3497&lt;/a&gt;）&lt;/h2&gt;&lt;p&gt;简单二分&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;POJ 3497 - Assemble&lt;/span&gt;&lt;a href=&quot;/assets/code/poj/3497.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prog&lt;/span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; type[&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; name[&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; quality;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}com[&lt;span class=&quot;number&quot;&gt;1010&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare_type&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(prog a,prog b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(a.type,b.type)==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a.quality==b.quality)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a.price&amp;lt;b.price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a.quality&amp;lt;b.quality;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(a.type,b.type)&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; com_start[&lt;span class=&quot;number&quot;&gt;1010&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; com_type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;erfen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s==t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m=(s+t)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;com_type;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; less=&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j=com_start[i];j&amp;lt;com_start[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(com[j].quality&amp;gt;=m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				less=min(less,com[j].price);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sum+=less;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum&amp;lt;=b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; erfen(m,t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; erfen(s,m&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,j,k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d%d&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; max_quality,min_quality;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		max_quality=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		min_quality=&lt;span class=&quot;number&quot;&gt;1000000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%s%s%d%d&quot;&lt;/span&gt;,&amp;amp;com[i].type,&amp;amp;com[i].name,&amp;amp;com[i].price,&amp;amp;com[i].quality);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			max_quality=max(max_quality,com[i].quality);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			min_quality=min(min_quality,com[i].quality);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sort(com,com+n,compare_type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		com_start[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(com[i].type,com[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;].type))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				com_start[j++]=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		com_type=j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		com_start[j]=n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,erfen(min_quality,max_quality));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="算法竞赛入门经典训练指南" scheme="https://acshiryu.github.io/tags/acm-training-guide/"/>
    
      <category term="二分" scheme="https://acshiryu.github.io/tags/dichotomize/"/>
    
      <category term="深度优先搜索" scheme="https://acshiryu.github.io/tags/depth-first-search/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典训练指南》动态规划专题1</title>
    <link href="https://acshiryu.github.io/archives/acm/acm-training-guide-special-topic-dp-1.html"/>
    <id>https://acshiryu.github.io/archives/acm/acm-training-guide-special-topic-dp-1.html</id>
    <published>2018-09-16T03:07:00.000Z</published>
    <updated>2018-09-16T02:56:45.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划专题-1"><a href="#动态规划专题-1" class="headerlink" title="动态规划专题(1)"></a>动态规划专题(1)</h1><h2 id="例题26-约瑟夫环的变形（And-Then-There-Was-One-Japan-2007-LA-3882-POJ-3517）"><a href="#例题26-约瑟夫环的变形（And-Then-There-Was-One-Japan-2007-LA-3882-POJ-3517）" class="headerlink" title="例题26 约瑟夫环的变形（And Then There Was One, Japan 2007, LA 3882, POJ 3517）"></a>例题26 约瑟夫环的变形（And Then There Was One, Japan 2007, <a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1883" title="3882 - And Then There Was One" target="_blank" rel="noopener">LA 3882</a>, <a href="http://poj.org/problem?id=3517" title="And Then There Was One" target="_blank" rel="noopener">POJ 3517</a>）</h2><p>经典问题，递推解决</p><figure class="highlight cpp"><figcaption><span>poj 3517</span><a href="/assets/code/poj/3517.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;k,&amp;m),n||m||k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">ans=(ans+k)%i;</span><br><span class="line">ans=(ans+m-k+<span class="number">1</span>)%n;</span><br><span class="line"><span class="keyword">while</span>(ans&lt;=<span class="number">0</span>)</span><br><span class="line">ans+=n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题27-王子和公主（Prince-and-Princess-Uva-10635）"><a href="#例题27-王子和公主（Prince-and-Princess-Uva-10635）" class="headerlink" title="例题27 王子和公主（Prince and Princess, Uva 10635）"></a>例题27 王子和公主（Prince and Princess, <a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1576" title="10635 - Prince and Princess" target="_blank" rel="noopener">Uva 10635</a>）</h2><p>LCS问题，可转为LIS问题</p><figure class="highlight cpp"><figcaption><span>Uva 10635</span><a href="/assets/code/uva/10635.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">630000</span>],mp[<span class="number">630000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erfen</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(dp[m]&lt;k) l=m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=m;</span><br><span class="line">}</span><br><span class="line">dp[l]=k;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T,cas=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> n,p,q,i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;p,&amp;q);</span><br><span class="line">zero(mp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=p;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">mp[k]=i+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">zero(dp);</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q+<span class="number">1</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">k=mp[k];</span><br><span class="line"><span class="keyword">if</span>(k&gt;dp[j])</span><br><span class="line">{</span><br><span class="line">dp[j+<span class="number">1</span>]=k;</span><br><span class="line">j++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k!=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">erfen(<span class="number">0</span>,j,k);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,cas++,j);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="例题28-Sum游戏（Game-of-Sum-Uva-10891）"><a href="#例题28-Sum游戏（Game-of-Sum-Uva-10891）" class="headerlink" title="例题28 Sum游戏（Game of Sum, Uva 10891）"></a>例题28 Sum游戏（Game of Sum, <a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1832" title="10891 - Game of Sum" target="_blank" rel="noopener">Uva 10891</a>）</h2><p>动态规划，用dp[i][j]表示第i~j个元素组成的子元素先手能拿的最大分，则后手能拿的最大分就是sum[i][j]-dp[i][j]</p><figure class="highlight cpp"><figcaption><span>Uva 10891</span><a href="/assets/code/uva/10891.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line">dp[i][i]=a[i];</span><br><span class="line">f[i][i]=a[i];</span><br><span class="line">g[i][i]=a[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;i+j&lt;=n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> suma=sum[i+j]-sum[i<span class="number">-1</span>];</span><br><span class="line">dp[i][i+j]=suma-min(<span class="number">0</span>,min(f[i+<span class="number">1</span>][i+j],g[i][i+j<span class="number">-1</span>]));</span><br><span class="line">f[i][i+j]=min(dp[i][i+j],f[i+<span class="number">1</span>][i+j]);</span><br><span class="line">g[i][i+j]=min(dp[i][i+j],g[i][i+j<span class="number">-1</span>]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">2</span>*dp[<span class="number">1</span>][n]-sum[n]);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题29-黑客的攻击（Hackers’-Crackdown-Uva-11825）"><a href="#例题29-黑客的攻击（Hackers’-Crackdown-Uva-11825）" class="headerlink" title="例题29 黑客的攻击（Hackers’ Crackdown, Uva 11825）"></a>例题29 黑客的攻击（Hackers’ Crackdown, <a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2925" title="11825 - Hackers" target="_blank" rel="noopener">Uva 11825</a>）</h2><p>状态dp，用二进制表示状态。通过这题学习到原来枚举集合S的子集的一个好方法，详看代码</p><figure class="highlight cpp"><figcaption><span>Uva 11825</span><a href="/assets/code/uva/11825.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">70000</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">70000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,cas=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> maxn=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</span><br><span class="line">p[i]=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line"><span class="keyword">while</span>(j--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">p[i]=p[i]|(<span class="number">1</span>&lt;&lt;k);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;=maxn;s++)</span><br><span class="line">{</span><br><span class="line">c[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(s&amp;(<span class="number">1</span>&lt;&lt;i))</span><br><span class="line">c[s]=c[s]|p[i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">zero(dp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>;s&lt;=maxn;s++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//枚举集合s的子集s0，原来还可以这样！！！</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> s0=s;s0;s0=(s0<span class="number">-1</span>)&amp;s)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(c[s0]==maxn)</span><br><span class="line">{</span><br><span class="line">dp[s]=max(dp[s],dp[s^s0]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,cas++,dp[maxn]);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态规划专题-1&quot;&gt;&lt;a href=&quot;#动态规划专题-1&quot; class=&quot;headerlink&quot; title=&quot;动态规划专题(1)&quot;&gt;&lt;/a&gt;动态规划专题(1)&lt;/h1&gt;&lt;h2 id=&quot;例题26-约瑟夫环的变形（And-Then-There-Was-One-Japan-2007-LA-3882-POJ-3517）&quot;&gt;&lt;a href=&quot;#例题26-约瑟夫环的变形（And-Then-There-Was-One-Japan-2007-LA-3882-POJ-3517）&quot; class=&quot;headerlink&quot; title=&quot;例题26 约瑟夫环的变形（And Then There Was One, Japan 2007, LA 3882, POJ 3517）&quot;&gt;&lt;/a&gt;例题26 约瑟夫环的变形（And Then There Was One, Japan 2007, &lt;a href=&quot;https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1883&quot; title=&quot;3882 - And Then There Was One&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LA 3882&lt;/a&gt;, &lt;a href=&quot;http://poj.org/problem?id=3517&quot; title=&quot;And Then There Was One&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POJ 3517&lt;/a&gt;）&lt;/h2&gt;&lt;p&gt;经典问题，递推解决&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;poj 3517&lt;/span&gt;&lt;a href=&quot;/assets/code/poj/3517.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,m,k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d%d%d&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;k,&amp;amp;m),n||m||k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans=(ans+k)%i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans=(ans+m-k+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)%n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(ans&amp;lt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans+=n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;例题27-王子和公主（Prince-and-Princess-Uva-10635）&quot;&gt;&lt;a href=&quot;#例题27-王子和公主（Prince-and-Princess-Uva-10635）&quot; class=&quot;headerlink&quot; title=&quot;例题27 王子和公主（Prince and Princess, Uva 10635）&quot;&gt;&lt;/a&gt;例题27 王子和公主（Prince and Princess, &lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1576&quot; title=&quot;10635 - Prince and Princess&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Uva 10635&lt;/a&gt;）&lt;/h2&gt;&lt;p&gt;LCS问题，可转为LIS问题&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Uva 10635&lt;/span&gt;&lt;a href=&quot;/assets/code/uva/10635.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; zero(a) memset(a,0,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dp[&lt;span class=&quot;number&quot;&gt;630000&lt;/span&gt;],mp[&lt;span class=&quot;number&quot;&gt;630000&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;erfen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(l&amp;lt;r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m=(l+r)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(dp[m]&amp;lt;k) l=m+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; r=m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp[l]=k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; T,cas=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,p,q,i,j,k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d%d%d&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;p,&amp;amp;q);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		zero(mp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;=p;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			mp[k]=i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		zero(dp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=q+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			k=mp[k];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k&amp;gt;dp[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				dp[j+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				erfen(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,j,k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Case %d: %d\n&quot;&lt;/span&gt;,cas++,j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="算法竞赛入门经典训练指南" scheme="https://acshiryu.github.io/tags/acm-training-guide/"/>
    
      <category term="递归" scheme="https://acshiryu.github.io/tags/recursive/"/>
    
      <category term="状态压缩" scheme="https://acshiryu.github.io/tags/state-compression/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典训练指南》动态规划专题2</title>
    <link href="https://acshiryu.github.io/archives/acm/acm-training-guide-special-topic-dp-2.html"/>
    <id>https://acshiryu.github.io/archives/acm/acm-training-guide-special-topic-dp-2.html</id>
    <published>2018-09-16T03:06:00.000Z</published>
    <updated>2018-09-16T02:56:34.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划专题-2"><a href="#动态规划专题-2" class="headerlink" title="动态规划专题(2)"></a>动态规划专题(2)</h1><h2 id="例题30-放置街灯（Placing-Lampposts-Uva-10859）"><a href="#例题30-放置街灯（Placing-Lampposts-Uva-10859）" class="headerlink" title="例题30 放置街灯（Placing Lampposts, Uva 10859）"></a>例题30 放置街灯（Placing Lampposts, <a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1800" title="10859 - Placing Lampposts" target="_blank" rel="noopener">Uva 10859</a>）</h2><p>动态规划，比较复杂的一题。通过这题，学到一个技巧</p><p>一般来说，如果题目要求两个量v1,v2，若要求满足v1最大或最小的时候，v2同事也要最大或最小。则可以把v1和v2合成一个量x=M*v1+v2.其中M要是比v2的理论值与v1理论值之差还要大的数,最后就求出v1=x/M，v2=x%M。因为要v1和v2同增或同减，则对于此题，M可取2000，v1为点灯数，v2为只被一盏灯照到的边的数。</p><p>解决此题，首先将无根树转换成有根树，用dp[i][j]来表示对于节点i父节点点灯状态为j时的最小x值，注意当i为根的时候的特殊情况，详细看代码</p><figure class="highlight cpp"><figcaption><span>Uva 10859</span><a href="/assets/code/uva/10859.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;d[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bs=<span class="number">2000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(vis[i][j]==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> dp[i][j];</span><br><span class="line">vis[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> ans1,ans2;</span><br><span class="line">ans1=bs;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;d[i].size();k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(d[i][k]!=f)</span><br><span class="line">{</span><br><span class="line">ans1+=DFS(d[i][k],<span class="number">1</span>,i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(f&gt;=<span class="number">0</span>&amp;&amp;(!j))</span><br><span class="line">ans1++;</span><br><span class="line">dp[i][j]=ans1;</span><br><span class="line">ans2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(j||f&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;d[i].size();k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(d[i][k]!=f)</span><br><span class="line">{</span><br><span class="line">ans2+=DFS(d[i][k],<span class="number">0</span>,i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(f&gt;=<span class="number">0</span>)</span><br><span class="line">ans2++;</span><br><span class="line">dp[i][j]=min(ans1,ans2);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> dp[i][j];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">d[i].clear();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">d[a].push_back(b);</span><br><span class="line">d[b].push_back(a);</span><br><span class="line">}</span><br><span class="line">zero(vis);</span><br><span class="line">zero(dp);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!vis[i][<span class="number">0</span>])</span><br><span class="line">ans+=DFS(i,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,ans/bs,m-ans%bs,ans%bs);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="例题31-捡垃圾的机器人（Robotruck-SWERC-2007-LA-3983）"><a href="#例题31-捡垃圾的机器人（Robotruck-SWERC-2007-LA-3983）" class="headerlink" title="例题31 捡垃圾的机器人（Robotruck, SWERC 2007, LA 3983）"></a>例题31 捡垃圾的机器人（Robotruck, SWERC 2007, <a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1984" title="3983 - Robotruck" target="_blank" rel="noopener">LA 3983</a>）</h2><p>动态规划，设计的转移方程比较简单，用dp[i][j]表示捡到了第i个垃圾后重量为j时走了多少步，特别的dp[i][0]表示剪完1~i的垃圾并丢到垃圾箱走的步子数，则有两种绝策</p><p>(1)捡完第i-1个垃圾后继续捡第i个垃圾，则有方程：dp[i][j]=dp[i-1][j-lj[i].w]+juli(i-1,i)，特别的dp[i][0]=min(dp[i][j]+juli(i,0))</p><p>(2)捡完第i-1个垃圾并扔到垃圾桶里再捡第i个垃圾，则有方程：dp[i][lj[i].w]=dp[i-1][0]+juli(i,0)，特别的dp[i][0]=dp[i][lj[i].w]+juli(i,0)</p><p>时间和空间复杂度都是O(NC)，但利用滚动数组可以把空间复杂度降到O(C)</p><figure class="highlight cpp"><figcaption><span>LA 3983</span><a href="/assets/code/la/3983.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">int</span> x;<span class="keyword">int</span> y;<span class="keyword">int</span> w;</span><br><span class="line">}lj,old_lj,lj0;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">juli</span><span class="params">(prog i,prog j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(i.x-j.x)+<span class="built_in">abs</span>(i.y-j.y);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> C,n,i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;C);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0x7f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">old_lj.x=<span class="number">0</span>;</span><br><span class="line">old_lj.y=<span class="number">0</span>;</span><br><span class="line">old_lj.w=<span class="number">0</span>;</span><br><span class="line">lj0=old_lj;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;lj.x,&amp;lj.y,&amp;lj.w);</span><br><span class="line"><span class="keyword">int</span> jl0=juli(lj,lj0);</span><br><span class="line"><span class="keyword">int</span> tmp=dp[<span class="number">0</span>]+jl0;</span><br><span class="line">dp[<span class="number">0</span>]=tmp+jl0;;</span><br><span class="line"><span class="keyword">int</span> jl=juli(lj,old_lj);</span><br><span class="line"><span class="keyword">for</span>(j=C;j&gt;=lj.w+old_lj.w;j--)</span><br><span class="line">{</span><br><span class="line">dp[j]=dp[j-lj.w]+jl;</span><br><span class="line">dp[<span class="number">0</span>]=min(dp[<span class="number">0</span>],dp[j]+jl0);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">dp[j]=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line">j--;</span><br><span class="line">}</span><br><span class="line">dp[lj.w]=min(dp[lj.w],tmp);</span><br><span class="line">old_lj=lj;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(T)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>这题关于时间上的复杂度仍然可以继续优化，利用单调队列，可将复杂度降为$O(N)$，详细可参考《训练指南》第73页。</p><h2 id="例题32-分享巧克力（Sharing-Chocolate-World-Finals-2010-LA-4794）"><a href="#例题32-分享巧克力（Sharing-Chocolate-World-Finals-2010-LA-4794）" class="headerlink" title="例题32 分享巧克力（Sharing Chocolate, World Finals 2010, LA 4794）"></a>例题32 分享巧克力（Sharing Chocolate, World Finals 2010, <a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=2795" title="4794 - Sharing Chocolate" target="_blank" rel="noopener">LA 4794</a>）</h2><p>状态DP，转移方程很好想到，但需要继续优化，可参考《训练指南》</p><figure class="highlight cpp"><figcaption><span>LA 4794</span><a href="/assets/code/la/4794.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">40000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">40000</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>][<span class="number">40000</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> all;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(dp[r][s]!=<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> dp[r][s];</span><br><span class="line"><span class="keyword">int</span> &amp;rs =dp[r][s];</span><br><span class="line"><span class="keyword">if</span>(cnt[s]==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> rs=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> c=sum[s]/r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sx=(s<span class="number">-1</span>)&amp;s;sx;sx=(sx<span class="number">-1</span>)&amp;s)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> sy=s-sx;</span><br><span class="line"><span class="keyword">if</span>(sum[sx]%r==<span class="number">0</span>&amp;&amp;DFS(min(r,sum[sx]/r),sx)==<span class="number">1</span>&amp;&amp;DFS(min(r,sum[sy]/r),sy)==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> rs=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sum[sx]%c==<span class="number">0</span>&amp;&amp;DFS(min(c,sum[sx]/c),sx)==<span class="number">1</span>&amp;&amp;DFS(min(c,sum[sy]/c),sy)==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> rs=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> rs=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,cas=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line">all=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> x;<span class="keyword">int</span> y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ans[i]);</span><br><span class="line">zero(sum);</span><br><span class="line">fone(dp);</span><br><span class="line">zero(cnt);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=all;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">{</span><br><span class="line">sum[i]+=ans[j];</span><br><span class="line">cnt[i]++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sum[all]!=x*y||sum[all]%x!=<span class="number">0</span>||DFS(min(x,y),all)==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: No\n"</span>,cas++);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: Yes\n"</span>,cas++);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态规划专题-2&quot;&gt;&lt;a href=&quot;#动态规划专题-2&quot; class=&quot;headerlink&quot; title=&quot;动态规划专题(2)&quot;&gt;&lt;/a&gt;动态规划专题(2)&lt;/h1&gt;&lt;h2 id=&quot;例题30-放置街灯（Placing-Lampposts-Uva-10859）&quot;&gt;&lt;a href=&quot;#例题30-放置街灯（Placing-Lampposts-Uva-10859）&quot; class=&quot;headerlink&quot; title=&quot;例题30 放置街灯（Placing Lampposts, Uva 10859）&quot;&gt;&lt;/a&gt;例题30 放置街灯（Placing Lampposts, &lt;a href=&quot;http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1800&quot; title=&quot;10859 - Placing Lampposts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Uva 10859&lt;/a&gt;）&lt;/h2&gt;&lt;p&gt;动态规划，比较复杂的一题。通过这题，学到一个技巧&lt;/p&gt;
&lt;p&gt;一般来说，如果题目要求两个量v1,v2，若要求满足v1最大或最小的时候，v2同事也要最大或最小。则可以把v1和v2合成一个量x=M*v1+v2.其中M要是比v2的理论值与v1理论值之差还要大的数,最后就求出v1=x/M，v2=x%M。因为要v1和v2同增或同减，则对于此题，M可取2000，v1为点灯数，v2为只被一盏灯照到的边的数。&lt;/p&gt;
&lt;p&gt;解决此题，首先将无根树转换成有根树，用dp[i][j]来表示对于节点i父节点点灯状态为j时的最小x值，注意当i为根的时候的特殊情况，详细看代码&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Uva 10859&lt;/span&gt;&lt;a href=&quot;/assets/code/uva/10859.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; zero(a) memset(a,0,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; one(a) memset(a,1,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; fone(a) memset(a,-1,sizeof(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; pow2(a) ((a)*(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; pow3(a) ((pow2(a))*(a))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;d[&lt;span class=&quot;number&quot;&gt;1005&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; vis[&lt;span class=&quot;number&quot;&gt;1005&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dp[&lt;span class=&quot;number&quot;&gt;1005&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; bs=&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; f)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(vis[i][j]==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	vis[i][j]=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans1,ans2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans1=bs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(k=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;k&amp;lt;d[i].size();k++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d[i][k]!=f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans1+=DFS(d[i][k],&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(f&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;(!j))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ans1++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dp[i][j]=ans1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ans2=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j||f&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(k=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;k&amp;lt;d[i].size();k++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d[i][k]!=f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans2+=DFS(d[i][k],&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(f&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ans2++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dp[i][j]=min(ans1,ans2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d%d&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;1005&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			d[i].clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;m;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d%d&quot;&lt;/span&gt;,&amp;amp;a,&amp;amp;b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			d[a].push_back(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			d[b].push_back(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		zero(vis);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		zero(dp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!vis[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ans+=DFS(i,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d %d %d\n&quot;&lt;/span&gt;,ans/bs,m-ans%bs,ans%bs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="算法竞赛入门经典训练指南" scheme="https://acshiryu.github.io/tags/acm-training-guide/"/>
    
      <category term="状态压缩" scheme="https://acshiryu.github.io/tags/state-compression/"/>
    
  </entry>
  
  <entry>
    <title>《算法竞赛入门经典训练指南》思维的体操</title>
    <link href="https://acshiryu.github.io/archives/acm/acm-training-guide-thinking-gymnastics.html"/>
    <id>https://acshiryu.github.io/archives/acm/acm-training-guide-thinking-gymnastics.html</id>
    <published>2018-09-16T03:05:00.000Z</published>
    <updated>2018-09-16T02:56:23.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思维的体操"><a href="#思维的体操" class="headerlink" title="思维的体操"></a>思维的体操</h1><h2 id="例题1-勇者斗恶龙（The-Dragon-of-Loowater，Uva-11292）"><a href="#例题1-勇者斗恶龙（The-Dragon-of-Loowater，Uva-11292）" class="headerlink" title="例题1 勇者斗恶龙（The Dragon of Loowater，Uva 11292）"></a>例题1 勇者斗恶龙（The Dragon of Loowater，Uva 11292）</h2><p>贪心水题</p><figure class="highlight cpp"><figcaption><span>Uva 11292</span><a href="/assets/code/uva/11292.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">20005</span>],x[<span class="number">20005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m),n||m)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x[i]);</span><br><span class="line"></span><br><span class="line">sort(d,d+n);</span><br><span class="line">sort(x,x+m);</span><br><span class="line"></span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(j&lt;m&amp;&amp;x[j]&lt;d[i])</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(j==m)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(j!=m)</span><br><span class="line">sum+=x[j++];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i!=n)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Loowater is doomed!\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="例题2-突击战（Commando-War，Uva-11729）"><a href="#例题2-突击战（Commando-War，Uva-11729）" class="headerlink" title="例题2 突击战（Commando War，Uva 11729）"></a>例题2 突击战（Commando War，Uva 11729）</h2><p>比较简单的贪心题</p><figure class="highlight cpp"><figcaption><span>Uva 11729</span><a href="/assets/code/uva/11729.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">int</span> b,j;</span><br><span class="line">}a[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a.j==b.j)</span><br><span class="line"><span class="keyword">return</span> a.b&gt;b.b;</span><br><span class="line"><span class="keyword">return</span> a.j&gt;b.j;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,cnt=<span class="number">1</span>;;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].b,&amp;a[i].j);</span><br><span class="line">}</span><br><span class="line">sort(a,a+n,cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">ans=max(ans,tmp+a[i].b+a[i].j);</span><br><span class="line">tmp+=a[i].b;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,cnt++,ans);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题3-分金币（Spreading-the-Wealth，Uva-11300）"><a href="#例题3-分金币（Spreading-the-Wealth，Uva-11300）" class="headerlink" title="例题3 分金币（Spreading the Wealth，Uva 11300）"></a>例题3 分金币（Spreading the Wealth，Uva 11300）</h2><p>这题有点意思，初看起来不知道怎么下手，但可以发现一个人得到的金币来自于其两边的人，或者他只能将金币转手给旁边的人，于是我们就可以假设${A}<em>{i}$从${A}</em>{i-1}$处得到${x}<em>{i-1}$的金币，并转手给${A}</em>{i+1}$有${x}<em>{i}$的金币（注意是圆桌），于是就有${A}</em>{i}+{x}<em>{i-1}-{x}</em>{i}=average$，最后可以得出${x}<em>{i}$关于${x}</em>{1}$的表达式，依据题意，求的是$\sum_{1}^{n}|{x}_{i}|$的和，就可以借助数轴解决问题</p><figure class="highlight cpp"><figcaption><span>Uva 11300</span><a href="/assets/code/uva/11300.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> money[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;money[i]);</span><br><span class="line">sum+=money[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> ave=sum/n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">money[i]=money[i]-ave;</span><br><span class="line"><span class="comment">//printf("%d\n",money[i]);</span></span><br><span class="line">}</span><br><span class="line">tmp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">tmp[i]=tmp[i<span class="number">-1</span>]-money[i];</span><br><span class="line">sort(tmp,tmp+n);</span><br><span class="line"><span class="keyword">int</span> mid=n/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">ans+=<span class="built_in">abs</span>(-tmp[i]+tmp[mid]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题4-墓地雕塑（Graveyard，LA3708，POJ3154）"><a href="#例题4-墓地雕塑（Graveyard，LA3708，POJ3154）" class="headerlink" title="例题4 墓地雕塑（Graveyard，LA3708，POJ3154）"></a>例题4 墓地雕塑（Graveyard，LA3708，POJ3154）</h2><p>比较简单的一题，算出每个点的初始位置和移动后的位置，每个点向最近的地方移动即可。lrj书上介绍的方法更巧妙</p><figure class="highlight cpp"><figcaption><span>poj 3154</span><a href="/assets/code/poj/3154.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> old_place[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">double</span> new_place[<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> mk=m+n;</span><br><span class="line"><span class="keyword">double</span> old=<span class="number">10000.0</span>/n;</span><br><span class="line"><span class="keyword">double</span> now=<span class="number">10000.0</span>/mk;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">old_place[i]=old*i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=mk;i++)</span><br><span class="line">new_place[i]=now*i;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fabs</span>(old_place[i]-new_place[j])&gt;<span class="built_in">fabs</span>(old_place[i]-new_place[j+<span class="number">1</span>]))</span><br><span class="line">j=j+<span class="number">1</span>;</span><br><span class="line">sum+=<span class="built_in">fabs</span>(old_place[i]-new_place[j]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,sum);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题5-蚂蚁（Piotr’s-Ants，Uva10881）"><a href="#例题5-蚂蚁（Piotr’s-Ants，Uva10881）" class="headerlink" title="例题5 蚂蚁（Piotr’s Ants，Uva10881）"></a>例题5 蚂蚁（Piotr’s Ants，Uva10881）</h2><p>如果能注意到蚂蚁“碰撞”实际上是没有改变蚂蚁最终的位置，只是改变了蚂蚁的序号的话，那这题就很容易了</p><figure class="highlight cpp"><figcaption><span>Uva 10881</span><a href="/assets/code/uva/10881.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">int</span> x,i;</span><br><span class="line"><span class="keyword">char</span> f;</span><br><span class="line"><span class="keyword">int</span> rank;</span><br><span class="line">}x[<span class="number">10010</span>],y[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(prog a,prog b)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpi</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a.i&lt;b.i;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> TTT;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;TTT);</span><br><span class="line"><span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(TTT--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> l,t,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;t,&amp;n);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;a,b);</span><br><span class="line">x[i].x=a;</span><br><span class="line">x[i].i=i;</span><br><span class="line"><span class="keyword">if</span>(b[<span class="number">0</span>] == <span class="string">'L'</span>)</span><br><span class="line">{</span><br><span class="line">x[i].f=b[<span class="number">0</span>];</span><br><span class="line">y[i].x=a-t;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">x[i].f=b[<span class="number">0</span>];</span><br><span class="line">y[i].x=a+t;</span><br><span class="line">}</span><br><span class="line">y[i].f=x[i].f;</span><br><span class="line">y[i].i=x[i].i;</span><br><span class="line">}</span><br><span class="line">sort(x,x+n);</span><br><span class="line">sort(y,y+n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line">x[i].rank=i;</span><br><span class="line">y[i].rank=i;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sort(x,x+n,cmpi);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,cas++);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> k=x[i].rank;</span><br><span class="line"><span class="keyword">if</span>(y[k].x&lt;<span class="number">0</span>||y[k].x&gt;l)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Fell off\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((k&gt;<span class="number">0</span>&amp;&amp;y[k].x==y[k<span class="number">-1</span>].x)||(k&lt;n<span class="number">-1</span>&amp;&amp;y[k].x==y[k+<span class="number">1</span>].x))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d Turning\n"</span>,y[k].x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %c\n"</span>,y[k].x,y[k].f);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="例题6-立方体成像（Image-Is-Everything，LA2995）"><a href="#例题6-立方体成像（Image-Is-Everything，LA2995）" class="headerlink" title="例题6 立方体成像（Image Is Everything，LA2995）"></a>例题6 立方体成像（Image Is Everything，<a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=996" title="2995 - Image Is Everything" target="_blank" rel="noopener">LA2995</a>）</h2><p>较麻烦的一道模拟题，看了lrj的白书后才过的，书上讲的较详细，此处略过</p><figure class="highlight cpp"><figcaption><span>LA 2995</span><a href="/assets/code/la/2995.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> tx[<span class="number">15</span>][<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">char</span> kan[<span class="number">10</span>][<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xyz</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> len,<span class="keyword">int</span>&amp; x,<span class="keyword">int</span>&amp; y , <span class="keyword">int</span>&amp; z)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">switch</span>(k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">x=len;</span><br><span class="line">y=j;</span><br><span class="line">z=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">x=n<span class="number">-1</span>-j;</span><br><span class="line">y=len;</span><br><span class="line">z=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">x=n<span class="number">-1</span>-len;</span><br><span class="line">y=n<span class="number">-1</span>-j;</span><br><span class="line">z=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">x=j;</span><br><span class="line">y=n<span class="number">-1</span>-len;</span><br><span class="line">z=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">x=n<span class="number">-1</span>-i;</span><br><span class="line">y=j;</span><br><span class="line">z=len;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">x=i;</span><br><span class="line">y=j;</span><br><span class="line">z=n<span class="number">-1</span>-len;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j,k,p,q;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">tx[i][j][k]=<span class="string">'#'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,kan[j][i]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(k=0;k&lt;6;k++)</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">for(i=0;i&lt;n;i++)</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">for(j=0;j&lt;n;j++)</span></span><br><span class="line"><span class="comment">cout&lt;&lt;kan[k][i][j];</span></span><br><span class="line"><span class="comment">cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span>(kan[k][i][j]==<span class="string">'.'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(p=<span class="number">0</span>;p&lt;n;p++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">xyz(k,i,j,p,x,y,z);</span><br><span class="line">tx[x][y][z]=<span class="string">'.'</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;' '&lt;&lt;y&lt;&lt;' '&lt;&lt;z&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span>(kan[k][i][j]!=<span class="string">'.'</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(p=<span class="number">0</span>;p&lt;n;p++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">xyz(k,i,j,p,x,y,z);</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;y&lt;&lt;z&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;tuxing&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(tx[x][y][z]==<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(tx[x][y][z]==<span class="string">'#'</span>)</span><br><span class="line">{</span><br><span class="line">tx[x][y][z]=kan[k][i][j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(tx[x][y][z]==kan[k][i][j])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">tx[x][y][z]=<span class="string">'.'</span>;</span><br><span class="line">ok=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ok==<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line"><span class="keyword">if</span>(tx[i][j][k]!=<span class="string">'.'</span>)</span><br><span class="line">sum++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Maximum weight: %d gram(s)\n"</span>,sum);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;思维的体操&quot;&gt;&lt;a href=&quot;#思维的体操&quot; class=&quot;headerlink&quot; title=&quot;思维的体操&quot;&gt;&lt;/a&gt;思维的体操&lt;/h1&gt;&lt;h2 id=&quot;例题1-勇者斗恶龙（The-Dragon-of-Loowater，Uva-11292）&quot;&gt;&lt;a href=&quot;#例题1-勇者斗恶龙（The-Dragon-of-Loowater，Uva-11292）&quot; class=&quot;headerlink&quot; title=&quot;例题1 勇者斗恶龙（The Dragon of Loowater，Uva 11292）&quot;&gt;&lt;/a&gt;例题1 勇者斗恶龙（The Dragon of Loowater，Uva 11292）&lt;/h2&gt;&lt;p&gt;贪心水题&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Uva 11292&lt;/span&gt;&lt;a href=&quot;/assets/code/uva/11292.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d[&lt;span class=&quot;number&quot;&gt;20005&lt;/span&gt;],x[&lt;span class=&quot;number&quot;&gt;20005&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d%d&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;m),n||m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i,j,k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;d[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;m;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;,&amp;amp;x[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sort(d,d+n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sort(x,x+m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(j&amp;lt;m&amp;amp;&amp;amp;x[j]&amp;lt;d[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j==m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j!=m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				sum+=x[j++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i!=n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Loowater is doomed!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;,sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="算法竞赛入门经典训练指南" scheme="https://acshiryu.github.io/tags/acm-training-guide/"/>
    
      <category term="贪心" scheme="https://acshiryu.github.io/tags/greedy/"/>
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
  </entry>
  
  <entry>
    <title>20111120周赛解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/ccnuoj-weekly-problem-and-solution-20111120.html"/>
    <id>https://acshiryu.github.io/archives/acm/ccnuoj-weekly-problem-and-solution-20111120.html</id>
    <published>2018-09-16T03:04:00.000Z</published>
    <updated>2018-09-16T02:56:12.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem-A-不服气的数字"><a href="#Problem-A-不服气的数字" class="headerlink" title="Problem A: 不服气的数字"></a>Problem A: 不服气的数字</h2><p>假设可以去的2数有k个</p><p>如果要求取得没有0,则答案为:$k^1+k^2+k^3+……+k^n$</p><p>如果要求取得数含有0,则答案为:$k+{(k-1)}k+(k-1)k^2+(k-1)k^3+…(k-1)k^{(n-1)}=k^n$（也可以看成k进制，直接得出答案）</p><figure class="highlight cpp"><figcaption><span>不服气的数字参考代码</span><a href="/assets/code/20111120/A.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> hash[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="built_in">memset</span>(hash,<span class="number">0</span>,<span class="keyword">sizeof</span>(hash));</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">            hash[a]=<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(hash[i]==<span class="number">0</span>)</span><br><span class="line">                m++;</span><br><span class="line">        ans[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            ans[i]=ans[i<span class="number">-1</span>]*m%<span class="number">1000000007</span>;</span><br><span class="line">        <span class="keyword">if</span>(hash[<span class="number">0</span>])</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                sum=(sum+ans[i])%<span class="number">1000000007</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&nbsp;</p><a id="more"></a><h2 id="Problem-B-运动会"><a href="#Problem-B-运动会" class="headerlink" title="Problem B: 运动会"></a>Problem B: 运动会</h2><p>很明显,老师选人有三种情况</p><ul><li><p>若$(M-K)&gt;N/2$则只选男的，可组队数为$N/2$</p></li><li><p>若$(N-K)&gt;2M$则只选女的，可组队数为$M$</p></li><li><p>其他情况则会男女搭配，那可组队数为$(M+N-K)/3$</p></li></ul><p>那么很明显，最多可参加的组数是$min(N/2,M,(M+N-K)/3)$</p><figure class="highlight cpp"><figcaption><span>运动会参考代码</span><a href="/assets/code/20111120/B.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> m , n , k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;min((m+n-k)/<span class="number">3</span>,min(m/<span class="number">2</span>,n))&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="Problem-C-井底有一条蛇"><a href="#Problem-C-井底有一条蛇" class="headerlink" title="Problem C: 井底有一条蛇"></a>Problem C: 井底有一条蛇</h2><p>明显 如果距离井口的距离小于A，则只需要1天，则明显答案是$\left\lfloor\frac{H-A}{A-B}\right\rfloor + 1$</p><figure class="highlight cpp"><figcaption><span>井底有一条蛇参考代码</span><a href="/assets/code/20111120/C.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a,b,c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="keyword">if</span>(c&lt;a)</span><br><span class="line">            c=a;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;((c-a<span class="number">-1</span>)/(a-b)+<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="Problem-D-话说实验室加了块白板"><a href="#Problem-D-话说实验室加了块白板" class="headerlink" title="Problem D: 话说实验室加了块白板"></a>Problem D: 话说实验室加了块白板</h2><p>求最大 将所有的5或者6变成6</p><p>求最小 讲所有的5或者6变成5</p><p>然后atoi函数把字符串转化为数字</p><figure class="highlight cpp"><figcaption><span>话说实验室加了块白板参考代码</span><a href="/assets/code/20111120/D.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">65</span>],s2[<span class="number">65</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span>(*a)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>((*a)==<span class="string">'5'</span>||(*a)==<span class="string">'6'</span>)</span><br><span class="line">            (*a)=k+<span class="string">'0'</span>;</span><br><span class="line">        a++;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">        change(s1,<span class="number">5</span>);</span><br><span class="line">        change(s2,<span class="number">5</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;atoi(s1)+atoi(s2)&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        change(s1,<span class="number">6</span>);</span><br><span class="line">        change(s2,<span class="number">6</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;atoi(s1)+atoi(s2)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="Problem-E-选卡片"><a href="#Problem-E-选卡片" class="headerlink" title="Problem E: 选卡片"></a>Problem E: 选卡片</h2><p>假设小数部分是k  有n位  则答案显然是$\frac{10^n}{gcd(k,10^n)}$</p><p>注意不能用浮点数 有精度损失，用字符串代替小数的输入</p><figure class="highlight cpp"><figcaption><span>选卡片参考代码</span><a href="/assets/code/20111120/E.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;s[i]!=<span class="string">'.'</span>&amp;&amp;s[i];i++);</span><br><span class="line">        <span class="keyword">for</span>(i++;s[i];i++)</span><br><span class="line">        {</span><br><span class="line">            m=m*<span class="number">10</span>+s[i]-<span class="string">'0'</span>;</span><br><span class="line">            t*=<span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t/gcd(t,m)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>比赛题目: <a href="/assets/code/20111120/Problem.doc">Problem.doc</a></p><p>比赛题解: <a href="/assets/code/20111120/Solution.doc">Solution.doc</a></p><h2 id="讲题课件"><a href="#讲题课件" class="headerlink" title="讲题课件"></a>讲题课件</h2><p>简单数学题：<a href="/assets/code/20111120/Mathematics.ppt">Mathematics.ppt</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-A-不服气的数字&quot;&gt;&lt;a href=&quot;#Problem-A-不服气的数字&quot; class=&quot;headerlink&quot; title=&quot;Problem A: 不服气的数字&quot;&gt;&lt;/a&gt;Problem A: 不服气的数字&lt;/h2&gt;&lt;p&gt;假设可以去的2数有k个&lt;/p&gt;
&lt;p&gt;如果要求取得没有0,则答案为:$k^1+k^2+k^3+……+k^n$&lt;/p&gt;
&lt;p&gt;如果要求取得数含有0,则答案为:$k+{(k-1)}k+(k-1)k^2+(k-1)k^3+…(k-1)k^{(n-1)}=k^n$（也可以看成k进制，直接得出答案）&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;不服气的数字参考代码&lt;/span&gt;&lt;a href=&quot;/assets/code/20111120/A.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; hash[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; ans[&lt;span class=&quot;number&quot;&gt;1000005&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;T;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(hash,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(hash));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(m--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cin&lt;/span&gt;&amp;gt;&amp;gt;a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            hash[a]=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        m=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(hash[i]==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                m++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ans[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ans[i]=ans[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]*m%&lt;span class=&quot;number&quot;&gt;1000000007&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(hash[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; sum=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum=(sum+ans[i])%&lt;span class=&quot;number&quot;&gt;1000000007&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;sum&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;ans[n]&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="最大公约数" scheme="https://acshiryu.github.io/tags/greatest-common-divisor/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #118 (Div. 2) :A. Comparing Strings</title>
    <link href="https://acshiryu.github.io/archives/acm/codeforces-round-118-div-2-a-comparing-strings.html"/>
    <id>https://acshiryu.github.io/archives/acm/codeforces-round-118-div-2-a-comparing-strings.html</id>
    <published>2018-09-16T03:03:00.000Z</published>
    <updated>2018-09-16T02:55:59.254Z</updated>
    
    <content type="html"><![CDATA[<p>晕死，纯水题，竟然在最后给挂了！<br><figure class="highlight cpp"><figcaption><span>A. Comparing Strings</span><a href="/assets/code/codeforces/118-div2-a.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">char</span> s2[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> wrong=<span class="number">0</span>;</span><br><span class="line">found=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(s1)!=<span class="built_in">strlen</span>(s2))</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">zero(hash);</span><br><span class="line"><span class="keyword">char</span> c1,c2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;s1[i];i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(s1[i]!=s2[i])</span><br><span class="line">{</span><br><span class="line">wrong++;</span><br><span class="line"><span class="keyword">if</span>(wrong==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">c1=s1[i];</span><br><span class="line">c2=s2[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(wrong==<span class="number">2</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(s1[i]!=c2||s2[i]!=c1)</span><br><span class="line">wrong++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(wrong&gt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(wrong==<span class="number">2</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;晕死，纯水题，竟然在最后给挂了！&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;A. Comparing Strings&lt;/span&gt;&lt;a href=&quot;/assets/code/codeforces/118-div2-
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="codeforces" scheme="https://acshiryu.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #118 (Div. 2) :B. Growing Mushrooms</title>
    <link href="https://acshiryu.github.io/archives/acm/codeforces-round-118-div-2-b-growing-mushrooms.html"/>
    <id>https://acshiryu.github.io/archives/acm/codeforces-round-118-div-2-b-growing-mushrooms.html</id>
    <published>2018-09-16T03:02:00.000Z</published>
    <updated>2018-09-16T02:55:42.748Z</updated>
    
    <content type="html"><![CDATA[<p>水题，就是对每组的$max(\frac{at_1(100-k)}{100.0}+b{t_2},\frac{bt_1(100-k)}{100.0}+a{t_2})$排序，如果相等，再让序号排<br><figure class="highlight cpp"><figcaption><span>B. Growing Mushrooms</span><a href="/assets/code/codeforces/118-div2-b.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">double</span> high;</span><br><span class="line">}ans[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a.high==b.high)</span><br><span class="line"><span class="keyword">return</span> a.k&lt;b.k;</span><br><span class="line"><span class="keyword">return</span> a.high&gt;b.high;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,t1,t2,k;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;t1,&amp;t2,&amp;k))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">ans[i].k=i;</span><br><span class="line">ans[i].high=max(a*t1*(<span class="number">100</span>-k)/<span class="number">100.0</span>+b*t2*<span class="number">1.0</span>,b*t1*(<span class="number">100</span>-k)/<span class="number">100.0</span>+a*t2*<span class="number">1.0</span>);</span><br><span class="line">}</span><br><span class="line">sort(ans,ans+n,cmp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %.2lf\n"</span>,ans[i].k+<span class="number">1</span>,ans[i].high);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;水题，就是对每组的$max(\frac{at_1(100-k)}{100.0}+b{t_2},\frac{bt_1(100-k)}{100.0}+a{t_2})$排序，如果相等，再让序号排&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcapti
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="codeforces" scheme="https://acshiryu.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #118 (Div. 2) :C. Plant</title>
    <link href="https://acshiryu.github.io/archives/acm/codeforces-round-118-div-2-c-plant.html"/>
    <id>https://acshiryu.github.io/archives/acm/codeforces-round-118-div-2-c-plant.html</id>
    <published>2018-09-16T03:01:00.000Z</published>
    <updated>2018-09-24T05:07:33.601Z</updated>
    
    <content type="html"><![CDATA[<p>就是求第$n$个图形的上三角的个数<br>设$f_n$为第$n$个图形的上三角的个数  $g_n$为第$n$个图形的下三角的个数<br>那么$f_n = 3f_{n-1}+g_{n-1}$ 并且$g_n = 3g_{n-1}+f_{n-1}$<br>则可以构造矩阵 用矩阵快速幂解决<br><figure class="highlight cpp"><figcaption><span>C. Plant</span><a href="/assets/code/codeforces/118-div2-c.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span> {</span></span><br><span class="line">    __int64 a[<span class="number">2</span>][<span class="number">2</span>] ;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">        a[<span class="number">0</span>][<span class="number">0</span>]=a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">3</span>;</span><br><span class="line">        a[<span class="number">1</span>][<span class="number">0</span>]=a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">prog <span class="title">matrixmul</span> <span class="params">( prog a ,prog b )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i , j , k ;</span><br><span class="line">    prog c ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; <span class="number">2</span> ; j ++ )</span><br><span class="line">        {</span><br><span class="line">            c.a[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> ( k =<span class="number">0</span> ; k &lt; <span class="number">2</span>; k ++ )</span><br><span class="line">                c.a[i][j]+=__int64(a.a[i][k]*b.a[k][j]) ;</span><br><span class="line">            c.a[i][j] %= <span class="number">1000000007</span>  ;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> c ;</span><br><span class="line">}</span><br><span class="line"><span class="function">prog <span class="title">mul</span> <span class="params">(prog s , __int64 k )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    prog ans ;</span><br><span class="line">    ans.init();</span><br><span class="line">    <span class="keyword">while</span> ( k &gt;= <span class="number">1</span> )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> ( k &amp; <span class="number">1</span> )</span><br><span class="line">            ans = matrixmul ( ans , s ) ;</span><br><span class="line">        k = k &gt;&gt; <span class="number">1</span> ;</span><br><span class="line">        s = matrixmul ( s , s ) ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    __int64 n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n  )</span><br><span class="line">    {</span><br><span class="line"> <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line"> {</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> <span class="keyword">continue</span>;</span><br><span class="line"> }</span><br><span class="line">        prog s ;</span><br><span class="line">        s.init ( ) ;</span><br><span class="line">        s = mul ( s , n - <span class="number">1</span> ) ;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;s.a[<span class="number">0</span>][<span class="number">0</span>]%<span class="number">1000000007</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;就是求第$n$个图形的上三角的个数&lt;br&gt;设$f_n$为第$n$个图形的上三角的个数  $g_n$为第$n$个图形的下三角的个数&lt;br&gt;那么$f_n = 3f_{n-1}+g_{n-1}$ 并且$g_n = 3g_{n-1}+f_{n-1}$&lt;br&gt;则可以构造矩阵 用矩阵快
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="codeforces" scheme="https://acshiryu.github.io/tags/codeforces/"/>
    
      <category term="矩阵" scheme="https://acshiryu.github.io/tags/matrix/"/>
    
      <category term="快速幂" scheme="https://acshiryu.github.io/tags/fast-power/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #118 (Div. 2) :D. Mushroom Scientists</title>
    <link href="https://acshiryu.github.io/archives/acm/codeforces-round-118-div-2-d-mushroom-scientists.html"/>
    <id>https://acshiryu.github.io/archives/acm/codeforces-round-118-div-2-d-mushroom-scientists.html</id>
    <published>2018-09-16T03:00:00.000Z</published>
    <updated>2018-09-16T02:55:18.874Z</updated>
    
    <content type="html"><![CDATA[<p>题目就是给出$a,b,c$和$S$，求出一组非负数$x,y,z$ 使得$x+y+z=S$,并且要求${x^a}{y^b}{z^c}$最大<br>有公式，可以直接套用<br>但要注意$a=b=c=0$的情况，要特殊处理，否则当$x=\frac{Sa}{a+b+c}$ $y=\frac{Sb}{a+b+c}$ $z=\frac{Sc}{a+b+c}$时${x^a}{y^b}{z^c}$最大<br>可以证明，此处证明略，有兴趣的可以参考<a href="http://www.science-mathematics.com/Mathematics/201110/16848.htm" title="Multi-Variable Optimization (Calc III) help!" target="_blank" rel="noopener">这篇文章</a><br><figure class="highlight cpp"><figcaption><span>D. Mushroom Scientists</span><a href="/assets/code/codeforces/118-div2-d.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,a,b,c;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> s=a+b+c;</span><br><span class="line"><span class="keyword">double</span> ans=(<span class="number">1.0</span>*n/s);</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>&amp;&amp;b==<span class="number">0</span>&amp;&amp;c==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1lf %.1lf %.1lf\n"</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.16f %.16f %.16f\n"</span>,ans*a,ans*b,ans*c);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目就是给出$a,b,c$和$S$，求出一组非负数$x,y,z$ 使得$x+y+z=S$,并且要求${x^a}{y^b}{z^c}$最大&lt;br&gt;有公式，可以直接套用&lt;br&gt;但要注意$a=b=c=0$的情况，要特殊处理，否则当$x=\frac{Sa}{a+b+c}$ $y=\
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="codeforces" scheme="https://acshiryu.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>AC自动机简单模版</title>
    <link href="https://acshiryu.github.io/archives/template/cpp-template-ac-automation.html"/>
    <id>https://acshiryu.github.io/archives/template/cpp-template-ac-automation.html</id>
    <published>2018-09-16T02:59:00.000Z</published>
    <updated>2018-09-16T02:55:01.646Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，Aho–Corasick算法是由Alfred V. Aho和Margaret J.Corasick 发明的字符串搜索算法，用于在输入的一串字符串中匹配有限组“字典”中的子串。它与普通字符串匹配的不同点在于同时与所有字典串进行匹配。算法均摊情况下具有近似于线性的[[时间复杂度]]，约为字符串的长度加所有匹配的数量。然而由于需要找到所有匹配数，如果每个子串互相匹配（如字典为a，aa，aaa，aaaa，输入的字符串为aaaa），算法的时间复杂度会近似于匹配的二次函数。</p><p>该算法主要依靠构造一个有限状态机（类似于在一个trie树中添加失配指针）来实现。这些额外的失配指针允许在查找字符串失败时进行回退（例如设Trie树的单词cat匹配失败，但是在Trie树中存在另一个单词cart，失配指针就会指向前缀ca），转向某前缀的其他分支，免于重复匹配前缀，提高算法效率。</p><p>当一个字典串集合是已知的(例如一个计算机病毒库), 就可以以离线方式先将自动机求出并储存以供日后使用，在这种情况下，算法的时间复杂度为输入字符串长度和匹配数量之和。</p><p>UNIX系统中的一个命令fgrep就是以AC自动机算法作为基础实现的。</p><a id="more"></a><figure class="highlight cpp"><figcaption><span>AC自动机简单模版</span><a href="/assets/code/template/ac-automation.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AC自动机模版；</span></span><br><span class="line"><span class="comment">Insert()建树；</span></span><br><span class="line"><span class="comment">build_ac_automation()构造失败指针；</span></span><br><span class="line"><span class="comment">query()查询；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kind = <span class="number">26</span>; <span class="comment">//字符种类 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span> <span class="comment">//Tire树节点结构 </span></span><br><span class="line">    node *fail; <span class="comment">//失败指针 </span></span><br><span class="line">    node *next[kind]; <span class="comment">//Tire每个节点的子节点 </span></span><br><span class="line">    <span class="keyword">int</span> count; <span class="comment">//已当前节点为单词结尾的个数 </span></span><br><span class="line">    node(){ <span class="comment">//构造函数 </span></span><br><span class="line">        fail = <span class="literal">NULL</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(next, <span class="number">0</span>, <span class="keyword">sizeof</span>(next));</span><br><span class="line">    }</span><br><span class="line">}*que[<span class="number">1000000</span>]; <span class="comment">//队列 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key_word[<span class="number">100</span>]; <span class="comment">//目的串 </span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10000000</span>]; <span class="comment">//模式串 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> front, rear; <span class="comment">//队列的头尾 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *str, node *root)</span></span>{ <span class="comment">//把单词加入Tire中 </span></span><br><span class="line">    node *p = root;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(str[i]){ <span class="comment">//将每个字母加入到Tire树中 </span></span><br><span class="line">        index = str[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next[index] == <span class="literal">NULL</span>){</span><br><span class="line">            p-&gt;next[index] = <span class="keyword">new</span> node();</span><br><span class="line">        }</span><br><span class="line">        p = p-&gt;next[index];</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    p-&gt;count++; <span class="comment">//在单词的最后一个节点count++，代表一个单词</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设这个节点上的字母为C，沿着他父亲的失败指针走，直到走到一个节点，他的儿子中也有字母为C的节点。然后把当前节点的失败指针指向那个字母也为C的儿子。如果一直走到了root都没找到，那就把失败指针指向root。*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_ac_automation</span><span class="params">(node *root)</span></span>{ <span class="comment">//构造失败指针 </span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    root-&gt;fail = <span class="literal">NULL</span>;</span><br><span class="line">    que[rear++] = root;</span><br><span class="line">    <span class="keyword">while</span>(front &lt; rear){<span class="comment">//队列 </span></span><br><span class="line">        node *temp = que[front];</span><br><span class="line">        node *p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i){</span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;next[i] != <span class="literal">NULL</span>){</span><br><span class="line">                <span class="keyword">if</span>(temp == root){</span><br><span class="line">                    temp-&gt;next[i]-&gt;fail = root;</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    p = temp-&gt;fail;</span><br><span class="line">                    <span class="keyword">while</span>(p != <span class="literal">NULL</span>){</span><br><span class="line">                        <span class="keyword">if</span>(p-&gt;next[i] != <span class="literal">NULL</span>){</span><br><span class="line">                            temp-&gt;next[i]-&gt;fail = p-&gt;next[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        }</span><br><span class="line">                        p = p-&gt;fail;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">                        temp-&gt;next[i]-&gt;fail = root;</span><br><span class="line">                }</span><br><span class="line">                que[rear++] = temp-&gt;next[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        front++;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据具体题目，重写查询方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(node *root, <span class="keyword">char</span> *str)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    node *p = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(str[i]){</span><br><span class="line">        index = str[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next[index] == <span class="literal">NULL</span> &amp;&amp; p != root){</span><br><span class="line">            p = p-&gt;fail;</span><br><span class="line">        }</span><br><span class="line">        p = p-&gt;next[index];</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>) p = root;</span><br><span class="line">        node *temp = p;</span><br><span class="line">        <span class="keyword">while</span>(temp != root &amp;&amp; temp-&gt;count != <span class="number">-1</span>){</span><br><span class="line">            cnt += temp-&gt;count;</span><br><span class="line">            temp-&gt;count = <span class="number">-1</span>;</span><br><span class="line">            temp = temp-&gt;fail;</span><br><span class="line">        }</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用举例，hdu2222</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        node *root=<span class="keyword">new</span> node;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,key_word);</span><br><span class="line">            insert(key_word,root);</span><br><span class="line">        }</span><br><span class="line">        build_ac_automation(root); </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(root,str));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在计算机科学中，Aho–Corasick算法是由Alfred V. Aho和Margaret J.Corasick 发明的字符串搜索算法，用于在输入的一串字符串中匹配有限组“字典”中的子串。它与普通字符串匹配的不同点在于同时与所有字典串进行匹配。算法均摊情况下具有近似于线性的[[时间复杂度]]，约为字符串的长度加所有匹配的数量。然而由于需要找到所有匹配数，如果每个子串互相匹配（如字典为a，aa，aaa，aaaa，输入的字符串为aaaa），算法的时间复杂度会近似于匹配的二次函数。&lt;/p&gt;
&lt;p&gt;该算法主要依靠构造一个有限状态机（类似于在一个trie树中添加失配指针）来实现。这些额外的失配指针允许在查找字符串失败时进行回退（例如设Trie树的单词cat匹配失败，但是在Trie树中存在另一个单词cart，失配指针就会指向前缀ca），转向某前缀的其他分支，免于重复匹配前缀，提高算法效率。&lt;/p&gt;
&lt;p&gt;当一个字典串集合是已知的(例如一个计算机病毒库), 就可以以离线方式先将自动机求出并储存以供日后使用，在这种情况下，算法的时间复杂度为输入字符串长度和匹配数量之和。&lt;/p&gt;
&lt;p&gt;UNIX系统中的一个命令fgrep就是以AC自动机算法作为基础实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="模板编程" scheme="https://acshiryu.github.io/categories/template/"/>
    
    
      <category term="AC自动机" scheme="https://acshiryu.github.io/tags/ac-automation/"/>
    
      <category term="kmp" scheme="https://acshiryu.github.io/tags/kmp/"/>
    
      <category term="字典树" scheme="https://acshiryu.github.io/tags/dictionary-tree/"/>
    
      <category term="字符串匹配" scheme="https://acshiryu.github.io/tags/string-match/"/>
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>欧拉函数模板</title>
    <link href="https://acshiryu.github.io/archives/template/cpp-template-euler-function.html"/>
    <id>https://acshiryu.github.io/archives/template/cpp-template-euler-function.html</id>
    <published>2018-09-16T02:58:00.000Z</published>
    <updated>2018-09-16T02:54:46.516Z</updated>
    
    <content type="html"><![CDATA[<p>对正整数n，欧拉函数是少于或等于n的数中与n互质的数的数目。例如euler(8)=4，因为1,3,5,7均和8互质。</p><p>Euler函数表达通式：euler(x)=$x\sum_{1}^{n}\frac{1}{1-\frac{1}{p_i}}$,其中$p_1,p_2 …… p_n$为$x$的所有素因数，$x$是不为$0$的整数。euler(1)=1（唯一和1互质的数就是1本身）。 </p><p>欧拉公式的延伸：一个数的所有质因子之和是$\frac{n}{2}$euler(n)。</p><p>那么如何变成实现欧拉函数呢？下面通过两种不同的方法来实现。第一种方法是直接根据定义来实现，同时第一种方法也是第二种筛法的基础，当好好理解。</p><figure class="highlight cpp"><figcaption><span>欧拉函数模板</span><a href="/assets/code/template/euler-function.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接求解欧拉函数  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">euler_func</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{ <span class="comment">//返回euler(n)   </span></span><br><span class="line">     <span class="keyword">int</span> res=n,a=n;  </span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i &lt;= a; ++i)</span><br><span class="line">     {  </span><br><span class="line">         <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">         {  </span><br><span class="line">             res=res/i*(i<span class="number">-1</span>);<span class="comment">//先进行除法是为了防止中间数据的溢出   </span></span><br><span class="line">             <span class="keyword">while</span>(a%i==<span class="number">0</span>) a/=i;  </span><br><span class="line">         }  </span><br><span class="line">     }  </span><br><span class="line">     <span class="keyword">if</span>(a &gt; <span class="number">1</span>) res=res/a*(a<span class="number">-1</span>);  </span><br><span class="line">     <span class="keyword">return</span> res;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="comment">//筛选法打欧拉函数表   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1000001  </span></span><br><span class="line"><span class="keyword">int</span> euler[Max];  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{   </span><br><span class="line">     euler[<span class="number">1</span>]=<span class="number">1</span>;  </span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i &lt; Max; ++i)  </span><br><span class="line">       euler[i]=i;  </span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i &lt; Max; ++i)  </span><br><span class="line">        <span class="keyword">if</span>(euler[i]==i)  </span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j &lt; Max;j+=i)  </span><br><span class="line">              euler[j]=euler[j]/i*(i<span class="number">-1</span>);<span class="comment">//先进行除法是为了防止中间数据的溢出   </span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>原文转载自：<a href="http://blog.csdn.net/once_hnu/article/details/6302868" target="_blank" rel="noopener">http://blog.csdn.net/once_hnu/article/details/6302868</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对正整数n，欧拉函数是少于或等于n的数中与n互质的数的数目。例如euler(8)=4，因为1,3,5,7均和8互质。&lt;/p&gt;
&lt;p&gt;Euler函数表达通式：euler(x)=$x\sum_{1}^{n}\frac{1}{1-\frac{1}{p_i}}$,其中$p_1,p_
      
    
    </summary>
    
      <category term="模板编程" scheme="https://acshiryu.github.io/categories/template/"/>
    
    
      <category term="欧拉函数" scheme="https://acshiryu.github.io/tags/euler-function/"/>
    
      <category term="素数" scheme="https://acshiryu.github.io/tags/prime/"/>
    
      <category term="筛选" scheme="https://acshiryu.github.io/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>矩阵快速幂模板</title>
    <link href="https://acshiryu.github.io/archives/template/cpp-template-matrix-fast-power.html"/>
    <id>https://acshiryu.github.io/archives/template/cpp-template-matrix-fast-power.html</id>
    <published>2018-09-16T02:57:00.000Z</published>
    <updated>2018-09-16T02:54:35.349Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><figcaption><span>矩阵快速幂模板</span><a href="/assets/code/template/matrix-fast-power.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod[<span class="number">3</span>]={<span class="number">1000000007</span>,<span class="number">222222224</span>,<span class="number">183120</span>};</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> __int64 uint64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mat_n=<span class="number">2</span>;<span class="comment">//矩阵的维度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_mul</span><span class="params">(uint64 a[][mat_n],uint64 b[][mat_n],uint64 mod)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//a=a*b</span></span><br><span class="line">uint64 c[mat_n][mat_n];</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;mat_n;j++)</span><br><span class="line">{</span><br><span class="line">c[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;mat_n;k++)</span><br><span class="line">{</span><br><span class="line">c[i][j]=(c[i][j]+(a[i][k]*b[k][j])%mod)%mod;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;mat_n;j++)</span><br><span class="line">a[i][j]=c[i][j];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_power</span><span class="params">(uint64 s[][mat_n],uint64 k,uint64 mod)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">// return s[n][n]^k%mod</span></span><br><span class="line">uint64 ans[mat_n][mat_n];</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line">ans[i][i]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">matrix_mul(ans,s,mod);</span><br><span class="line">}</span><br><span class="line">k=k/<span class="number">2</span>;</span><br><span class="line">matrix_mul(s,s,mod);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;mat_n;j++)</span><br><span class="line">s[i][j]=ans[i][j];</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;矩阵快速幂模板&lt;/span&gt;&lt;a href=&quot;/assets/code/template/matrix-fast-power.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption
      
    
    </summary>
    
      <category term="模板编程" scheme="https://acshiryu.github.io/categories/template/"/>
    
    
      <category term="矩阵" scheme="https://acshiryu.github.io/tags/matrix/"/>
    
      <category term="快速幂" scheme="https://acshiryu.github.io/tags/fast-power/"/>
    
  </entry>
  
  <entry>
    <title>burnside定理，polya计数 模版</title>
    <link href="https://acshiryu.github.io/archives/template/cpp-template-polya.html"/>
    <id>https://acshiryu.github.io/archives/template/cpp-template-polya.html</id>
    <published>2018-09-16T02:56:00.000Z</published>
    <updated>2018-09-16T02:54:23.476Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><figcaption><span>polya计数模版</span><a href="/assets/code/template/polya.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>{ </span><br><span class="line"><span class="keyword">return</span> b ? gcd(b,a%b) : a; </span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">polya</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//c代表颜色种类数，s表示项链长度</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">ll p[<span class="number">64</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// power of c</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span> (k=<span class="number">0</span> ; k&lt;s ; k++) </span><br><span class="line">p[k+<span class="number">1</span>] = p[k] * c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reflection part</span></span><br><span class="line">ll count = s&amp;<span class="number">1</span> ? s * p[s/<span class="number">2</span> + <span class="number">1</span>] :</span><br><span class="line">(s/<span class="number">2</span>) * (p[s/<span class="number">2</span>] + p[s/<span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rotation part</span></span><br><span class="line"><span class="keyword">for</span> (k=<span class="number">1</span> ; k&lt;=s ; k++) </span><br><span class="line">count += p[gcd(k, s)];</span><br><span class="line">count /= <span class="number">2</span> * s;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用举例，poj2409</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> c, s;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c, &amp;s),c||s) </span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;polya(c,s)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;polya计数模版&lt;/span&gt;&lt;a href=&quot;/assets/code/template/polya.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="模板编程" scheme="https://acshiryu.github.io/categories/template/"/>
    
    
      <category term="burnside" scheme="https://acshiryu.github.io/tags/burnside/"/>
    
      <category term="polya" scheme="https://acshiryu.github.io/tags/polya/"/>
    
  </entry>
  
  <entry>
    <title>素性测试 miller rabin+pollard rho</title>
    <link href="https://acshiryu.github.io/archives/template/cpp-template-prime-test-by-miller-pollard.html"/>
    <id>https://acshiryu.github.io/archives/template/cpp-template-prime-test-by-miller-pollard.html</id>
    <published>2018-09-16T02:55:00.000Z</published>
    <updated>2018-09-16T02:37:49.730Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址 <a href="http://www.cnblogs.com/ybrbupt/archive/2011/09/02/2164020.html" target="_blank" rel="noopener">http://www.cnblogs.com/ybrbupt/archive/2011/09/02/2164020.html</a></p><figure class="highlight cpp"><figcaption><span>素性测试模板</span><a href="/assets/code/template/prime-test-by-miller-pollard.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*素数判断用miller法 分解用pollard法 关键有几点*\</span></span><br><span class="line"><span class="comment">1:用2分法作64位乘法必须用unsigned __Int64 否则位移的时候会带符号(符号位移不掉)</span></span><br><span class="line"><span class="comment">2:pollard会陷入死循环 所以要加卡时 如果超过多少次还没出来就return 1,换个初始数继续</span></span><br><span class="line"><span class="comment">3:所有&lt;&lt;号,&gt;&gt;号必须全部加括号 像b1=(x&lt;&lt;32)&gt;&gt;32这种等号后面没加括号的是错误的 应该是b1=((x&lt;&lt;32)&gt;&gt;32);</span></span><br><span class="line"><span class="comment">4:发现pollard算法中用x*x-1产生随机数，如果那个-1改成其他数 效率会不一样 根据frkstyc大牛的代码 </span></span><br><span class="line"><span class="comment">\*x*x+16381要将近快一倍（可是这位仁兄用的是10007。。。我自己换别的数字试了一下，确实没有更快的）*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gcc 10007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX ((INT)1&lt;&lt;63)-1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> INT;</span><br><span class="line">INT p[<span class="number">10</span>]={<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>};</span><br><span class="line"><span class="function"><span class="keyword">inline</span> INT <span class="title">gcd</span><span class="params">(INT a,INT b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    INT m=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!b)    <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">while</span>(m)</span><br><span class="line">    {</span><br><span class="line">        m=a%b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=m;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算a*b%n</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> INT <span class="title">multi_mod</span><span class="params">(INT a,INT b,INT mod)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    INT sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)    sum=(sum+a)%mod;</span><br><span class="line">        a=(a+a)%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算a^b%n;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> INT <span class="title">quickmod</span><span class="params">(INT a,INT b,INT mod)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    INT sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)    sum=multi_mod(sum,a,mod);</span><br><span class="line">        a=multi_mod(a,a,mod);</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">miller_rabin</span><span class="params">(INT n)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//素性测试 判断是否为素数</span></span><br><span class="line">    <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    INT u,m,buf;</span><br><span class="line">    <span class="comment">//将n分解为m*2^k</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>||!(n&amp;<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    m=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(m&amp;<span class="number">1</span>))</span><br><span class="line">        k++,m&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(p[i]&gt;=n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        u=quickmod(p[i],m,n);</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">        {</span><br><span class="line">            buf=multi_mod(u,u,n);</span><br><span class="line">            <span class="keyword">if</span>(buf==<span class="number">1</span>&amp;&amp;u!=<span class="number">1</span>&amp;&amp;u!=n<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            u=buf;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//如果p[i]^(n-1)%n!=1那么n为合数</span></span><br><span class="line">        <span class="keyword">if</span>(u<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找n的一个因子，该因子并不一定是最小的，所以下面要二分查找最小的那个因子</span></span><br><span class="line"><span class="function">INT <span class="title">pollard</span><span class="params">(INT n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    INT i=<span class="number">1</span>;</span><br><span class="line">    INT x=rand()%(n<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">    INT y=x;</span><br><span class="line">    INT k=<span class="number">2</span>;</span><br><span class="line">    INT d;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    {</span><br><span class="line">        i++;</span><br><span class="line">        d=gcd(n+y-x,n);</span><br><span class="line">        <span class="keyword">if</span>(d&gt;<span class="number">1</span>&amp;&amp;d&lt;n)</span><br><span class="line">            <span class="keyword">return</span> d;</span><br><span class="line">        <span class="keyword">if</span>(i==k)</span><br><span class="line">            y=x,k*=<span class="number">2</span>;</span><br><span class="line">        x=(multi_mod(x,x,n)+n-gcc)%n;</span><br><span class="line">    }<span class="keyword">while</span>(y!=x);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">INT MIN;</span><br><span class="line"></span><br><span class="line"><span class="function">INT <span class="title">pollard_min</span><span class="params">(INT n)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//返回最小质因子</span></span><br><span class="line">    INT p,a,b=MAX;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)    <span class="keyword">return</span> MAX;</span><br><span class="line">    <span class="keyword">if</span>(miller_rabin(n))    <span class="keyword">return</span> n;</span><br><span class="line">    p=pollard(n);</span><br><span class="line">    a=pollard_min(p);<span class="comment">//二分查找</span></span><br><span class="line">    INT y=n/p;</span><br><span class="line">    b=pollard_min(y);</span><br><span class="line">    <span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址 &lt;a href=&quot;http://www.cnblogs.com/ybrbupt/archive/2011/09/02/2164020.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/ybrbu
      
    
    </summary>
    
      <category term="模板编程" scheme="https://acshiryu.github.io/categories/template/"/>
    
    
      <category term="素数" scheme="https://acshiryu.github.io/tags/prime/"/>
    
      <category term="素性测试" scheme="https://acshiryu.github.io/tags/prime-test/"/>
    
  </entry>
  
  <entry>
    <title>潸然泪下 盘点仙剑十大让人动情女子</title>
    <link href="https://acshiryu.github.io/archives/games/game-pal-top10-emotional-woman.html"/>
    <id>https://acshiryu.github.io/archives/games/game-pal-top10-emotional-woman.html</id>
    <published>2018-09-16T02:54:00.000Z</published>
    <updated>2018-09-16T02:36:16.343Z</updated>
    
    <content type="html"><![CDATA[<p>作者：水蔓菁 指导：豆油王 来源：<a href="http://www.doyo.cn/article/101714" title="令人潸然泪下！仙剑中这十位女子你动情过么" target="_blank" rel="noopener">逗游网</a> 说明：图片较多，加载可能有点慢</p><p>世间万物皆有情，有英雄就会有红颜。《仙剑奇侠传》系列一直在诉说着“情”，情之一字，未经者，实在令人费解;勘破者，实在为之动容。</p><h3 id="NO-10-琴姬"><a href="#NO-10-琴姬" class="headerlink" title="NO.10 琴姬"></a>NO.10 琴姬</h3><blockquote><p>草色没春光，<br>花影曳沉城。<br>弦上情未极，<br>泠泠动悲声。</p></blockquote><p>提到琴姬，我首先想到的是那首无数玩家难以忘怀的《仙剑问情》。这首歌是《仙剑》系列首次采用的填词配乐，由萧人凤演唱。<br><img src="/assets/image/pal/pal-1001-qinji.jpg" alt="琴姬"></p><p>琴姬本是陈州首富秦家的儿媳，因为出身江湖，所以不受公公婆婆待见，后来琴姬负气离家出走，寻仙问道，在此期间，丈夫秦逸病逝。在琴姬返回陈州后，得知丈夫早已病逝，从此发誓再也不求仙问道了。她更名为“琴姬”，一直在码头弹琴。</p><p>在云天河一行人帮助她祭拜丈夫后，她以一曲《仙剑问情》答谢，曲中“如有你相伴，不羡鸳鸯不羡仙”一句唱出了琴姬心中夙愿，只是为时已晚，心心相念的丈夫早已与自己阴阳两隔。</p><p>在这一支线剧情中，另一位痴情女子便是秦逸的小妾——姜氏。她和秦逸青梅竹马，在琴姬离家出走，秦逸病重之时嫁入秦家冲喜，即便如此，还是未能挽留表哥的性命。琴姬祭拜丈夫后，在千佛塔丈夫灵位前殉情。</p><p><img src="/assets/image/pal/pal-1002-qinji.jpg" alt="琴姬"></p><p>两个女子，都是如此深爱着丈夫，结局却如此悲惨，一个从此孤零漂泊，一个香消玉殒。</p><p>或许，正是因为这种悲剧的结局，才换来无数玩家的泪，使人们铭记。<br><a id="more"></a></p><h3 id="NO-9-韩菱纱"><a href="#NO-9-韩菱纱" class="headerlink" title="NO.9 韩菱纱"></a>NO.9 韩菱纱</h3><blockquote><p>执手看歌敲金钗，<br>笑语落珠明眸睐。<br>忽然蝴蝶春风满，<br>焉教冷镜瘦朱颜。</p></blockquote><p>初识韩菱纱是在云天河父亲的墓中，韩菱纱出身盗墓世家，因为家族世代盗墓，所以韩菱纱的族人世代都活不过三十岁。为了寻找摆脱命运的方法，韩菱纱四处奔走。她结识了云天河，并带云天河下山闯荡世界，又结识了县令家大小姐柳梦璃和琼华派慕容紫英。<br><img src="/assets/image/pal/pal-0901-hanlingsha.jpg" alt="韩菱纱"></p><p>在弄清韩氏一族短命的原因后，她觉得只要能将韩家后代子孙从这种悲惨命运中解救出来，自己怎样也都无所谓了，正是她这种潇洒无谓的性格，搏得了两位男主角的爱慕。</p><p>最后，她为了云天河能够胜利，冒着折寿的危险闯入封神陵，帮云天河得到后羿射日弓。她自知生命即将走到尽头，因为有了云天河的爱，她早已无所谓生死，她说：“再真挚的感情，再深沉的牵挂，还是会有分开的一天，好像你爹和你娘，到头来又怎么抵得过生死离别?”</p><p><img src="/assets/image/pal/pal-0902-hanlingsha.jpg" alt="韩菱纱"></p><p>她还说要生尽欢、死无憾，所以面对短寿的命运时，她才那样潇洒。</p><p>因为韩菱纱的潇洒，所以我将她列入第九位。</p><h3 id="NO-8-小蛮"><a href="#NO-8-小蛮" class="headerlink" title="NO.8 小蛮"></a>NO.8 小蛮</h3><blockquote><p>山花娇艳水色青，<br>野蛮仙子鬼灵精。<br>少女满怀情蛊梦，<br>轻唱牛郎织女星。</p></blockquote><p>小蛮是李忆如的女儿，从小被阿奴抚养，她是《仙剑》系列第五代作品的女主之一。她古灵精怪，天真活泼，在寻找“情蛊”解药的同时结识姜云凡、唐雨柔和夜叉族王子龙幽。</p><p><img src="/assets/image/pal/pal-0801-xiaomanlongyou.jpg" alt="小蛮和龙幽"></p><p>在一路的相伴中，她发现了自己女娲后人的身世，也意识到了自己未来的命运。</p><p>最后，为了封印神魔之井，她和龙幽两界相隔。虽然不能和爱人长相厮守，但是小蛮作为女娲后人的结局应该算是比较好的了。她的身上也有大爱，只是体现的没有林青儿、赵灵儿那样惨烈，她曾说：“我来魔界之前，本来是想用神农鼎去做另一件事的。但是现在又觉得……和你们比起来。那些……唉，只要能问出修复大地水脉的方法就好了。”</p><p><img src="/assets/image/pal/pal-0802-xiaoman.jpg" alt="小蛮"></p><p>龙葵的等待等来了哥哥，夕瑶的等待等来了再见一面，虽然神魔之井暂被封印，但我们依然相信小蛮和龙幽终会有再次相见的那一天。</p><h3 id="NO-7-王蓬絮"><a href="#NO-7-王蓬絮" class="headerlink" title="NO.7 王蓬絮"></a>NO.7 王蓬絮</h3><blockquote><p>遥看曙色四溢处，一腔痴心辜负，唯盼光阴驻，情长梦短无归路。<br>易散浮云难再聚，星落纷纷如雨，寂寞飘零絮，魂断一夜随风去。</p></blockquote><p>在《仙三外传》中有一个角色是粉红色的小桃子造型，从造型上，玩家就可以看出来絮儿和花楹隶属同类，她们都是五毒兽。</p><p><img src="/assets/image/pal/pal-0701-wangpengxu.jpg" alt="王蓬絮"></p><p>大抵是因为王蓬絮是女主角之一，所以研发组也赋予了她一段情。</p><p>最初，絮儿爱慕南宫煌，苦于自己非人类的自卑，她不敢表达爱意。在游戏的后期，她的柔弱、可爱、善良征服了南宫煌的孪生哥哥星璇，“我也不知道，自从那天你第一次吃我做的食物，你的信任，你的称赞，让我心中有了一种异样的感觉。在杀戮、复仇、友情之外，我又多拥有了一份温软的柔情，这是你给我的……”，但是星璇全身剧毒，身体的残缺使他只能默默地守护王蓬絮。“絮儿……本来还想……把天底下……所有的美食……一一……让她尝遍……可惜……”</p><p><img src="/assets/image/pal/pal-0702-wangpengxu.jpg" alt="王蓬絮"></p><p>王蓬絮除了圆满结局之外，最后的结局都很惨，一个是絮儿化为原型被南宫煌所救带到室韦族，另一个是星璇牺牲，絮儿空守坟墓。</p><h3 id="NO-6-紫萱"><a href="#NO-6-紫萱" class="headerlink" title="NO.6 紫萱"></a>NO.6 紫萱</h3><blockquote><p>灵珠有泪自千行，等闲芳草斜阳，离人过客暗凄凉，偷羡鸳鸯。<br>伤心脉脉难诉，风剪寸寸柔肠，神仙人鬼两茫茫，情短恨长。</p></blockquote><p>女娲一族女子的结局注定是要为拯救天下苍生而牺牲的，所以女娲后人的上榜率是很高的。</p><p><img src="/assets/image/pal/pal-0601-zixuan.jpg" alt="紫萱"></p><p>紫萱和徐长卿的三世爱恋是《仙三》中令人很难忘的，她痴情，第一世为了爱人甘愿做妾，因为她的不老不死，二世林业平不得不带着她四处流离，最后林业平老死。在第三世的时候，她知道徐长卿即将成仙，为了和爱人永生永世在一起，她蓄谋已久，想要摆脱不堪的命运。她封印女儿，放出狼妖赤炎，但是结局早已注定，一切都只是徒劳。</p><p>在众多结局中，有四个都是紫萱为天下苍生牺牲自己封印了锁妖塔，而在紫萱结局中，虽然紫萱为重楼所救成了凡人，可是长卿却成了仙，人仙还是疏途。</p><p><img src="/assets/image/pal/pal-0602-zixuan.jpg" alt="紫萱"></p><p>紫萱同样是未入轮回的那个，但她身上所具有的反抗精神是值得尊敬的，虽然最终反抗失败，但是我命由我不由天的倔强实在令人难忘。</p><h3 id="NO-5-苏媚"><a href="#NO-5-苏媚" class="headerlink" title="NO.5 苏媚"></a>NO.5 苏媚</h3><blockquote><p>多舛红颜芳踪缈，<br>挥别郎君断情恼。<br>人妖殊途难成双，<br>愿汝永结秦晋好。</p></blockquote><p>《仙二》是继《仙剑奇侠传》之后的第二部《仙剑》系列作品，发生在一代之后。虽然这一代的受关注程度并不怎么高，但是苏媚这一角色将主题“宽恕”体现得很好。</p><p><img src="/assets/image/pal/pal-0501-sumei.jpg" alt="苏媚"></p><p>苏媚的父母是《仙一》隐龙窟中出现的蛇妖男与狐妖女的女儿，因为父母被李逍遥和林月如所杀，所以她一直对李忆如充满着仇恨。但是因为友情，最后她放弃了复仇，宽恕了李忆如父母所犯下的错，最后为了救小虎、七七和忆如，苏媚在禁咒空间牺牲了自己。在最后，她对忆如说：“今生无缘，但求来世!愿你能好好对待小虎。虽然你的父母对不起我，但我们永远是好朋友。”</p><p>有人评价，在她的身上有着赵灵儿为保护他人牺牲自己的精神，有着林月如为情无怨无悔付出的执着，又有着阿奴为所爱之人默默奉献的影子……</p><p><img src="/assets/image/pal/pal-0502-sumei.jpg" alt="苏媚"></p><p>人妖殊途难成双，苏媚并没有死，她化为原型站在崖上目送王小虎、七七和李忆如离开。“爱一个人到极致，便是能够为了爱他而放弃他。这一点苏媚做到了。面对王小虎和沈欺霜的结合，她离开了，她不会像月如那样和情敌做‘好姐妹’，而是孤独而骄傲地一笑而过。她也没有像月如那样为了爱人而死去，而是还要继续活下去，活到上千年，让王小虎即便尸骨已腐朽成灰，却仍然能存在自己永远不死的爱意里。”</p><h3 id="NO-4-夕瑶"><a href="#NO-4-夕瑶" class="headerlink" title="NO.4 夕瑶"></a>NO.4 夕瑶</h3><blockquote><p>爱如潮，情无尽，万叶千声，空吟斯人韵。<br>别后不知君远近，春意秋情，盼断隔世信。<br>一生情，千古困，碧落黄泉，顾影无人问。<br>地老天荒离人恨，寸断琼枝，化作相思烬。</p></blockquote><p>夕瑶，是龙阳前世飞蓬在天界唯一的知己。飞蓬被贬下凡，她一直在神树旁等待着，守候着。为了寻找飞蓬，她私藏神树圣果，创造了雪见。</p><p><img src="/assets/image/pal/pal-0401-xiyao.jpg" alt="夕瑶"></p><p>她并非《仙三》中的女主角，我却还将她排在“最感人女子”之列，因为或许她是唯一能和龙葵同病相怜的人。</p><p>她和龙葵一样，等待了千年，孤独了千年。千年的等待，等来的是景天和她人的携手相依。虽然雪见为她所造，和她一模一样，但是毕竟还是两个不同的人。但是，此生只要能再见到心爱之人一面，即便是心碎又何妨，至少又再见到了他，知道他现在还好好的。</p><p>最后，夕瑶不惜一切送景天一行回到人间，还将飞蓬送给她的风灵珠还给了景天。她对雪见说：“这是真的，你的命比任何性命都来得更不容易，有我的全部梦想在里面。你有家人，有朋友，有喜欢你的人在身边，所有我想要的你都有了，还有什么不满足呢?”</p><p><img src="/assets/image/pal/pal-0402-xiyao.jpg" alt="夕瑶"></p><p>是啊，雪见一直是备受关注的那个人，身上有大小姐的脾气，有时又是那样的不懂事，她永远也不会体会到龙葵与夕瑶的孤独和无奈，这也是我一直不怎么喜欢雪见的原因。</p><h3 id="NO-3-龙葵"><a href="#NO-3-龙葵" class="headerlink" title="NO.3 龙葵"></a>NO.3 龙葵</h3><blockquote><p>大梦初醒已千年，凌乱罗衫，料峭风寒。<br>放眼难觅旧衣冠，疑真疑幻，如梦如烟。<br>看朱成碧心迷乱，莫问生前，但惜因缘。<br>魂无归处为情牵，贪恋人间，不羡神仙。</p></blockquote><p>龙葵的死并非是为了天下苍生，我依然将她放在第三位完全是因为她对哥哥的爱。她是千年前的古姜国公主，千年不灭，唯情而已。</p><p><img src="/assets/image/pal/pal-0301-longkui.jpg" alt="龙葵"></p><p>她等待了千年，孤独了千年，当初遇哥哥转世后的景天时，她是那么地怕失去他，怕他孤独，所以她对景天说：“我会一直陪着你。”在《仙三》出现的所有人物里，连花楹都有追慕者，我觉得龙葵应该是最令人心疼的女子，可是却没有人能理解她。</p><p>龙葵也是整个《仙剑》系列中最特别的一个角色，她一体双灵，红葵泼辣张扬，蓝葵羞怯文静。</p><p>《仙三》的主题是“轮回”，而龙葵恰是未入轮回的角色，所以她注定要牺牲。</p><p><img src="/assets/image/pal/pal-0302-longkui.jpg" alt="龙葵"></p><p>最后，龙葵只能孤独地离开，为了哥哥幸福，她离开地那样决绝，她说：“我宁愿为哥哥死了，让他始终惦念我，也不要他陪着我，心里却想着另外的人!”她一直认为哥哥前世的死是因为自己的错，她一直都耿耿于怀。在最后，龙葵二次殉炉前，她说：“哥哥……一直都是你照顾我、保护我……我也一直希望能帮到你——前世你要用“室女之血”炼剑，我想帮你，但是没有勇气，后来就算跳进炉中也不能挽回什么了……今天，我终于能帮到你了，好高兴……我终于不是只会拖累哥哥、没用的小葵了……”“哥哥……小葵一直不能替哥哥做什么事，铸剑不能帮上忙，现在也总要哥哥照顾，这一次能救哥哥……真好……我好高兴……哥哥你要好好保重……这柄镇妖剑……送给哥哥……”</p><p>我想，景天到最后还是没能理解小葵的吧，或许这样的结局是对龙葵最好的解脱。</p><h3 id="NO-2-林青儿"><a href="#NO-2-林青儿" class="headerlink" title="NO.2 林青儿"></a>NO.2 林青儿</h3><blockquote><p>赤发蛇尾半人身，<br>先祖曾是女娲神。<br>开拓浑沌造万物，<br>身处红尘护凡人。</p></blockquote><p>林青儿是紫萱和徐长卿前世林业平之女。女娲一族在没有产子之前都是不老不死的，她们世代都只能生下女孩，在生子之后，女婴会不断吸收母体的灵力，最后母体便会灵力衰竭而死。为了摆脱女娲一族不堪的命运，也为了和徐长卿永远在一起，紫萱不惜用傀儡汤封印了襁褓之中的林青儿80年。</p><p><img src="/assets/image/pal/pal-0201-linqinger.jpg" alt="林青儿"></p><p>后来青儿被解除封印，在19岁时作为白苗族圣女嫁给黑苗族巫王。虽然后来的青儿被拜月教主陷害，被丈夫误以为是蛇妖，但它依然为了苍生牺牲自己将水魔兽镇压湖底。</p><p>在“回梦游仙”里，当李逍遥要林青儿跟他走时，她对李逍遥说：“你的好意我心领了.。.我不能走，我要留在这里，我若逃走，不就证明我就是如她们所说的亡国妖女吗?如果我的性命能够换回这个国家的和平，那么.。.我的死也是值得的。”</p><p><img src="/assets/image/pal/pal-0202-linqinger.jpg" alt="林青儿"></p><p>最后，她的身体化为石像，她的灵魂附于女娲石像上依然守护着苗疆的百姓。</p><h3 id="NO-1-赵灵儿"><a href="#NO-1-赵灵儿" class="headerlink" title="NO.1 赵灵儿"></a>NO.1 赵灵儿</h3><blockquote><p>仙灵岛上别洞天，<br>池中孤莲伴月眠。<br>一朝风雨落水面，<br>愿君拾得惜相怜。</p></blockquote><p>她是南诏国的公主，为躲避仇人追杀隐居仙灵岛，后来遇到了来岛求药的李逍遥，从此踏上了红尘种种纷争之中。她是女娲族后人，女娲一族悲惨不堪的命运奠定了她悲情的结局。在整个《仙剑》系列中，令人为之动容的女子如此之多，我却独将赵灵儿放在了第一位，因为她的牺牲是真正的不顾小我，是真正的博爱。其实她的母亲林青儿的宽宏大爱不亚于赵灵儿，之所以将赵灵儿放在第一位的另一个原因就是因为她是《仙剑》系列的第一位女主角，她的出现是具有“划时代”的意义的。</p><p><img src="/assets/image/pal/pal-0101-zhaolinger.jpg" alt="赵灵儿"></p><p>《仙一》的主题是宿命，也诉说了灵儿注定要重蹈女娲一族悲惨命运的。为天地苍生而牺牲，却惟独苦了自己最爱的人——逍遥哥哥。</p><p>她说得对：“该面对的，总是该去面对。”</p><p><img src="/assets/image/pal/pal-0102-zhaolinger.jpg" alt="赵灵儿"></p><p>“既不回头，何必不忘。既然无缘，何须誓言。今日种种，似水无痕。明夕何夕，君已陌路。”</p><p>自古英雄出少年，似水红颜惹人怜。 今生情尽空悲切，来世再续未了缘。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：水蔓菁 指导：豆油王 来源：&lt;a href=&quot;http://www.doyo.cn/article/101714&quot; title=&quot;令人潸然泪下！仙剑中这十位女子你动情过么&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;逗游网&lt;/a&gt; 说明：图片较多，加载可能有点慢&lt;/p&gt;
&lt;p&gt;世间万物皆有情，有英雄就会有红颜。《仙剑奇侠传》系列一直在诉说着“情”，情之一字，未经者，实在令人费解;勘破者，实在为之动容。&lt;/p&gt;
&lt;h3 id=&quot;NO-10-琴姬&quot;&gt;&lt;a href=&quot;#NO-10-琴姬&quot; class=&quot;headerlink&quot; title=&quot;NO.10 琴姬&quot;&gt;&lt;/a&gt;NO.10 琴姬&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;草色没春光，&lt;br&gt;花影曳沉城。&lt;br&gt;弦上情未极，&lt;br&gt;泠泠动悲声。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提到琴姬，我首先想到的是那首无数玩家难以忘怀的《仙剑问情》。这首歌是《仙剑》系列首次采用的填词配乐，由萧人凤演唱。&lt;br&gt;&lt;img src=&quot;/assets/image/pal/pal-1001-qinji.jpg&quot; alt=&quot;琴姬&quot;&gt;&lt;/p&gt;
&lt;p&gt;琴姬本是陈州首富秦家的儿媳，因为出身江湖，所以不受公公婆婆待见，后来琴姬负气离家出走，寻仙问道，在此期间，丈夫秦逸病逝。在琴姬返回陈州后，得知丈夫早已病逝，从此发誓再也不求仙问道了。她更名为“琴姬”，一直在码头弹琴。&lt;/p&gt;
&lt;p&gt;在云天河一行人帮助她祭拜丈夫后，她以一曲《仙剑问情》答谢，曲中“如有你相伴，不羡鸳鸯不羡仙”一句唱出了琴姬心中夙愿，只是为时已晚，心心相念的丈夫早已与自己阴阳两隔。&lt;/p&gt;
&lt;p&gt;在这一支线剧情中，另一位痴情女子便是秦逸的小妾——姜氏。她和秦逸青梅竹马，在琴姬离家出走，秦逸病重之时嫁入秦家冲喜，即便如此，还是未能挽留表哥的性命。琴姬祭拜丈夫后，在千佛塔丈夫灵位前殉情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/image/pal/pal-1002-qinji.jpg&quot; alt=&quot;琴姬&quot;&gt;&lt;/p&gt;
&lt;p&gt;两个女子，都是如此深爱着丈夫，结局却如此悲惨，一个从此孤零漂泊，一个香消玉殒。&lt;/p&gt;
&lt;p&gt;或许，正是因为这种悲剧的结局，才换来无数玩家的泪，使人们铭记。&lt;br&gt;
    
    </summary>
    
      <category term="游戏人生" scheme="https://acshiryu.github.io/categories/games/"/>
    
    
      <category term="仙剑" scheme="https://acshiryu.github.io/tags/pal/"/>
    
      <category term="感动" scheme="https://acshiryu.github.io/tags/moving/"/>
    
  </entry>
  
  <entry>
    <title>仙剑四十大感人经典语录</title>
    <link href="https://acshiryu.github.io/archives/games/game-pal4-top10-affecting-quotations.html"/>
    <id>https://acshiryu.github.io/archives/games/game-pal4-top10-affecting-quotations.html</id>
    <published>2018-09-16T02:53:00.000Z</published>
    <updated>2018-09-16T02:35:59.301Z</updated>
    
    <content type="html"><![CDATA[<p>热心网友在论坛上盘点了《仙剑奇侠传四》的十大经典语录：</p><p><iframe width="960" height="540" src="https://www.youtube.com/embed/5koIKbB3nLA" frameborder="0" allowfullscreen></iframe></p><h2 id="Top10"><a href="#Top10" class="headerlink" title="Top10"></a>Top10</h2><blockquote><p>再深沉的感情，再真挚的牵挂，还是会有分开的一天……到头来又怎么敌得过生离死别…… ——韩菱纱</p></blockquote><blockquote><p>也许人和人之间的缘分都是注定的……等到上天要收回的时候，连一天一刻都不会多等…… ——柳梦璃</p></blockquote><p>悲情指数：★★★★<br>经典指数：★★★</p><p>时 间：菱纱语是在女萝平妖之后的柳府。梦璃语是在琴姬唱《问情》之时。  </p><p>在故事的最初，在鲜衣怒马的少年仗剑江湖的时刻，出现这样的句子，我确实感到有些意外。这样的语言，沧桑而悲凉。仿佛那讲述者不是初涉红尘的少年，而是历经沧桑繁华落尽后的垂暮老者。</p><p>但是这些话语影射着上一代的纠葛——玄霄，夙玉，凤凰花。看透红尘的女子，玩世不恭的少年。凤凰花树下天悬星河的誓言，石沉溪洞里玉肌白骨的枉然。</p><p>又似乎对他们后来的命运做出了残酷的预言。那样刻骨铭心的伤痛和痛彻心扉的离别。</p><p>一切的一切，是否在冥冥中早已注定……潮起潮落，缘生缘灭。</p><a id="more"></a><h2 id="Top9"><a href="#Top9" class="headerlink" title="Top9"></a>Top9</h2><blockquote><p>真心为一个人好，就是要让她天天高兴，就算那个人不喜欢自己，甚至根本不认识自己也没关系。 ——云天青</p></blockquote><p>悲情指数：★★★★</p><p>经典指数：★★★</p><p>时 间：千佛塔事件后，云天河复述。</p><p>该怎样去形容云天青这个男子。玩世不恭的，洒脱不羁的，痴情终生的。似乎没有什么语言可以简单地描绘出这个人物，尽管在游戏中他的笔墨不多，寥寥数笔而已，但却始终成为主角之外的不可磨灭的一抹亮色。他寻仙问道，但不拘礼法;他洞彻世事，却乐观旷达;他重情重义，却无奈背叛……</p><p>在鬼界他用波澜不惊的话语陈述着当年的始末，但我们看得出那平静语气后压抑着的悲哀。——也许玄霄和夙玉的爱情中，他只是身处局外。他不过是夙玉悲伤爱情后的寄托与慰藉。</p><p>他深知这点，却给了她全部的温暖与包容。</p><p>就像他自己说的那样，即使她不爱他，甚至不认识他。只要她高兴，便已足够。</p><h2 id="Top8"><a href="#Top8" class="headerlink" title="Top8"></a>Top8</h2><blockquote><p>可以的话，我嫁你们两个，以后我们三个都一起四处玩，找什么东西也一起找! ——云天河</p></blockquote><p>悲情指数：☆</p><p>经典指数：★★</p><p>时 间：打败淮南王后。</p><p>在Top10里唯一收录的搞笑对白。但是你玩遍游戏后重新看来，能不能看出那物是人非的哀伤?</p><p>那时云天河涉世未深，一心想着“嫁”给两位少女，游山玩水，仗剑红尘。那时的云天河没有日后的纠葛与烦恼，那时的云天河纯净得不染一丝尘滓。那些少年少女之间的爱情也是澄澈如水，明媚如风。</p><p>只可惜随着那冰雪覆盖下的埋葬在琼华十九年的秘密被渐渐揭开，命运的轮盘便不再由他们自己旋转。他们被迫生离，被迫死别，被迫接受着任何未知的命运。那些美好的回忆便寂静地躺在那里，被岁月覆盖。</p><p>——飘落后才发现这一地的幸福碎片，要我怎么拣。</p><h2 id="Top7"><a href="#Top7" class="headerlink" title="Top7"></a>Top7</h2><blockquote><p>涛山阻绝秦帝船，汉宫彻夜捧金盘。玉肌枉然生白骨，不如剑啸易水寒。 ——夙玉?云天青?</p></blockquote><p>悲情指数：★★★</p><p>经典指数：★★★★</p><p>时 间：石沉溪洞，第一次进入青玉墓室。</p><p>不知何人在石沉溪洞的玄冰上题的诗。以我揣测大概是夙玉或天青的手笔。</p><p>这是我仙剑中最喜欢的诗。和“不如笑归红尘去，共我飞花携满袖”似乎有异曲同工之妙。</p><p>秦皇汉武为寻仙大兴土木，然，终其一生都没能实现愿望，只能孤独地接受死去的命运。</p><p>求仙固然好，没有了生老病死，失却了七情六欲。但如此这般又有何用……人不止为了活着而活着。失去了感情的世界只是一座荒芜的空城。追求那些虚无缥缈的东西又有何意义——</p><p>倒不如，人生得意须尽欢，莫使金樽空对月。</p><h2 id="Top6"><a href="#Top6" class="headerlink" title="Top6"></a>Top6</h2><blockquote><p>苍天弃吾、吾宁成魔——!! ——玄霄</p></blockquote><p>悲情指数：★★★★☆</p><p>经典指数：★★★★</p><p>时 间：BOSS战后</p><p>作为历代悲情BOSS之首，玄霄也是我最喜欢的角色。对这个反派的喜爱甚至超越了主角。</p><p>最初来到那个重重玄冰掩映下的琼华禁地里的时候，对于这个冰封着的不知是敌是友的男子充满了好奇，想知道昆仑之巅的雪山上究竟掩埋着怎样的过往，但是随着重重迷局的揭开，那个残酷的现实显现，那么可以发现这个人身上的种种远远不是一个“悲情”所承载得了。</p><p>他曾经是琼华派最出色的弟子，有着教条一般的生活和坚定不移的信仰。在琼华那些乏味的日子中，即便是心如止水的他仍然笃定地坚守着友情和爱情，风华绝代的夙玉和洒脱不羁的天青曾经是他除了光大琼华之外唯一的心灵寄托。然而十九年前的变故，爱人的离去，朋友的背叛让他本来变得有些炽热的内心蒙上了一层严霜。十九年来冰冷惨淡的日子更使他趋于绝望与毁灭。</p><p>他对待感情无疑是真挚的，甚至可以到了“纯真”的地步。对天青，夙玉，至于天河，都是如此。正因为那份真诚，才容不得丝毫的离弃与背叛。</p><p>他恨夙玉么?我不知道，也许比恨更多的，是刻骨铭心的爱。十九年来他对她仍然念念不忘，心中一遍一遍浮现的，不是对背叛的恨，而是凤凰花下的私语，天悬星河的誓言……亲手把那寄托着无限伤痛与思念的凤凰花焚为灰烬的一刻，这个坚忍了十九年的男子，他的内心是否也在哭泣?</p><p>十九年后，萍水相逢的天河给了他全部的关心与爱，让他本已日渐冰冷的心再次被温暖。天河为他折花枝，寻寒器，赠望舒，毫无保留地给了他温暖与感动。然而当他终于认为重新得到了一份兄弟之情时，上天却再一次残忍地耍弄了他。天河为了救菱纱，终于迫不得已走上了无奈的背叛。当那个少年对他拔剑相向时他的心在滴血，毫无保留的感情的付出只能换来兄弟反戈。</p><p>于是他心中最后的一丝温暖终于再次被冰冷覆盖。“昔日修炼双剑、苦无进境之时，无人让我放弃……初有所成、经络逆变之时，无人让我放弃……失却望舒、日夜受火焚之苦，无人顾我生死……”这是玄霄最真实惨烈的过往，也是最让人心痛之处。</p><p>天河是他的救赎，只是这个救赎迟到了二十二年，二十二年后的他已经无路可退。他是一个感性的人，也是一个理想主义者。当最后的感情幻灭后他选择了不顾一切地逆天而行，来实现自己生命中最后的宏大的理想。</p><p>然而他终究为逆天而行付出了代价，等待他的是千年的放逐，千年的寂难，千年的永劫。</p><p>“苍天弃吾，吾宁成魔”是玄霄对这一生命运的血泪控诉。</p><p>他的做法我终于可以理解——当一个人被世界所遗弃的时候，他就选择微笑着遗弃了这个世界。</p><h2 id="Top5"><a href="#Top5" class="headerlink" title="Top5"></a>Top5</h2><blockquote><p>遇上了你，我才明白……什么叫在意一个人、忧心一个人，还有……喜欢一个人…… ——柳梦璃</p></blockquote><blockquote><p>其实，那些都只是借口，他已经比以前懂事好多，是我……是我自己离不开他…… ——韩菱纱</p></blockquote><p>悲情指数：★★★★☆</p><p>经典指数：★★★★</p><p>时 间：前者：梦璃第一次离开天河时。后者：重回青鸾峰晚，树屋对白。</p><p>这是仙四中最美的时刻，因为这时两位女主角终于可以抛却羞涩和矜持，表达出她们最深沉的爱恋。</p><p>这也是仙四中最悲哀的时刻，因为下一秒，他们就要面对生离死别。</p><p>菱纱，你曾经和他一起在欢声笑语中走下青鸾峰，你曾经一次又一次地收拾着他闯下的烂摊子，你曾经耐着性子给他一遍又一遍地解释着那些新鲜事物的意思，你曾经宁愿折缩寿命也要送给他最后的礼物……</p><p>梦璃，你曾经和他一起在女萝岩中救过受伤的槐妖，你曾经教他读书教他写字，你曾经以自己好奇为由来劝菱纱满足他的探险，你曾经赠送他一柄风华无限的玉腰弓，你曾在幻暝的哀歌中与他痛彻心扉地离别……</p><p>那些真挚的感情，那些真挚的牵挂，却终究敌不过时光的风化。</p><p>终究，一个为了族人去国别旧，一个生命已尽永隔参商。都无法回到过去。</p><p>那样薄如蝉翼的未来。</p><h2 id="Top4"><a href="#Top4" class="headerlink" title="Top4"></a>Top4</h2><blockquote><p>……无所谓好或不好，人生一场虚空大梦，韶华白首，不过转瞬。 ——慕容紫英</p></blockquote><p>悲情指数：★★★★☆</p><p>经典指数：★★★★</p><p>时 间：结局动画</p><blockquote><p>十年生死两茫茫，不思量，自难忘。千里孤坟，无处话凄凉。纵使相逢应不识，尘满面，鬓如霜。</p></blockquote><blockquote><p>夜来幽梦忽还乡，小轩窗，正梳妆。相顾无言，惟有泪千行。料得年年肠断处，明月夜，短松冈。</p></blockquote><blockquote><p>——苏轼《江城子》</p></blockquote><p>仙四的结局总让我想起苏东坡的这样一阕词，江城子，十年生死两茫茫，对亡妻的祭奠。每一字每一句都凝结着刻骨的思念和哀伤。把十年的生死幽茫拉长为百年，昔日翩翩英姿的少年剑客已是苍颜白发，而那抹红衣倩影如今早已魂归黄土。</p><p>当梦璃重归，她的眼睛里再也没有了大喜或大悲，平静得如同一泓秋水。土丘上已落满青苔，唯有蝴蝶在墓碑上翩然舞动，见证着那一场场相聚与离合，起伏与幻灭。</p><p>人生一场虚空大梦，韶华白首，不过转瞬。百年的光阴流转，早已是酒徒萧索，不似去年时。</p><p>然而当野人装扮的天河推门而出时，一切流转着的光阴都定格成了永恒。那张依然英气逼人的脸颊与那张不曾老去的容颜再次面对面，他们相顾无言。</p><p>我不知道梦璃究竟是真正地归来，还是依然要离去，是不用分开的相爱，还是咫尺天涯的思念。但唯一可以确定的是，那一刻，所有的魂萦梦牵都已经浮现眼前。至少在那一刻，她真真切切地在他身旁。</p><h2 id="Top3"><a href="#Top3" class="headerlink" title="Top3"></a>Top3</h2><blockquote><p>承君此诺，必守一生。 ——慕容紫英</p></blockquote><p>悲情指数：★★</p><p>经典指数：★★★★☆</p><p>时 间：去往不周山前 琼华云天河房间</p><p>记不清为什么会喜欢上他了。是为了他沉静俊朗的面容与风华绝代的身姿，还是为了他承君此诺必守一生的情义。</p><p>当那个只有几岁的孩子就离开了父母时，是否就注定了他一生的悲剧。孩提时的他独自在寂寞的雪山之巅，日夜与剑为伴。苍白的手指滑过冰凉的剑峰，萦绕在身侧的是一望无际的孤独，回不去的名字叫做家乡。当他长成硬挺俊朗的少年，十余年的心如止水已经抹去了他的年少轻狂。他掩饰着自己的热情与不羁，以一种近乎冷漠的姿态俯视着自己的人生。</p><p>然而所有的人都知道他的面冷心热，知道他那看似冷漠疏离的外表之下善良正直的内心世界。他恪守着自己的原则与信仰，做自己所能及之事。</p><p>他们的到来打破了这一场平静，无论他怎样横眉冷对，依然无法阻隔他们的热情。终于，在那个有着绚烂烟花的夜，他心中的那一层隔膜被彻底打破。他们推心置腹。从此在千山万水间，总可以看到四个潇洒的身影。他们尽情地在这世界，在无数个日夜书写着他们的热血青春与快意恩仇。</p><p>他对他的朋友许下誓言——承君此诺，必守一生。</p><p>几日几夜不眠不休为天河铸成天河剑的他，为了帮梦璃守住幻暝与昔日同门拔剑相向的他，为了救垂危的菱纱日夜研读手记的他，为了照顾失明或者沉睡的天河百年来从未离开过青鸾的他……这些影子交织在一起，氤氲成了滚滚红尘中那永垂不朽的传说……他用生命守护着那些承诺——翩翩白衣云端客，生死为谁一掷轻。</p><p>生命中有多少人匆匆而过，遇见了，错过了……百年之后他御剑离去，空留一段波澜不惊。</p><p>他对阿璃说，人生一场虚空大梦，韶华白首，不过转瞬。那是浮沉江湖中的感慨。亦是洗尽铅华后的大彻大悟。</p><p>但是无论怎样的彻悟，终有一些事情铭刻在记忆里永远不会被时光风化……那些溢满了美好的日子，那些有朋友陪伴在身侧的岁月。</p><h2 id="Top2"><a href="#Top2" class="headerlink" title="Top2"></a>Top2</h2><blockquote><p>我命由我，不由天! ——云天河</p></blockquote><p>悲情指数：★★★★☆</p><p>经典指数：★★★★☆</p><p>时 间：BOSS战后</p><p>比起“寻仙”，我感觉在众多主题中更为深沉的是“天命”。</p><p>韩菱纱说，也许每个人的命运都是沿着既定的轨道运行。即使你改变得了开头，也改变不了结果。</p><p>玄女说，天命难违。</p><p>然而。夙玉说，死生在手，变化由心，地不能埋，天不能煞。</p><p>云天河说，我命由我，不由天。</p><p>夙玉和云天青不信天命，却终究是玉肌枉然生白骨。菱纱曾经奢望找到长生之法来挽救家族的生命，却终究一无所得。云天河射落琼华挽救播仙镇，但他也付出了失明或长眠百年的代价。</p><p>仙剑四部，从最初的“宿命”到如今的“寻仙”，殊途同归。</p><p>唯一不同的是仙剑已经渐渐放开宿命论，转而对人的主观能动性进行了更为深刻的思考。</p><p>然而天命难违还是人定胜天。这始终是一个难解的话题。</p><p>在结局时天河说，“万物就是天道，那人也算天道的一部分吧?!为什么不能自己定自己的命?!”</p><p>字字珠玑。天河大愚若智。他的心最为澄清，也更是看得最为明澈。</p><p>人类究竟可以卑微到什么地步，人心又可以强大到什么地步。</p><p>在我的观点中我尊崇于“我命由我不由天”。虽然物质世界的规律客观存在，制约着人类，但是人的主观能动性更是不可忽视。</p><p>在大自然的广袤面前，人类也许卑微如同草芥，但是人有思想有情感，他们会思考，因此他们也可以一定限度地改变世界。</p><p>就像是最近的汶川地震。那样地动山摇的浩劫算不算的上是天命。</p><p>但是凭靠着相濡以沫生死不离不抛弃不放弃的爱，我们终于把那样的灾难渐渐消弭，把损失降至最低。</p><p>这算不算的上是“我命由我不由天”?</p><p>突然想起一句歌词——我们太倔强，连天都不忍再反对。唏嘘不已。</p><p>游戏毕竟是游戏啊…在现实中，凭靠着爱，是什么样的困难都不会认输的吧。</p><p>爱是我们堪与神比肩的，唯一理由。</p><h2 id="Top1"><a href="#Top1" class="headerlink" title="Top1"></a>Top1</h2><blockquote><p>生尽欢，死无憾。 ——云天青、韩菱纱</p></blockquote><p>悲情指数：★★★</p><p>经典指数：★★★★★</p><p>时 间：弦歌问情</p><p>终于写到了Top1，也是我整个仙四中最喜欢的一句话。</p><p>生当尽欢，死而无憾。</p><p>也许天命难违。</p><p>也许命运既定。</p><p>也许无可逆转。</p><p>也许参商永离。</p><p>生命中这么多的也许。但怎能因为今后的“也许”对眼前的幸福说放弃。</p><p>大家应该都记得夙玉的一句话。……容貌美丑，皆是皮下白骨，表象声色又有什么分别。</p><p>但是比这一句更让我印象深刻的是天青后面的那一句。——你年纪轻轻，便看这么透，岂不是一点也不好玩了。</p><p>一点也不好玩了。</p><p>那样随口扯出的无心之语却让屏幕前的我莫名地震撼。</p><p>云天青。他其实是把一切都看得很透彻的。然而，他却使自己活在尘世中。他宁愿在凡尘潇洒走一回，也不愿像一个真正的世外高人追求心灵的永寂。</p><p>他告诉天河，活着的时候要尽欢，死的时候才没有遗憾，要是因为害怕以后的事，一直避开当下的事，那活着也不会开心的。</p><p>这是我最欣赏的活法。多少人超然物外，多少人淡泊一切,多少人求仙问道，多少人希望超脱尘世。然而他不一样，如果人生一场虚空大梦，那么他就选择一直沉睡直到梦醒。云天青总让我想起苏东坡，同样是凡尘之人，同样可以在悲恸之时写下“十年生死两茫茫”，然而大多数时候都能暂时放下一切，宠辱不惊，看庭前花开花落，去留无意，望天上云卷云舒。——笑着面对一切未知的命运，相濡以沫，或者相忘于江湖。</p><p>生尽欢，死无憾。天青说过，菱纱也说过，是在琴姬抚琴吟歌之时。那时的他们只是少年听雨阁楼上，红烛昏罗帐，而不是后来的悲欢离合总无情，一任阶前点滴到天明。尽管未来千里烟波无人知途，他们依旧选择坚定不移地走下去，即使缘分的短暂早已注定，即使最终依然会参商永隔。但惜今日之缘，管他明天生离还是死别。</p><blockquote><p>你道是雨横风狂三月暮，我偏要何妨吟啸且徐行。</p></blockquote><p>尽管人终有一死，但人生最重要的不是结果，而是活着的过程。既然有幸生于世间，就趁着韶华之年，潇洒走一回，方能不枉此生。</p><p>生若尽欢，此生无憾。</p><p>突然在想，若是一年之后，我在09年的夏天再次重温仙四，再次凝望着那些人们的相遇，相爱，分离，俩俩相忘，随着那些虚构的人物欢笑哭泣，将会是怎样的一种感受</p><p>也许，我将永远不会忘记，那个夏天，仙剑奇侠传四，那样的感动与震撼。<br><img src="/assets/image/pal/pal4-end.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;热心网友在论坛上盘点了《仙剑奇侠传四》的十大经典语录：&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;960&quot; height=&quot;540&quot; src=&quot;https://www.youtube.com/embed/5koIKbB3nLA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2 id=&quot;Top10&quot;&gt;&lt;a href=&quot;#Top10&quot; class=&quot;headerlink&quot; title=&quot;Top10&quot;&gt;&lt;/a&gt;Top10&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;再深沉的感情，再真挚的牵挂，还是会有分开的一天……到头来又怎么敌得过生离死别…… ——韩菱纱&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;也许人和人之间的缘分都是注定的……等到上天要收回的时候，连一天一刻都不会多等…… ——柳梦璃&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;悲情指数：★★★★&lt;br&gt;经典指数：★★★&lt;/p&gt;
&lt;p&gt;时 间：菱纱语是在女萝平妖之后的柳府。梦璃语是在琴姬唱《问情》之时。  &lt;/p&gt;
&lt;p&gt;在故事的最初，在鲜衣怒马的少年仗剑江湖的时刻，出现这样的句子，我确实感到有些意外。这样的语言，沧桑而悲凉。仿佛那讲述者不是初涉红尘的少年，而是历经沧桑繁华落尽后的垂暮老者。&lt;/p&gt;
&lt;p&gt;但是这些话语影射着上一代的纠葛——玄霄，夙玉，凤凰花。看透红尘的女子，玩世不恭的少年。凤凰花树下天悬星河的誓言，石沉溪洞里玉肌白骨的枉然。&lt;/p&gt;
&lt;p&gt;又似乎对他们后来的命运做出了残酷的预言。那样刻骨铭心的伤痛和痛彻心扉的离别。&lt;/p&gt;
&lt;p&gt;一切的一切，是否在冥冥中早已注定……潮起潮落，缘生缘灭。&lt;/p&gt;
    
    </summary>
    
      <category term="游戏人生" scheme="https://acshiryu.github.io/categories/games/"/>
    
    
      <category term="仙剑" scheme="https://acshiryu.github.io/tags/pal/"/>
    
      <category term="语录" scheme="https://acshiryu.github.io/tags/quotations/"/>
    
      <category term="感动" scheme="https://acshiryu.github.io/tags/moving/"/>
    
  </entry>
  
  <entry>
    <title>hdu1016 Prime Ring Problem解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-1016-prime-ring-problem.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-1016-prime-ring-problem.html</id>
    <published>2018-09-16T02:52:00.000Z</published>
    <updated>2018-09-16T02:35:47.277Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1016" title="Prime Ring Problem" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1016</a></p><p>直接DFS水过，没什么意思，对于DFS还不是很熟的可以参见我的另一篇文章<a href="/archives/acm/poj-1426-find-the-multiple.html" title="POJ1426 Find The Multiple 解题报告">POJ1426 Find The Multiple 解题报告</a>，代码注释很详细，这里略去</p><figure class="highlight cpp"><figcaption><span>hdu1016 Prime Ring</span><a href="/assets/code/hdu/1016.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> num[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">bool</span> ispri[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">if</span>(k==n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ispri[a[k<span class="number">-1</span>]+<span class="number">1</span>])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(num[i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(ispri[a[k<span class="number">-1</span>]+i])</span><br><span class="line">{</span><br><span class="line">a[k]=i;</span><br><span class="line">num[i]=<span class="number">1</span>;</span><br><span class="line">DFS(k+<span class="number">1</span>,n);</span><br><span class="line">num[i]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(ispri,<span class="number">1</span>,<span class="keyword">sizeof</span>(ispri));</span><br><span class="line">ispri[<span class="number">0</span>]=ispri[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ispri[i])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=i*i;j&lt;<span class="number">50</span>;j+=i)</span><br><span class="line">ispri[j]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">{</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,cnt++);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">DFS(<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1016&quot; title=&quot;Prime Ring Problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.ed
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="深度优先搜索" scheme="https://acshiryu.github.io/tags/depth-first-search/"/>
    
      <category term="素数" scheme="https://acshiryu.github.io/tags/prime/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu1232 畅通工程 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-1232-smooth-engineering.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-1232-smooth-engineering.html</id>
    <published>2018-09-16T02:51:00.000Z</published>
    <updated>2018-09-16T02:35:34.721Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1232" title="畅通工程" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1232</a></p><p>并查集，将连通的点归结在一起，然后再扫描，看有多少个团队，然后团队数-1，详细看代码</p><figure class="highlight cpp"><figcaption><span>hdu1232 畅通工程</span><a href="/assets/code/hdu/1232.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">1005</span> ];</span><br><span class="line"><span class="keyword">bool</span> tmp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> pre[k]==k?k:pre[k]=find(pre[k]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> fa=find(a);</span><br><span class="line"><span class="keyword">int</span> fb=find(b);</span><br><span class="line"><span class="keyword">if</span>(fa!=fb)</span><br><span class="line">pre[fa]=fb;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">pre[i]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">join(a,b);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(tmp[find(i)]==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">cnt++;</span><br><span class="line">tmp[find(i)]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1232&quot; title=&quot;畅通工程&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showprobl
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="并查集" scheme="https://acshiryu.github.io/tags/union-set/"/>
    
  </entry>
  
  <entry>
    <title>hdu1247 Hat’s Words 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-1247-hats-words.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-1247-hats-words.html</id>
    <published>2018-09-16T02:50:00.000Z</published>
    <updated>2018-09-16T02:35:22.313Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1247" title="Hat’s Words" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1247</a></p><p>字典树，但懒的写了，直接用stl里的map+string水过，关于stl，可参见我的博客园博客：<a href="http://www.cnblogs.com/ACShiryu/category/310688.html" title="STL详解" target="_blank" rel="noopener">http://www.cnblogs.com/ACShiryu/category/310688.html</a></p><figure class="highlight cpp"><figcaption><span>hdu1247 Hat’s Words</span><a href="/assets/code/hdu/1247.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt;ans;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s[n])</span><br><span class="line">ans[s[n++]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">bool</span> found=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;s[i].size();j++)</span><br><span class="line">{</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(s[i],<span class="number">0</span>,j)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(s[i],j)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(ans.count(s1)&amp;&amp;ans.count(s2))</span><br><span class="line">{</span><br><span class="line">found=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(found)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1247&quot; title=&quot;Hat’s Words&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/sh
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="字典树" scheme="https://acshiryu.github.io/tags/dictionary-tree/"/>
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu1604 Deque 2013多校第一场1005</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-1604-letter-sequence-analysis.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-1604-letter-sequence-analysis.html</id>
    <published>2018-09-16T02:49:00.000Z</published>
    <updated>2018-09-16T02:34:57.195Z</updated>
    
    <content type="html"><![CDATA[<p>多校的时候数据太水了，竟然让我过了。</p><p>题目实际上就是求的从某个点开始到终点的非升非降序列长度和的最大值，其中要排除重复的元素，就是DP</p><blockquote><p>官方解题报告<br>    考虑题目的一个简化版本：使双端队列单调上升。对于序列A和队列Q，找出队列中最早出现的数字Ax，则Ax将Q分成的两个部分分别是原序列中以Ax开始的最长上升和最长下降序列，答案即为这两者之和的最大值。而对于本体，由于存在相同的元素，所以只要找到以Ax为起点的最长不下降序列和最长不上升序列的和，然后减去两个里面出现Ax次数的最小值即可。</p></blockquote><a id="more"></a><p>我的代码<br><figure class="highlight cpp"><figcaption><span>hdu1604 Deque</span><a href="/assets/code/hdu/1604-1.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> jia[maxn];</span><br><span class="line"><span class="keyword">int</span> jian[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> jia_num;</span><br><span class="line"><span class="keyword">int</span> jian_num;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erfenjia</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(s==t)</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"><span class="keyword">int</span> m=(s+t)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(k&gt;=jia[m])</span><br><span class="line"><span class="keyword">return</span> erfenjia(m+<span class="number">1</span>,t,k);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> erfenjia(s,m,k);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erfenjian</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(s==t)</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"><span class="keyword">int</span> m=(s+t)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(k&lt;=jian[m])</span><br><span class="line"><span class="keyword">return</span> erfenjian(m+<span class="number">1</span>,t,k);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> erfenjian(s,m,k);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erfen</span><span class="params">(<span class="keyword">int</span>*a ,<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> k,<span class="keyword">bool</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(s==t)</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"><span class="keyword">int</span> m=(s+t)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;k&lt;=a[m])</span><br><span class="line"><span class="keyword">return</span> erfen(a,s,m<span class="number">-1</span>,k,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">1</span>&amp;&amp;k&gt;=a[m])</span><br><span class="line"><span class="keyword">return</span> erfen(a,s,m<span class="number">-1</span>,k,x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> erfen(a,m,t,k,x);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">zero(jia);</span><br><span class="line">zero(jian);</span><br><span class="line">jia_num=jian_num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> tmp=a[n-i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> s,t;</span><br><span class="line"><span class="keyword">if</span>(tmp&gt;=jia[jia_num<span class="number">-1</span>])</span><br><span class="line">s=jia_num++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s=erfenjia(<span class="number">0</span>,jia_num<span class="number">-1</span>,tmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(tmp&lt;=jian[jian_num<span class="number">-1</span>])</span><br><span class="line">t=jian_num++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t=erfenjian(<span class="number">0</span>,jian_num<span class="number">-1</span>,tmp);</span><br><span class="line"></span><br><span class="line">jia[s]=tmp;</span><br><span class="line">jian[t]=tmp;</span><br><span class="line"><span class="keyword">int</span> sx=erfen(jia,<span class="number">0</span>,jia_num<span class="number">-1</span>,tmp,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> sy=erfen(jian,<span class="number">0</span>,jian_num<span class="number">-1</span>,tmp,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(sx==<span class="number">0</span>&amp;&amp;jia[sx]&lt;=tmp)</span><br><span class="line">sx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(sy==<span class="number">0</span>&amp;&amp;jian[sy]&gt;=tmp)</span><br><span class="line">sy=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> com=s+<span class="number">1</span>+t+<span class="number">1</span>-min(s-sx,t-sy);</span><br><span class="line"><span class="comment">//cout&lt;&lt;min(s-sx,t-sy)&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;s&lt;&lt;' '&lt;&lt;t&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;sx&lt;&lt;' '&lt;&lt;sy&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(com&gt;ans)</span><br><span class="line">ans=com;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">jia[jia_num++]=tmp;</span><br><span class="line">jian[jian_num++]=tmp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><p>标程<br><figure class="highlight cpp"><figcaption><span>hdu1604 Deque 标程</span><a href="/assets/code/hdu/1604-2.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"map"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> num_up[N],num_down[N];</span><br><span class="line"><span class="keyword">int</span> dp_up[N],dp_down[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdp</span><span class="params">(<span class="keyword">int</span> dp[],<span class="keyword">int</span> num[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">dp[n]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(a[n]);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--){</span><br><span class="line"><span class="keyword">int</span> sz=v.size();</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;v[sz<span class="number">-1</span>]){</span><br><span class="line">v.push_back(a[i]);</span><br><span class="line">dp[i]=sz+<span class="number">1</span>;</span><br><span class="line">num[i]=<span class="number">1</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==v[sz<span class="number">-1</span>]){</span><br><span class="line">iter=upper_bound(v.begin(),v.end(),a[i]);</span><br><span class="line">dp[i]=iter-v.begin()+<span class="number">1</span>;</span><br><span class="line">v.push_back(a[i]);</span><br><span class="line">pair&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator&gt; bounds;</span><br><span class="line">bounds=equal_range(v.begin(),v.end(),a[i]);</span><br><span class="line">num[i]=bounds.second-bounds.first;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">iter=upper_bound(v.begin(),v.end(),a[i]);</span><br><span class="line">dp[i]=iter-v.begin()+<span class="number">1</span>;</span><br><span class="line">*iter=a[i];</span><br><span class="line">pair&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator&gt; bounds;</span><br><span class="line">bounds=equal_range(v.begin(),v.end(),a[i]);</span><br><span class="line">num[i]=bounds.second-bounds.first;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--){</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line">mp.clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">}</span><br><span class="line">getdp(dp_up,num_up);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++){</span><br><span class="line">a[i]=-a[i];</span><br><span class="line">}</span><br><span class="line">getdp(dp_down,num_down);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++){</span><br><span class="line">mp[a[i]]++;</span><br><span class="line">ans=max(ans,dp_down[i]+dp_up[i]-min(num_up[i],num_down[i]));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多校的时候数据太水了，竟然让我过了。&lt;/p&gt;
&lt;p&gt;题目实际上就是求的从某个点开始到终点的非升非降序列长度和的最大值，其中要排除重复的元素，就是DP&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方解题报告&lt;br&gt;    考虑题目的一个简化版本：使双端队列单调上升。对于序列A和队列Q，找出队列中最早出现的数字Ax，则Ax将Q分成的两个部分分别是原序列中以Ax开始的最长上升和最长下降序列，答案即为这两者之和的最大值。而对于本体，由于存在相同的元素，所以只要找到以Ax为起点的最长不下降序列和最长不上升序列的和，然后减去两个里面出现Ax次数的最小值即可。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu1711 Number Sequence 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-1711-number-sequence.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-1711-number-sequence.html</id>
    <published>2018-09-16T02:48:00.000Z</published>
    <updated>2018-09-16T02:34:45.355Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1711" title="Number Sequence" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1711</a></p><p>kmp算法，直接看大神博客水过，关于kmp算法，推荐matrix67的博客，地址：<a href="http://www.matrix67.com/blog/archives/115" title="KMP算法详解" target="_blank" rel="noopener">http://www.matrix67.com/blog/archives/115</a></p><figure class="highlight cpp"><figcaption><span>hdu1711 Number Sequence</span><a href="/assets/code/hdu/1711.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000000</span>+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">1000000</span>+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1000000</span>+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">memset</span>(p,<span class="number">-1</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line"><span class="keyword">if</span>(i)</span><br><span class="line">{</span><br><span class="line">j=p[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(b[j+<span class="number">1</span>]==b[i])</span><br><span class="line">p[i]=j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p[i]=<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">j=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;b[j+<span class="number">1</span>]!=a[i])</span><br><span class="line">j=p[j];</span><br><span class="line"><span class="keyword">if</span>(b[j+<span class="number">1</span>]==a[i])</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">1</span>==m)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i==n)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i-j+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1711&quot; title=&quot;Number Sequence&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.c
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="kmp" scheme="https://acshiryu.github.io/tags/kmp/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu1754 I Hate It 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-1754-i-hate-it.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-1754-i-hate-it.html</id>
    <published>2018-09-16T02:47:00.000Z</published>
    <updated>2018-09-16T02:34:24.540Z</updated>
    
    <content type="html"><![CDATA[<p>这题很无奈，第一次做线段树，RE了好多次，代码也修改了好多次，终于AC了</p><p>刚开始时数组开小了，所以导致RE</p><figure class="highlight cpp"><figcaption><span>hdu1754 I Hate It</span><a href="/assets/code/hdu/1754.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num [ <span class="number">2000200</span> ] ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prig</span>{</span></span><br><span class="line">    <span class="keyword">int</span> x ;        <span class="comment">//起点</span></span><br><span class="line">    <span class="keyword">int</span> y ;        <span class="comment">//终点</span></span><br><span class="line">    <span class="keyword">int</span> max ;    <span class="comment">//从x到y的最大值（包括x和y）</span></span><br><span class="line">} sum [ <span class="number">4000400</span> ] ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span> <span class="params">( <span class="keyword">int</span> k ,<span class="keyword">int</span> x , <span class="keyword">int</span> y )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    sum [ k ] . x = x ;</span><br><span class="line">    sum [ k ] . y = y ;</span><br><span class="line">    <span class="keyword">if</span>( y == x )</span><br><span class="line">    {</span><br><span class="line">        sum [ k ] . max = num [ x<span class="number">-1</span> ] ;</span><br><span class="line">        <span class="keyword">return</span> num [ x<span class="number">-1</span> ] ;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = ( x + y  ) / <span class="number">2</span> ;</span><br><span class="line">    <span class="keyword">int</span> maxnum = max ( build ( <span class="number">2</span> * k , x , mid  ) , build ( <span class="number">2</span> * k + <span class="number">1</span> ,mid + <span class="number">1</span> , y ) ) ;</span><br><span class="line">    sum [ k ] . max = maxnum ;</span><br><span class="line">    <span class="keyword">return</span> maxnum ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">found</span> <span class="params">( <span class="keyword">int</span> k ,<span class="keyword">int</span> x , <span class="keyword">int</span> y )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> ( sum [ k ] . y &lt; x )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">if</span> ( sum [ k ] . x &gt; y )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">if</span> ( sum [ k ] . x &gt;= x &amp;&amp; sum [ k ] . y &lt;= y )</span><br><span class="line">        <span class="keyword">return</span>  sum [ k ] . max ;</span><br><span class="line">    <span class="keyword">return</span> max ( found ( <span class="number">2</span> * k , x , y ) , found ( <span class="number">2</span> * k + <span class="number">1</span> , x , y ) );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updata</span> <span class="params">( <span class="keyword">int</span> k ,<span class="keyword">int</span> x , <span class="keyword">int</span> y )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>( sum [ k ] . x &lt;= x &amp;&amp; sum [ k ] . y &gt;= x )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> ( sum [ k ] . x == x &amp;&amp; sum [ k ] . y == x )</span><br><span class="line">        {</span><br><span class="line">            sum [ k ] . max = y;</span><br><span class="line">            <span class="keyword">return</span> y ;</span><br><span class="line">        }</span><br><span class="line">        sum [ k ] . max = max ( updata ( k * <span class="number">2</span> , x , y ) , updata ( k * <span class="number">2</span> + <span class="number">1</span> , x ,y ) ) ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum [ k ] . max ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">scanf</span> ( <span class="string">"%d"</span> , &amp; num[i] );</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        build ( <span class="number">1</span> , <span class="number">1</span> , n );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ( m -- )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> x , y ;</span><br><span class="line">            <span class="built_in">scanf</span> ( <span class="string">"%s%d%d"</span> , op , &amp; x , &amp; y ) ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">strcmp</span> ( op , <span class="string">"Q"</span> ) == <span class="number">0</span> )</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">printf</span> ( <span class="string">"%d\n"</span> , found ( <span class="number">1</span> , x , y ) ) ;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                num [ x - <span class="number">1</span> ] = y ;</span><br><span class="line">                updata ( <span class="number">1</span> , x , y ) ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这题很无奈，第一次做线段树，RE了好多次，代码也修改了好多次，终于AC了&lt;/p&gt;
&lt;p&gt;刚开始时数组开小了，所以导致RE&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;hdu1754 I Hate It&lt;/span&gt;
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="线段树" scheme="https://acshiryu.github.io/tags/segment-tree/"/>
    
  </entry>
  
  <entry>
    <title>hdu1785 You Are All Excellent</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-1785-you-are-all-excellent.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-1785-you-are-all-excellent.html</id>
    <published>2018-09-16T02:46:00.000Z</published>
    <updated>2018-09-16T02:34:13.837Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><figcaption><span>hdu1785 You Are All Excellent</span><a href="/assets/code/hdu/1785.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line">    <span class="keyword">double</span> x ;</span><br><span class="line">    <span class="keyword">double</span> y ;</span><br><span class="line">    <span class="keyword">double</span> asin0 ;</span><br><span class="line">}po[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( prog a , prog b )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a.asin0&lt;b.asin0;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n , n &gt;= <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; po[i].x &gt;&gt; po[i].y ;</span><br><span class="line">            <span class="keyword">double</span> z = <span class="built_in">sqrt</span> ( <span class="built_in">pow</span> ( po[i].x , <span class="number">2</span>) + <span class="built_in">pow</span> ( po[i].y , <span class="number">2</span> ) ) ;</span><br><span class="line">            po[i].asin0 = <span class="built_in">acos</span> ( po[i].x / z ) ;</span><br><span class="line">        }</span><br><span class="line">        sort ( po , po + n , cmp ) ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.1lf %.1lf"</span>,po[i].x,po[i].y);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;hdu1785 You Are All Excellent&lt;/span&gt;&lt;a href=&quot;/assets/code/hdu/1785.cpp&quot;&gt;view raw&lt;/a&gt;&lt;/figcap
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu1896 Stones 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-1896-stones.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-1896-stones.html</id>
    <published>2018-09-16T02:45:00.000Z</published>
    <updated>2018-09-16T02:33:43.499Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意是路上有很多石头，当你遇到奇数序列的石头就把他向前仍，偶数的不动他，如果两个石头一起，先考虑可以仍的比较近的石头仍也就是比较大的石头，这样一直下去，直到前面所有的石头都不可以仍了为止，求最远的石头距离起点多少题目这题用优先队列非常方便.</p><p>分析；可以定义一个结构体，分别存储石头现在的位置和能能出去的距离到优先队列中，然后每次取“最小的”，如果取得是偶数个就不动，取得是奇数个就要更新该石头的位置并重新存到优先队列中，直到队列空，输出最后一个石头的位置</p><p>数据分析：程序的时间复杂度是O（nlogn）,数据量最大为100,000，不会超时。要特别注意多个石头的x一样的情况,要优先考虑y值最小的那块石头</p><figure class="highlight cpp"><figcaption><span>hdu1896 Stones</span><a href="/assets/code/hdu/1896.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stone</span>{</span></span><br><span class="line">    <span class="keyword">int</span> x;    <span class="comment">//石头的初始地</span></span><br><span class="line">    <span class="keyword">int</span> y;    <span class="comment">//石头能扔的最远距离</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;( Stone a, Stone b )</span><br><span class="line">{ <span class="comment">//重载小于，按照结构体中x小的在队顶，如果x一样，则按照y的最小的在//队顶</span></span><br><span class="line">    <span class="keyword">if</span>( a.x== b.x ) <span class="keyword">return</span> a.y &gt; b.y;  </span><br><span class="line">    <span class="keyword">return</span> a.x &gt; b.x;   </span><br><span class="line">}  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);<span class="comment">//测试数据个数</span></span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        priority_queue&lt;Stone&gt;que;     <span class="comment">//定义一个Stone成员的优先//队列</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        Stone tmp;</span><br><span class="line">        <span class="keyword">for</span>(i =<span class="number">0</span>;i&lt; n ; i++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;tmp.x,&amp;tmp.y);</span><br><span class="line">            que.push(tmp);<span class="comment">//入队</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> sum =<span class="number">1</span>;<span class="comment">//判断碰到的是第几个石头的标记</span></span><br><span class="line">        <span class="keyword">while</span>(!que.empty())<span class="comment">//当队列为空就跳出循环，也就是说再//向前就没有石头可以遇到</span></span><br><span class="line">        {</span><br><span class="line">        tmp = que.top();<span class="comment">//去队顶元素，也就是在后面的所有//石头中第一个碰到的石头</span></span><br><span class="line">            que.pop();<span class="comment">//出对</span></span><br><span class="line">            <span class="keyword">if</span>(sum%<span class="number">2</span>)</span><br><span class="line">            {<span class="comment">//如果是奇数号石头，则处理，否则不做处理</span></span><br><span class="line">                tmp . x+=tmp.y;<span class="comment">//则向前扔y单位长度</span></span><br><span class="line">                que.push(tmp);<span class="comment">//扔出去的石头入队</span></span><br><span class="line">            }</span><br><span class="line">            sum++;<span class="comment">//石头计数+1</span></span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tmp.x);<span class="comment">//打印最后一块石头的坐标就是所求//的最远距离</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意是路上有很多石头，当你遇到奇数序列的石头就把他向前仍，偶数的不动他，如果两个石头一起，先考虑可以仍的比较近的石头仍也就是比较大的石头，这样一直下去，直到前面所有的石头都不可以仍了为止，求最远的石头距离起点多少题目这题用优先队列非常方便.&lt;/p&gt;
&lt;p&gt;分析；可以定义
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="优先队列" scheme="https://acshiryu.github.io/tags/priority-queue/"/>
    
  </entry>
  
  <entry>
    <title>hdu2036和hdu2108  叉乘的运用</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-2036-reform-the-spring-breeze-2108-shape-of-hdu.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-2036-reform-the-spring-breeze-2108-shape-of-hdu.html</id>
    <published>2018-09-16T02:44:00.000Z</published>
    <updated>2018-09-16T02:33:10.939Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2036" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=2036</a></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2108" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=2108</a></p><p>这两道题目分别是判断一个多边形是否是凸多边形，求一个多边形的面积</p><p>题意很简单，题目也不难，算是最基础的计算几何了</p><p>参考资料：计算几何基础</p><p>参考代码：</p><p>hdu2036 by ACShiryu<br><figure class="highlight cpp"><figcaption><span>hdu2036 改革春风吹满地</span><a href="/assets/code/hdu/2036.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x ;</span><br><span class="line">    <span class="keyword">int</span> y ;</span><br><span class="line">}po[<span class="number">555555</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cross</span><span class="params">(ac a , ac b ,ac c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (b.x-a.x)*(c.y-b.y)-(b.y-a.y)*(c.x-b.x);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">convex</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">        <span class="keyword">if</span>(cross(po[i],po[(i+<span class="number">1</span>)%n],po[(i+<span class="number">2</span>)%n])&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n , n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; n ; i ++ )</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; po[i].x &gt;&gt; po[i].y;</span><br><span class="line">        <span class="keyword">if</span> (convex(n))</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"convex"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"concave"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><p>hdu2108 by ACShiryu<br><figure class="highlight cpp"><figcaption><span>hdu2108 Shape of HDU</span><a href="/assets/code/hdu/2108.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac</span> {</span></span><br><span class="line">    <span class="keyword">int</span> x ;</span><br><span class="line">    <span class="keyword">int</span> y ;</span><br><span class="line">}po[<span class="number">555555</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cross</span><span class="params">(ac a , ac b ,ac c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (b.x-a.x)*(c.y-b.y)-(b.y-a.y)*(c.x-b.x);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">convex</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">        <span class="keyword">if</span>(cross(po[i],po[(i+<span class="number">1</span>)%n],po[(i+<span class="number">2</span>)%n])&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n , n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; n ; i ++ )</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; po[i].x &gt;&gt; po[i].y;</span><br><span class="line">        <span class="keyword">if</span> (convex(n))</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"convex"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"concave"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址：&lt;br&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=2036&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pi
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="计算几何" scheme="https://acshiryu.github.io/tags/computation-geometry/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu2222 Keywords Search 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-2222-keywords-search.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-2222-keywords-search.html</id>
    <published>2018-09-16T02:43:00.000Z</published>
    <updated>2018-09-16T02:32:56.186Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2222" title="Keywords Search" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=2222</a></p><p>AC自动机，直接套模版水过，模版地址：<a href="/archives/template/cpp-template-ac-automation.html" title="AC自动机简单模版">AC自动机简单模版</a></p><figure class="highlight cpp"><figcaption><span>hdu2222 Keywords Search</span><a href="/assets/code/hdu/2222.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kind = <span class="number">26</span>; <span class="comment">//字符种类 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>{</span> <span class="comment">//Tire树节点结构 </span></span><br><span class="line">    node *fail; <span class="comment">//失败指针 </span></span><br><span class="line">    node *next[kind]; <span class="comment">//Tire每个节点的子节点 </span></span><br><span class="line">    <span class="keyword">int</span> count; <span class="comment">//已当前节点为单词结尾的个数 </span></span><br><span class="line">    node(){ <span class="comment">//构造函数 </span></span><br><span class="line">        fail = <span class="literal">NULL</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(next, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(next));</span><br><span class="line">    }</span><br><span class="line">}*que[<span class="number">1000000</span>]; <span class="comment">//队列 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key_word[<span class="number">100</span>]; <span class="comment">//目的串 </span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10000000</span>]; <span class="comment">//模式串 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> front, rear; <span class="comment">//队列的头尾 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *str, node *root)</span></span>{ <span class="comment">//把单词加入Tire中 </span></span><br><span class="line">    node *p = root;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(str[i]){ <span class="comment">//将每个字母加入到Tire树中 </span></span><br><span class="line">        index = str[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next[index] == <span class="literal">NULL</span>){</span><br><span class="line">            p-&gt;next[index] = <span class="keyword">new</span> node();</span><br><span class="line">        }</span><br><span class="line">        p = p-&gt;next[index];</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    p-&gt;count++; <span class="comment">//在单词的最后一个节点count++，代表一个单词</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设这个节点上的字母为C，沿着他父亲的失败指针走，直到走到一个节点，他的儿子中也有字母为C的节点。然后把当前节点的失败指针指向那个字母也为C的儿子。如果一直走到了root都没找到，那就把失败指针指向root。*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_ac_automation</span><span class="params">(node *root)</span></span>{ <span class="comment">//构造失败指针 </span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    root-&gt;fail = <span class="literal">NULL</span>;</span><br><span class="line">    que[rear++] = root;</span><br><span class="line">    <span class="keyword">while</span>(front &lt; rear){<span class="comment">//队列 </span></span><br><span class="line">        node *temp = que[front];</span><br><span class="line">        node *p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i){</span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;next[i] != <span class="literal">NULL</span>){</span><br><span class="line">                <span class="keyword">if</span>(temp == root){</span><br><span class="line">                    temp-&gt;next[i]-&gt;fail = root;</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    p = temp-&gt;fail;</span><br><span class="line">                    <span class="keyword">while</span>(p != <span class="literal">NULL</span>){</span><br><span class="line">                        <span class="keyword">if</span>(p-&gt;next[i] != <span class="literal">NULL</span>){</span><br><span class="line">                            temp-&gt;next[i]-&gt;fail = p-&gt;next[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        }</span><br><span class="line">                        p = p-&gt;fail;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">                        temp-&gt;next[i]-&gt;fail = root;</span><br><span class="line">                }</span><br><span class="line">                que[rear++] = temp-&gt;next[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        front++;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据具体题目，重写查询方法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(node *root, <span class="keyword">char</span> *str)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    node *p = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(str[i]){</span><br><span class="line">        index = str[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next[index] == <span class="literal">NULL</span> &amp;&amp; p != root){</span><br><span class="line">            p = p-&gt;fail;</span><br><span class="line">        }</span><br><span class="line">        p = p-&gt;next[index];</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>) p = root;</span><br><span class="line">        node *temp = p;</span><br><span class="line">        <span class="keyword">while</span>(temp != root &amp;&amp; temp-&gt;count != <span class="number">-1</span>){</span><br><span class="line">            cnt += temp-&gt;count;</span><br><span class="line">            temp-&gt;count = <span class="number">-1</span>;</span><br><span class="line">            temp = temp-&gt;fail;</span><br><span class="line">        }</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用举例，hdu2222</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        node *root=<span class="keyword">new</span> node;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,key_word);</span><br><span class="line">            insert(key_word,root);</span><br><span class="line">        }</span><br><span class="line">        build_ac_automation(root); </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(root,str));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=2222&quot; title=&quot;Keywords Search&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.c
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="AC自动机" scheme="https://acshiryu.github.io/tags/ac-automation/"/>
    
      <category term="kmp" scheme="https://acshiryu.github.io/tags/kmp/"/>
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu2955 Robberies 教你怎样抢银行划算！</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-2955-robberies.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-2955-robberies.html</id>
    <published>2018-09-16T02:42:00.000Z</published>
    <updated>2018-09-16T02:32:29.345Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意是有n家银行，每家银行可抢mi的金钱，被抓的分险是pi，当你的分险和大于p时就会被抓，求你在不被抓的前提下怎样才能抢到最多的钱,这题，就是01背包的小数形式，我们可以用pi表示抢到i金币时的最大逃脱率</p><figure class="highlight cpp"><figcaption><span>hdu2955 Robberies</span><a href="/assets/code/hdu/2955.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> <span class="keyword">double</span> q[<span class="number">105</span>];</span><br><span class="line"> <span class="keyword">int</span> m[<span class="number">105</span>];</span><br><span class="line"> <span class="keyword">double</span> dp[<span class="number">10005</span>];</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line">     <span class="keyword">int</span> t ;</span><br><span class="line">     <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">     <span class="keyword">while</span> ( t -- )</span><br><span class="line">     {</span><br><span class="line">         <span class="keyword">double</span> p ;</span><br><span class="line">         <span class="keyword">int</span> n ;</span><br><span class="line">         <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; n ;</span><br><span class="line">         <span class="keyword">int</span> i , j ;</span><br><span class="line">         <span class="keyword">int</span> sum = <span class="number">0</span> ;</span><br><span class="line">         <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">             <span class="built_in">cin</span> &gt;&gt; m[i] &gt;&gt; q[i] , sum += m[i] ;</span><br><span class="line">         <span class="built_in">memset</span> ( dp , <span class="number">0</span> , <span class="keyword">sizeof</span> ( dp ) ) ;</span><br><span class="line">         dp[<span class="number">0</span>] = <span class="number">1.0</span> ;</span><br><span class="line">         <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">         {</span><br><span class="line">             <span class="keyword">for</span> ( j = sum ; j &gt;= m[i] ; j -- )</span><br><span class="line">             {</span><br><span class="line">                 dp[j] = max ( dp [j] , dp [j-m[i]] * ( <span class="number">1</span> - q[i] ) ) ;</span><br><span class="line">             }</span><br><span class="line">         }</span><br><span class="line">         <span class="keyword">for</span> ( j = sum ;  j &gt;= <span class="number">0</span> ; j -- )</span><br><span class="line">             <span class="keyword">if</span> ( dp [j] &gt;= <span class="number">1</span> - p )</span><br><span class="line">             {</span><br><span class="line">                 <span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             }</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> }</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意是有n家银行，每家银行可抢mi的金钱，被抓的分险是pi，当你的分险和大于p时就会被抓，求你在不被抓的前提下怎样才能抢到最多的钱,这题，就是01背包的小数形式，我们可以用pi表示抢到i金币时的最大逃脱率&lt;/p&gt;
&lt;figure class=&quot;highlight cpp
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="背包问题" scheme="https://acshiryu.github.io/tags/backpack-problem/"/>
    
  </entry>
  
  <entry>
    <title>hdu2971 Tower 矩阵快速幂</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-2971-tower.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-2971-tower.html</id>
    <published>2018-09-16T02:41:00.000Z</published>
    <updated>2018-09-16T02:32:15.008Z</updated>
    
    <content type="html"><![CDATA[<p>从题意中可得出两个递推关系：<br><img src="/assets/image/hdu/2971-1.png" alt=""></p><p>要求Sn，显然这题是矩阵快速幂的问题，所以我们首先要将两个递推公式合并成一个只含有Sn递推的公式</p><p>显然，第二个式子含有平方项，所以，首先我们要将第一式平方并带入Sn中<br><img src="/assets/image/hdu/2971-2.png" alt=""></p><p>这样就可以运用矩阵快速幂求Sn了</p><figure class="highlight cpp"><figcaption><span>hdu2971 Tower</span><a href="/assets/code/hdu/2971.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">两个细节问题</span></span><br><span class="line"><span class="comment">1.1.因为式子中含有负数，故取模时要</span></span><br><span class="line"><span class="comment">while(k&lt;0)  </span></span><br><span class="line"><span class="comment">k+=mod;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.矩阵乘法的优化，矩阵乘法时由于多次用到取模，而取模的速度很慢，</span></span><br><span class="line"><span class="comment">所以要充分利用64位整数的优点，等到算完后再进行取模运算</span></span><br><span class="line"><span class="comment">c[i][j]=0;</span></span><br><span class="line"><span class="comment">    for(k=0;k&lt;mat_n;k++)</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        c[i][j]+=a[i][k]*b[k][j];</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">c[i][j]%=mod;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mat_n=<span class="number">4</span>;<span class="comment">//矩阵的维度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_mul</span><span class="params">(__int64 a[][mat_n],__int64 b[][mat_n],__int64 mod)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//a=a*b</span></span><br><span class="line">    __int64 c[mat_n][mat_n];</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;mat_n;j++)</span><br><span class="line">        {</span><br><span class="line">            c[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;mat_n;k++)</span><br><span class="line">            {</span><br><span class="line">                 c[i][j]+=a[i][k]*b[k][j];</span><br><span class="line">            }</span><br><span class="line">c[i][j]%=mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;mat_n;j++)</span><br><span class="line">            a[i][j]=c[i][j];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_power</span><span class="params">(__int64 s[][mat_n],__int64 k,__int64 mod)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">// return s[n][n]^k%mod</span></span><br><span class="line">    __int64 ans[mat_n][mat_n];</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line">        ans[i][i]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(k&amp;gt;<span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            matrix_mul(ans,s,mod);</span><br><span class="line">        }</span><br><span class="line">        k=k/<span class="number">2</span>;</span><br><span class="line">        matrix_mul(s,s,mod);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;mat_n;j++)</span><br><span class="line">            s[i][j]=ans[i][j];</span><br><span class="line">}</span><br><span class="line">__int64 a[<span class="number">5</span>];</span><br><span class="line">__int64 s[<span class="number">5</span>];</span><br><span class="line">__<span class="function">int64 <span class="title">abs</span><span class="params">(__int64 k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(k&amp;gt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line"><span class="keyword">return</span> -k;</span><br><span class="line">}</span><br><span class="line">__<span class="function">int64 <span class="title">modfun</span><span class="params">(__int64 k,__int64 mod)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(k&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">k+=<span class="built_in">abs</span>(k/mod)*mod;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(k&lt;<span class="number">0</span>)</span><br><span class="line">k+=mod;</span><br><span class="line"><span class="keyword">return</span> k%mod;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line">__int64 t,n,mod;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span>,&amp;t,&amp;n,&amp;mod);</span><br><span class="line">a[<span class="number">1</span>]=s[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>]=t%mod;</span><br><span class="line">s[<span class="number">2</span>]=(t*t+<span class="number">1</span>)%mod;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">{</span><br><span class="line">a[i]=modfun(<span class="number">2</span>*t*a[i<span class="number">-1</span>]-a[i<span class="number">-2</span>],mod);</span><br><span class="line">s[i]=(s[i<span class="number">-1</span>]+(a[i]*a[i]))%mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//for(i=1;i&lt;=4;i++)</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i]&lt;&lt;' '&lt;&lt;s[i]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">4</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,s[n]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">__int64 mat[mat_n][mat_n];</span><br><span class="line"><span class="built_in">memset</span>(mat,<span class="number">0</span>,<span class="keyword">sizeof</span>(mat));</span><br><span class="line"></span><br><span class="line">mat[<span class="number">0</span>][<span class="number">0</span>]=modfun(<span class="number">4</span>*((t*t)),mod);</span><br><span class="line">mat[<span class="number">0</span>][<span class="number">1</span>]=modfun(<span class="number">2</span><span class="number">-8</span>*((t*t)),mod);</span><br><span class="line">mat[<span class="number">0</span>][<span class="number">2</span>]=mat[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">mat[<span class="number">0</span>][<span class="number">3</span>]=mod<span class="number">-1</span>;</span><br><span class="line">mat[<span class="number">1</span>][<span class="number">0</span>]=mat[<span class="number">2</span>][<span class="number">1</span>]=mat[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">matrix_power(mat,n<span class="number">-4</span>,mod);</span><br><span class="line"></span><br><span class="line">__int64 ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">{</span><br><span class="line">ans=(ans+(mat[<span class="number">0</span>][i]*s[<span class="number">4</span>-i]));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64u\n"</span>,ans%mod);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从题意中可得出两个递推关系：&lt;br&gt;&lt;img src=&quot;/assets/image/hdu/2971-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;要求Sn，显然这题是矩阵快速幂的问题，所以我们首先要将两个递推公式合并成一个只含有Sn递推的公式&lt;/p&gt;
&lt;p&gt;显然，第二个式子
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="递归" scheme="https://acshiryu.github.io/tags/recursive/"/>
    
      <category term="矩阵" scheme="https://acshiryu.github.io/tags/matrix/"/>
    
      <category term="快速幂" scheme="https://acshiryu.github.io/tags/fast-power/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu4161 Iterated Difference 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4161-iterated-difference.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4161-iterated-difference.html</id>
    <published>2018-09-16T02:40:00.000Z</published>
    <updated>2018-09-16T02:29:03.939Z</updated>
    
    <content type="html"><![CDATA[<p>原题地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4161" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4161</a></p><p>题目大意就是给出一段序列，然后生成一段新的序列，使新序列的第i个元素是原序列第i+1个元素与第i个元素差的绝对值(最后一个是第一个与最后一个差的绝对值),问如此经过多少步，可以得到一个元素全部一样的序列，当然，当要的步骤大于1000时我们认为不可能得到这样的序列，输出not attained</p><p>解决办法很简单，就是枚举循环操作，对于每次生成的序列进行判断是否满足，详细看代码</p><figure class="highlight cpp"><figcaption><span>hdu4161 Iterated Difference</span><a href="/assets/code/hdu/4161.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e3</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equal</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a[i]!=a[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;inf;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!equal(a,n))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> tmp=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">{</span><br><span class="line">a[j]=<span class="built_in">abs</span>(a[j]-a[j+<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line">a[n<span class="number">-1</span>]=<span class="built_in">abs</span>(a[n<span class="number">-1</span>]-tmp);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d iterations\n"</span>,cas,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i==inf)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: not attained\n"</span>,cas);</span><br><span class="line">cas++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原题地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4161&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=41
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="枚举" scheme="https://acshiryu.github.io/tags/enumerate/"/>
    
  </entry>
  
  <entry>
    <title>hdu4162 Shape Number 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4162-shape-number.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4162-shape-number.html</id>
    <published>2018-09-16T02:39:00.000Z</published>
    <updated>2018-09-16T02:28:52.628Z</updated>
    
    <content type="html"><![CDATA[<p>原题地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4162" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4162</a></p><p>题目大意就是定义出方向如原题描述，单由于起点和旋转的不确定性，对于同一幅图有多种描述方法，为了统一，定义一种新的描述</p><ol><li>以旋转方向为基础，每逆时针旋转45度，描述+1（也可以是之前描述的相邻位想减，若小于0则+8）</li><li>然后对所有转换后的描述中选择一个值最小的描述作为他的唯一描述</li></ol><p>第一步转换很简单，和上一题类似，详细看<a href="/archives/acm/hdu-4161-iterated-difference.html" title="hdu4161 Iterated Difference 解题报告">hdu4161 Iterated Difference 解题报告</a>，但对于第二步，如果直接枚举每种情况，绝对超时。多亏ACM群的taozifish帮忙，原来是要用后缀数组做，不会，搜模板：串的最小表示模板，然后水过。以后有时间就把这个空缺补上，详细看代码</p><figure class="highlight cpp"><figcaption><span>hdu4162 Shape Number</span><a href="/assets/code/hdu/4162.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">300005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MinimumRepresentation</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> l)</span>  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>, k = <span class="number">0</span>, t;  </span><br><span class="line">    <span class="keyword">while</span>(i &lt; l &amp;&amp; j &lt; l &amp;&amp; k &lt; l) {  </span><br><span class="line">        t = s[(i + k) &gt;= l ? i + k - l : i + k] - s[(j + k) &gt;= l ? j + k - l : j + k];  </span><br><span class="line">        <span class="keyword">if</span>(!t) k++;  </span><br><span class="line">        <span class="keyword">else</span>{  </span><br><span class="line">            <span class="keyword">if</span>(t &gt; <span class="number">0</span>) i = i + k + <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">else</span> j = j + k + <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">if</span>(i == j) ++ j;  </span><br><span class="line">            k = <span class="number">0</span>;  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> (i &lt; j ? i : j);  </span><br><span class="line">}  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> t=s[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="built_in">strlen</span>(s);</span><br><span class="line">s[i]=t;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;s[i+<span class="number">1</span>];i++)</span><br><span class="line">{</span><br><span class="line">s[i]=s[i+<span class="number">1</span>]-s[i]+<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i]&lt;<span class="string">'0'</span>)</span><br><span class="line">s[i]+=<span class="number">8</span>;</span><br><span class="line">}</span><br><span class="line">s[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> k=MinimumRepresentation(s,n);</span><br><span class="line"><span class="keyword">for</span>(i=k;i&lt;k+n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s[i%n];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原题地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4162&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=41
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="枚举" scheme="https://acshiryu.github.io/tags/enumerate/"/>
    
      <category term="后缀数组" scheme="https://acshiryu.github.io/tags/suffix-array/"/>
    
      <category term="旋转" scheme="https://acshiryu.github.io/tags/rotating/"/>
    
  </entry>
  
  <entry>
    <title>hdu4163 Stock Prices 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4163-stock-prices.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4163-stock-prices.html</id>
    <published>2018-09-16T02:38:00.000Z</published>
    <updated>2018-09-16T02:28:09.244Z</updated>
    
    <content type="html"><![CDATA[<p>原题地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4163" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4163</a></p><p>这题就是一个排序题，比较纠结。题目大意就是就是给出n个数，每个数对应着唯一的编号，就是他所处的序号，然后求出前k1小的元素对应的位置，升序输出，如果有相同的元素，选择和最小的，求出前k2大的元素对应的位置，升序输出，如果有相同的元素，选择和最大的。实际上就是一个稳定排序问题，可以用STL里的stable_sort，后续我会发一些关于STL模板库常用算法。详情看代码</p><figure class="highlight cpp"><figcaption><span>hdu4163 Stock Prices</span><a href="/assets/code/hdu/4163.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">}a[<span class="number">1000006</span>],ans[<span class="number">1000006</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a.num&lt;b.num;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpto</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a.to&lt;b.to;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n,s,t;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;s,&amp;t),n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].num);</span><br><span class="line">a[i].to=i;</span><br><span class="line">}</span><br><span class="line">stable_sort(a,a+n,cmp);<span class="comment">//stable_sort 稳定排序</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d\n"</span>,cas++);</span><br><span class="line"><span class="built_in">memcpy</span>(ans,a,s*<span class="keyword">sizeof</span>(ans[<span class="number">0</span>]));</span><br><span class="line">stable_sort(ans,ans+s,cmpto);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i].to+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(ans,a+n-t,t*<span class="keyword">sizeof</span>(ans[<span class="number">0</span>]));</span><br><span class="line">stable_sort(ans,ans+t,cmpto);</span><br><span class="line"><span class="keyword">for</span>(i=t<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i].to+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原题地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4163&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=41
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="排序" scheme="https://acshiryu.github.io/tags/sort/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu4165 Pills 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4165-pills.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4165-pills.html</id>
    <published>2018-09-16T02:37:00.000Z</published>
    <updated>2018-09-16T02:25:26.037Z</updated>
    
    <content type="html"><![CDATA[<p>原题地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4161" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4161</a></p><p>题目大意是什么意思，还不是很明白，好像是每次从一个瓶子里取药，可以取全部，也可以取一半，如果取到的药是完整的，就把它分成两半，吃掉其中的一半，另一半重新放入瓶中，如果取到半粒药，则直接吃掉，现在有n粒药，要2n天内吃完，问有多少种吃药方法</p><p>不知道题目是不是理解对的，看了很久无想法，然后，laputa大神发消息过来说他A了，虽然他也没看懂题，Orz，原来这题是一个裸的卡特兰数（也译为卡塔兰数），关于该数不做过多介绍，详细可以看<a href="http://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0" title="卡塔兰数 - 维基百科" target="_blank" rel="noopener">维基百科</a>,还说自己是搞数学的，给了这么多的测试数据都没看出猫腻，唉！然后向他要了模板，直接套用，AC了，不愧是大神！Orz！</p><figure class="highlight cpp"><figcaption><span>hdu4165 Pills</span><a href="/assets/code/hdu/4165.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BASE 10000</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> Max,<span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,<span class="built_in">array</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = Max<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">array</span> += b * a[i];</span><br><span class="line">a[i] = <span class="built_in">array</span> % BASE;</span><br><span class="line"><span class="built_in">array</span> /= BASE;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> Max, <span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i, div = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Max; i++)</span><br><span class="line">{</span><br><span class="line">div = div * BASE + a[i];</span><br><span class="line">a[i] = div / b;</span><br><span class="line">div %= b;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>][MAX],i, n;</span><br><span class="line"><span class="built_in">memset</span>(a[<span class="number">1</span>],<span class="number">0</span>,MAX*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>, a[<span class="number">1</span>][MAX<span class="number">-1</span>] = <span class="number">1</span>; i &lt; <span class="number">101</span>; i++) </span><br><span class="line">        {</span><br><span class="line"><span class="built_in">memcpy</span>(a[i], a[i<span class="number">-1</span>], MAX * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">multiply(a[i], MAX, <span class="number">4</span> * i - <span class="number">2</span>);</span><br><span class="line">divide(a[i], MAX, i + <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX &amp;&amp; a[n][i] == <span class="number">0</span>; i++);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[n][i++];</span><br><span class="line"><span class="keyword">for</span> (; i &lt; MAX; i++)   </span><br><span class="line">               {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%04d"</span>,a[n][i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原题地址：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4161&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=41
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="递归" scheme="https://acshiryu.github.io/tags/recursive/"/>
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="卡特兰数" scheme="https://acshiryu.github.io/tags/catalan-number/"/>
    
  </entry>
  
  <entry>
    <title>hdu4291 A Short problem 矩阵快速幂 成都区预赛的一题</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4291-a-short-problem.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4291-a-short-problem.html</id>
    <published>2018-09-16T02:36:00.000Z</published>
    <updated>2018-09-16T02:25:13.947Z</updated>
    
    <content type="html"><![CDATA[<p>看到这题就觉得是矩阵快速幂，但是g(n)里面还有g(n)不好处理。其实应该想到，既然有取余，就一定有循环节。再做的时候想到会有循环节了，但想到是对1e9+7取余，则循环节最大就可能是10^18，再加上爆了10^7范围内的数据没发现循环节，就没想了。看来有时候不是题目做不出来，而是没有往下面想的勇气</p><p>既然对1e9+7取余有循环节，假设是k1，则我们就有g(n)%1000000007=g(n%k1)%1000000007,则就要求g(g(g(n)))就相当于求g(g(g(n))%k1)，而求g(g(n))%k1，同理，可爆出g(n)对k1取余的循环节k2，则题目就暂时变成了求g(g(g(n%k2))%k1)，然后就可以用矩阵快速幂求解（程序爆出k1=222222224，k2=183120）</p><figure class="highlight cpp"><figcaption><span>hdu4291 A Short problem</span><a href="/assets/code/hdu/4291.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod[<span class="number">3</span>]={<span class="number">1000000007</span>,<span class="number">222222224</span>,<span class="number">183120</span>};</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> __int64 uint64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mat_n=<span class="number">2</span>;<span class="comment">//矩阵的维度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_mul</span><span class="params">(uint64 a[][mat_n],uint64 b[][mat_n],uint64 mod)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//a=a*b</span></span><br><span class="line">uint64 c[mat_n][mat_n];</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;mat_n;j++)</span><br><span class="line">{</span><br><span class="line">c[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;mat_n;k++)</span><br><span class="line">{</span><br><span class="line">c[i][j]=(c[i][j]+(a[i][k]*b[k][j])%mod)%mod;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;mat_n;j++)</span><br><span class="line">a[i][j]=c[i][j];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrix_power</span><span class="params">(uint64 s[][mat_n],uint64 k,uint64 mod)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">// return s[n][n]^k%mod</span></span><br><span class="line">uint64 ans[mat_n][mat_n];</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line">ans[i][i]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">matrix_mul(ans,s,mod);</span><br><span class="line">}</span><br><span class="line">k=k/<span class="number">2</span>;</span><br><span class="line">matrix_mul(s,s,mod);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mat_n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;mat_n;j++)</span><br><span class="line">s[i][j]=ans[i][j];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">__<span class="function">int64 <span class="title">fun</span><span class="params">(__int64 n,<span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">uint64 s[mat_n][mat_n];</span><br><span class="line">s[<span class="number">0</span>][<span class="number">1</span>]=s[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">3</span>;</span><br><span class="line">s[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">matrix_power(s,n,mod);</span><br><span class="line"><span class="keyword">return</span> s[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">__int64 n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;n))</span><br><span class="line">{</span><br><span class="line">__int64 t1=fun(n,mod[<span class="number">2</span>]);</span><br><span class="line">__int64 t2=fun(t1,mod[<span class="number">1</span>]);</span><br><span class="line">__int64 t3=fun(t2,mod[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,t3);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看到这题就觉得是矩阵快速幂，但是g(n)里面还有g(n)不好处理。其实应该想到，既然有取余，就一定有循环节。再做的时候想到会有循环节了，但想到是对1e9+7取余，则循环节最大就可能是10^18，再加上爆了10^7范围内的数据没发现循环节，就没想了。看来有时候不是题目做不出来
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="矩阵" scheme="https://acshiryu.github.io/tags/matrix/"/>
    
      <category term="快速幂" scheme="https://acshiryu.github.io/tags/fast-power/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu4300 Clairewd’s message 多校第一场</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4300-clairewds-message.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4300-clairewds-message.html</id>
    <published>2018-09-16T02:35:00.000Z</published>
    <updated>2018-09-16T02:24:56.315Z</updated>
    
    <content type="html"><![CDATA[<p>简单KMP，下面是官方题解</p><blockquote><p>这道题问的就是将1个串如何变为stringA+stringB的形式，使得stringA是stringB经过映射得到相同的串。映射那步其实没有什么价值，假设str为原串s经过映射后得到的串，我们可以以str为模式串，以s为原串做一次扩展KMP，得到extend数组，extend[i]表示原串以第i开始与模式串的前缀的最长匹配。经过O(n)的枚举，我们可以得到,若extend[i]+i=len且i&gt;=extend[i]时，表示stringB即为该点之前的串，stringA即为该点之前的str串，最后输出即可。</p></blockquote><p>我的代码<br><figure class="highlight cpp"><figcaption><span>hdu4300 Clairewd’s message</span><a href="/assets/code/hdu/4300.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> q[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> inter[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">char</span> cry[<span class="number">50010</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s,inter);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;s[i];i++)</span><br><span class="line">        {</span><br><span class="line">            q[s[i]-<span class="string">'a'</span>]=i+<span class="string">'a'</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        zero(cry);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(inter);</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c%c\n"</span>,inter[<span class="number">0</span>],q[inter[<span class="number">0</span>]-<span class="string">'a'</span>]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(i=(len<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>;inter[i];i++)</span><br><span class="line">            cry[i<span class="number">-1</span>-(len<span class="number">-1</span>)/<span class="number">2</span>]=s[inter[i]-<span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line">        p[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        j=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;inter[i];i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;inter[j+<span class="number">1</span>]!=inter[i])</span><br><span class="line">                j=p[j];</span><br><span class="line">            <span class="keyword">if</span>(inter[j+<span class="number">1</span>]==inter[i])</span><br><span class="line">                j++;</span><br><span class="line">            p[i]=j;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        j=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        t=<span class="built_in">strlen</span>(cry);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;cry&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;cry[i];i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;inter[j+<span class="number">1</span>]!=cry[i])</span><br><span class="line">                j=p[j];</span><br><span class="line">            <span class="keyword">if</span>(inter[j+<span class="number">1</span>]==cry[i])</span><br><span class="line">            {</span><br><span class="line">                j++;</span><br><span class="line">            }</span><br><span class="line">            cnt[i]=j;</span><br><span class="line">            <span class="keyword">if</span>(j==t)</span><br><span class="line">                j=p[j];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len-cnt[t<span class="number">-1</span>]<span class="number">-1</span>;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,inter[i]);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len-cnt[t<span class="number">-1</span>]<span class="number">-1</span>;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,q[inter[i]-<span class="string">'a'</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单KMP，下面是官方题解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这道题问的就是将1个串如何变为stringA+stringB的形式，使得stringA是stringB经过映射得到相同的串。映射那步其实没有什么价值，假设str为原串s经过映射后得到的串，我们可以以str为
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="kmp" scheme="https://acshiryu.github.io/tags/kmp/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu4301 Divide Chocolate 动态规划解题报告（多校1）</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4301-divide-chocolate.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4301-divide-chocolate.html</id>
    <published>2018-09-16T02:34:00.000Z</published>
    <updated>2018-09-16T02:24:42.218Z</updated>
    
    <content type="html"><![CDATA[<p>下面是官方的解题报告</p><p>题意：</p><p>给定一个$2n$的矩形，求把这个矩形分割为$k$部分的方法，且对称的切割方法视为不同，输出时模上$100000007$。</p><p>($1 \leq n \leq 1000,1 \leq k \leq 2n$)</p><p>解法：</p><p>看到这个题目，很容易想到DP。</p><p>状态表示 </p><blockquote><p>$f_{i0j}$ :前$i$行已经出现了$j$部分且第$i$行的两个格子属于同一部分的方法数<br>$f_{i1j}$ :前$i$行已经出现了$j$部分且第$i$行的两个格子属于不同部分的方法数</p></blockquote><p>初始条件 </p><blockquote><p>$f_{101} = f_{112} = 1$</p></blockquote><p>状态转移,下面使用$I$表示$i+1$,$J$表示$j+1$,$jj$表示$j+2$</p><blockquote><p>$f_{I0j}=f_{I0j}+f_{i0j}+2f_{i1j}$<br>$f_{I0J}=f_{I0J}+f_{i0j}+f_{i1j}$<br>$f_{I1j}=f_{I1j}+f_{i1j}$<br>$f_{I1J}=f_{I1J}+2f_{i0j}+2f_{i1j}$<br>$f_{I1jj}=f_{I1jj}+f_{i0j}+f_{i1j}$</p></blockquote><p>共12种不同的状态转移（见下图）</p><p><img src="/assets/image/hdu/4301.jpg" alt=""></p><p>我的代码<br><figure class="highlight cpp"><figcaption><span>hdu4301 Divide Chocolate</span><a href="/assets/code/hdu/4301.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">1005</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">100000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n,k,i,j;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        zero(dp);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            dp[<span class="number">0</span>][i][<span class="number">1</span>]=<span class="number">1</span>,dp[<span class="number">1</span>][i][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=<span class="number">2</span>*i&amp;&amp;j&lt;=k;j++)</span><br><span class="line">            {</span><br><span class="line">                dp[<span class="number">0</span>][i][j]=( dp[<span class="number">0</span>][i<span class="number">-1</span>][j<span class="number">-1</span>] + dp[<span class="number">0</span>][i<span class="number">-1</span>][j] + dp[<span class="number">1</span>][i<span class="number">-1</span>][j<span class="number">-1</span>] + dp[<span class="number">1</span>][i<span class="number">-1</span>][j]*<span class="number">2</span> ) % mod;</span><br><span class="line">                dp[<span class="number">1</span>][i][j]=( dp[<span class="number">0</span>][i<span class="number">-1</span>][j<span class="number">-1</span>]*<span class="number">2</span> +dp[<span class="number">0</span>][i<span class="number">-1</span>][j<span class="number">-2</span>]+ dp[<span class="number">1</span>][i<span class="number">-1</span>][j<span class="number">-1</span>]*<span class="number">2</span> + dp[<span class="number">1</span>][i<span class="number">-1</span>][j] + dp[<span class="number">1</span>][i<span class="number">-1</span>][j<span class="number">-2</span>]) % mod;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(dp[<span class="number">0</span>][n][k]+dp[<span class="number">1</span>][n][k])%mod);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面是官方的解题报告&lt;/p&gt;
&lt;p&gt;题意：&lt;/p&gt;
&lt;p&gt;给定一个$2n$的矩形，求把这个矩形分割为$k$部分的方法，且对称的切割方法视为不同，输出时模上$100000007$。&lt;/p&gt;
&lt;p&gt;($1 \leq n \leq 1000,1 \leq k \leq 2n$)&lt;
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu4308 Saving Princess claire 搜索解题报告（多校1）</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4308-saving-princess-claire.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4308-saving-princess-claire.html</id>
    <published>2018-09-16T02:33:00.000Z</published>
    <updated>2018-09-16T02:23:18.782Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是从Y走到C经过*最少是多少，其中#不可走，P可传送至任何一个为P的地方，这题可以广搜，hdu给出的是最短路，下面是官方的解题报告</p><blockquote><p>给出的地图中，Y为起点，C为终点，#点不能通过，可直接忽略。所有的P为互通的传送门，故可将所以的P看作同一个点。每个能通过的点可以向上下左右四个方向走，如果对应的方向可以通过，则连边，若要走到的点是*，则边权为通过的费用，否则边权为0。<br>连边后求Y到C的最短路即可。</p></blockquote><p>我的代码<br><figure class="highlight cpp"><figcaption><span>hdu4308 Saving Princess claire</span><a href="/assets/code/hdu/4308.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> mat[<span class="number">5005</span>][<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">bool</span> hash[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fx[][<span class="number">2</span>]={</span><br><span class="line">{<span class="number">-1</span>,<span class="number">0</span>},</span><br><span class="line">{<span class="number">0</span>,<span class="number">-1</span>},</span><br><span class="line">{<span class="number">1</span>,<span class="number">0</span>},</span><br><span class="line">{<span class="number">0</span>,<span class="number">1</span>}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">loc</span>{</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">}p[<span class="number">505</span>],start,end;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(prog a,prog b)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> a.cnt&gt;b.cnt;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p_num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> r,c,cost;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;r,&amp;c,&amp;cost))</span><br><span class="line">    {</span><br><span class="line">        priority_queue&lt;prog&gt;que;</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        p_num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mat[i]);</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;c;j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j]==<span class="string">'P'</span>)</span><br><span class="line">                    p[p_num].x=i,p[p_num++].y=j;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j]==<span class="string">'Y'</span>)</span><br><span class="line">                    start.x=i,start.y=j;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j]==<span class="string">'C'</span>)</span><br><span class="line">                    end.x=i,end.y=j;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        prog a;</span><br><span class="line">        a.cnt=<span class="number">0</span>;</span><br><span class="line">        a.x=start.x;</span><br><span class="line">        a.y=start.y;</span><br><span class="line">        que.push(a);</span><br><span class="line">        zero(hash);</span><br><span class="line">        hash[a.x*c+a.y]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())</span><br><span class="line">        {</span><br><span class="line">            prog tmp=que.top();</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">            {</span><br><span class="line">                a=tmp;</span><br><span class="line">                a.x+=fx[i][<span class="number">0</span>];</span><br><span class="line">                a.y+=fx[i][<span class="number">1</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(a.x&lt;<span class="number">0</span>||a.y&lt;<span class="number">0</span>||a.x&gt;=r||a.y&gt;=c)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(mat[a.x][a.y]==<span class="string">'#'</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(hash[a.x*c+a.y]==<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                hash[a.x*c+a.y]=<span class="number">1</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(mat[a.x][a.y]==<span class="string">'C'</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cost*a.cnt);</span><br><span class="line">                    <span class="keyword">goto</span> over;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(mat[a.x][a.y]==<span class="string">'*'</span>)</span><br><span class="line">                    a.cnt++;</span><br><span class="line">                <span class="keyword">if</span>(mat[a.x][a.y]==<span class="string">'P'</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;p_num;j++)</span><br><span class="line">                    {</span><br><span class="line">                        prog t;</span><br><span class="line">                        t.x=p[j].x;</span><br><span class="line">                        t.y=p[j].y;</span><br><span class="line">                        hash[t.x*c+t.y]=<span class="number">1</span>;</span><br><span class="line">                        t.cnt=a.cnt;</span><br><span class="line">                        que.push(t);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                que.push(a);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Damn teoy!\n"</span>);</span><br><span class="line">over:;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是从Y走到C经过*最少是多少，其中#不可走，P可传送至任何一个为P的地方，这题可以广搜，hdu给出的是最短路，下面是官方的解题报告&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给出的地图中，Y为起点，C为终点，#点不能通过，可直接忽略。所有的P为互通的传送门，故可将所
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="广度优先搜索" scheme="https://acshiryu.github.io/tags/breadth-first-search/"/>
    
      <category term="最短路" scheme="https://acshiryu.github.io/tags/shortest-road/"/>
    
  </entry>
  
  <entry>
    <title>hdu4412 Sky Soldiers 动态规划 杭州网赛的第三题</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4412-sky-soldiers.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4412-sky-soldiers.html</id>
    <published>2018-09-16T02:32:00.000Z</published>
    <updated>2018-09-16T02:23:07.250Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意是有k个伞兵落到地面上，已知每个人落点的概率，有m个物资站，落地后要去最近的站。问如何安排这些物资站，使得伞兵落地后行走的期望距离的和最小。（所有落点最多1000个）。</p><p>显然是个dp题，我们可以先预处理下，对每个落点点求出他的概率总和，代表伞兵落在这点的权。可以直到物资站一定悬在伞兵落下的那些点上，所以我们就可以用$dp_{ij}$ 表示前$i$个落地点中选择$j$个作为物资点，则很容易想到转移方程$dp_{ij}=min(dp_{kj_{1}}+dis_{ki})$，其中$j_{1}=j+1$, $dis_{ki}$表示在$[k,i]$区间的落地点选则一个作为物资点所走距离最小值的期望(就是每点到物资点的距离乘该点概率的总和)。</p><p>现在关键就是求$dis$，其实我们注意到  假设对于$[i,j]$，假设选取$k$作为物资点，则有</p><p>$dis_{ij}=\sum_{n=i}^{k}{(a_{k}-a_{n})p_{n}} + \sum_{n=k+1}^{j}{(a_{n}-a_{k})p_{n}}$   </p><p>而若选择$k+1$作为物资点，则有</p><p>$dis_{ij}^{‘}=\sum_{n=i}^{k}{(a_{k+1}-a_{n})p_{n}} + \sum_{n=k+1}^{j}{(a_{n}-a_{k+1})p_{n}}$</p><p>则相减并化简得</p><p>$dis_{ij}^{‘}-dis_{ij}= (a_{k_{1}}-a_{k})(\sum_{n=i}^{k}{p_{n}} - \sum_{n=k+1}^{j}{p_{n}}) = (a_{k_{1}}-a_{k})(sum_{ik}-sum_{k_{1}{j}})$</p><p>设$tmp=dis_{ij}^{‘}-dis_{ij}$,$sum$可以很容易求出，这样很显然，当$k$增加时，$tmp$的值也在增加，所以，若选取$k$作为物资点，则要$tmp \geq 0$，否则我们可以选取$k+1$作为物资点，这样，可以对$dis$进行预处理，然后就可以得出答案</p><figure class="highlight cpp"><figcaption><span>hdu4412 Sky Soldiers</span><a href="/assets/code/hdu/4412.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">}pos[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a.k&lt;b.k;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">double</span> dis[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">double</span> sum[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">double</span> dp[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> kx,m;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;kx,&amp;m),kx||m)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">int</span> pos_num=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;kx;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;t,&amp;p);</span><br><span class="line"><span class="keyword">if</span>(mp.count(t)==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">mp[t]=pos_num;</span><br><span class="line">pos[pos_num].p=p;</span><br><span class="line">pos[pos_num++].k=t;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">pos[mp[t]].p+=p;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sort(pos,pos+pos_num,cmp);</span><br><span class="line"></span><br><span class="line">zero(sum);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pos_num;i++)</span><br><span class="line">{</span><br><span class="line">sum[i][i]=pos[i].p;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;pos_num;j++)</span><br><span class="line">{</span><br><span class="line">sum[i][j]=sum[i][j<span class="number">-1</span>]+pos[j].p;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">zero(dis);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pos_num;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;pos_num;j++)</span><br><span class="line">{</span><br><span class="line">dis[i][j]=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(k=i+<span class="number">1</span>;k&lt;=j;k++)</span><br><span class="line">{</span><br><span class="line">dis[i][j]+=(pos[k].k-pos[i].k)*pos[k].p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> tmp=dis[i][j];</span><br><span class="line"><span class="keyword">for</span>(k=i+<span class="number">1</span>;k&lt;=j;k++)</span><br><span class="line">{</span><br><span class="line">tmp=(pos[k].k-pos[k<span class="number">-1</span>].k)*(sum[i][k<span class="number">-1</span>]-sum[k][j])+dis[i][j];</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;dis[i][j])</span><br><span class="line">dis[i][j]=tmp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout&lt;&lt;dis[i][j]&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;pos_num;i++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//dp[i][0]=0;</span></span><br><span class="line">dp[i][<span class="number">1</span>]=dis[<span class="number">0</span>][i];</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=m;j++)</span><br><span class="line">{</span><br><span class="line">dp[i][j]=<span class="number">1000000000.0</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=i;k++)</span><br><span class="line">{</span><br><span class="line">dp[i][j]=min(dp[i][j],dp[k][j<span class="number">-1</span>]+dis[k+<span class="number">1</span>][i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,dp[pos_num<span class="number">-1</span>][m]);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意是有k个伞兵落到地面上，已知每个人落点的概率，有m个物资站，落地后要去最近的站。问如何安排这些物资站，使得伞兵落地后行走的期望距离的和最小。（所有落点最多1000个）。&lt;/p&gt;
&lt;p&gt;显然是个dp题，我们可以先预处理下，对每个落点点求出他的概率总和，代表伞兵落在这点
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu4419 Colourful Rectangle  搜索+矩形分割  杭州赛区网赛最后一题</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4419-colourful-rectangle.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4419-colourful-rectangle.html</id>
    <published>2018-09-16T02:31:00.000Z</published>
    <updated>2018-09-16T02:22:54.973Z</updated>
    
    <content type="html"><![CDATA[<p>这题就是一个矩阵分割，因为之前做过USACO上类似的一题，所以最开始就看了这题</p><p>矩阵分割，有多种情况，具体可以参考我的<a href="/archives/acm/usaco-3-1-4-shaping-regions.html" title="USACO 3.1.4 Shaping Regions 搜索+矩形切割">USACO 3.1.4 Shaping Regions 搜索+矩形切割</a></p><p>但这题略有不同，USACO上面是颜色覆盖，这里是颜色相加，所以对于相交的区域不能那个直接计算面积，还要继续递推直到最后一个矩形</p><p>但有一个问题，矩形太多，递推超时，注意到颜色只有三种，所以我们可以对颜色进行一次一次排序（让R,G,B顺序），如果到分割第t个矩形时，当前所加的颜色含有第t个矩形的颜色，则我们可以直接跳转到下一个颜色区域，这样就可以避免重复搜索</p><p>还有一个问题，就是颜色的处理，因为颜色的相加，可以用位运算来解决，R-1,G-2,B-4，这样就对颜色的相加转化成或运算，具体可看我的代码（刚用我的代码提交了下，发现不论时间还是空间排行暂时第一，第一次啊！）</p><figure class="highlight cpp"><figcaption><span>hdu4419 Colourful Rectangle</span><a href="/assets/code/hdu/4419.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line">__int64 ans[<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rect</span>{</span></span><br><span class="line">    <span class="keyword">int</span> llx,lly,urx,ury,c;</span><br><span class="line">}cfx[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sx[]={<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>};</span><br><span class="line"><span class="keyword">int</span> color[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> color_rank[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> lx,<span class="keyword">int</span> ly,<span class="keyword">int</span> rx,<span class="keyword">int</span> ry,<span class="keyword">int</span> t,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(lx==rx||ly==ry)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(c!=<span class="number">0</span>)</span><br><span class="line">ans[c]+=((__int64)(rx-lx))*(ry-ly);</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(t&gt;=<span class="number">0</span>&amp;&amp;t&lt;color_rank[<span class="number">0</span>]&amp;&amp;((c|<span class="number">1</span>)==c))</span><br><span class="line">{</span><br><span class="line">DFS(lx,ly,rx,ry,<span class="number">-1</span>,c);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t&gt;=color_rank[<span class="number">0</span>]&amp;&amp;t&lt;color_rank[<span class="number">1</span>]&amp;&amp;((c|<span class="number">2</span>)==c))</span><br><span class="line">{</span><br><span class="line">DFS(lx,ly,rx,ry,color_rank[<span class="number">0</span>]<span class="number">-1</span>,c);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t&gt;=color_rank[<span class="number">1</span>]&amp;&amp;t&lt;color_rank[<span class="number">2</span>]&amp;&amp;((c|<span class="number">4</span>)==c))</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">DFS(lx,ly,rx,ry,color_rank[<span class="number">1</span>]<span class="number">-1</span>,c);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cfx[t].llx&gt;=rx||cfx[t].lly&gt;=ry||cfx[t].urx&lt;=lx||cfx[t].ury&lt;=ly)</span><br><span class="line">    {</span><br><span class="line">        DFS(lx,ly,rx,ry,t<span class="number">-1</span>,c);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> k1,k2,k3,k4;</span><br><span class="line">        k1=max(lx,cfx[t].llx);</span><br><span class="line">        k2=min(rx,cfx[t].urx);</span><br><span class="line">        <span class="keyword">if</span>(lx&lt;k1)</span><br><span class="line">            DFS(lx,ly,k1,ry,t<span class="number">-1</span>,c);</span><br><span class="line">        <span class="keyword">if</span>(rx&gt;k2)</span><br><span class="line">            DFS(k2,ly,rx,ry,t<span class="number">-1</span>,c);</span><br><span class="line"></span><br><span class="line">        k3=max(ly,cfx[t].lly);</span><br><span class="line">        k4=min(ry,cfx[t].ury);</span><br><span class="line">        <span class="keyword">if</span>(ly&lt;k3)</span><br><span class="line">            DFS(k1,ly,k2,k3,t<span class="number">-1</span>,c);</span><br><span class="line">        <span class="keyword">if</span>(ry&gt;k4)</span><br><span class="line">            DFS(k1,k4,k2,ry,t<span class="number">-1</span>,c);</span><br><span class="line"><span class="keyword">if</span>(k1!=k2&amp;&amp;k3!=k4)</span><br><span class="line">DFS(min(k1,k2),min(k3,k4),max(k1,k2),max(k3,k4),t<span class="number">-1</span>,cfx[t].c|c);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(rect a,rect b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T,cnt=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> x,y,n,i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">x=y=<span class="number">0</span>;</span><br><span class="line">zero(ans);</span><br><span class="line">zero(color);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'R'</span>)</span><br><span class="line">cfx[i].c=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'G'</span>)</span><br><span class="line">cfx[i].c=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'B'</span>)</span><br><span class="line">cfx[i].c=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;cfx[i].llx,&amp;cfx[i].lly,&amp;cfx[i].urx,&amp;cfx[i].ury);</span><br><span class="line">x=max(x,cfx[i].urx);</span><br><span class="line">y=max(y,cfx[i].ury);</span><br><span class="line">color[cfx[i].c]++;</span><br><span class="line">}</span><br><span class="line">sort(cfx,cfx+n,cmp);</span><br><span class="line">color_rank[<span class="number">0</span>]=color[<span class="number">1</span>];</span><br><span class="line">color_rank[<span class="number">1</span>]=color_rank[<span class="number">0</span>]+color[<span class="number">2</span>];</span><br><span class="line">color_rank[<span class="number">2</span>]=color_rank[<span class="number">1</span>]+color[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">DFS(<span class="number">0</span>,<span class="number">0</span>,x,y,n<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,cnt++);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans[sx[i]]);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这题就是一个矩阵分割，因为之前做过USACO上类似的一题，所以最开始就看了这题&lt;/p&gt;
&lt;p&gt;矩阵分割，有多种情况，具体可以参考我的&lt;a href=&quot;/archives/acm/usaco-3-1-4-shaping-regions.html&quot; title=&quot;USACO 3
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="深度优先搜索" scheme="https://acshiryu.github.io/tags/depth-first-search/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="矩形" scheme="https://acshiryu.github.io/tags/rectangle/"/>
    
      <category term="分治" scheme="https://acshiryu.github.io/tags/division/"/>
    
  </entry>
  
  <entry>
    <title>hdu4602 Partition 2013多校第一场100</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4602-partition.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4602-partition.html</id>
    <published>2018-09-16T02:30:00.000Z</published>
    <updated>2018-09-16T02:22:31.983Z</updated>
    
    <content type="html"><![CDATA[<p>可以知道对于任何数n都可以写成$n=x+[y+z+…]$,则对于任意的一个$x(0\leq x &lt; n)$，后面的式子有${2}^{n-x-1}$种写法</p><p>假设对于给定的k，题目要求的就是$f+{n}$</p><p>则对于x有两种可能<br>若$x=k$，则这${2}^{n-x-1}$个式子中，因为第一项就是k，所以每一个式子至少含有1个$k$，现在就看其余项中含有多少$k$，而其余项就是求$f(n-x)$<br>若$x\neq k$相等，则第一项不含有$k$，就看其余项中含有含有多少$k$，依旧是求$f(n-x)$<br>注意到，当$k&gt;n$是，$f(n)=0$</p><p>则可以得到<br>$f_{n}=\sum_{i=k}^{n-1}{f_{i}}+{2}^{n-k-1}$</p><p>于是可以求出通项公式<br>$f_{n}=(n-k+3)*{2}^{n-k-2}(n&gt;k)$</p><blockquote><p>官方解题报告<br>我们特判出$n\leq k$的情况。<br>对于$1\leq k &lt; n$,我们可以等效为$n$个点排成一列，并取出其中的连续k个点。下面分两种情况考虑：</p><blockquote><p>第一种情况，被选出的不包含断电，那么有$n-k-1$种情况完成上述操作，剩下未被圈的点之间还有$n-k-2$个位置，可以在每个位置断开，所以共 $(n-k-1)*{2}^{n-k-2}$ 种方法。</p></blockquote><blockquote><p>第二种情况，即被选出的包含端点，那么有两种情况，并且剩余共$n-k-1$个位置，所以共$2*{2}^{n-k-1}$种方法。</p></blockquote><p>总计$2 \times 2^{n-k-1}+(n-k-1){2}^{n-k-2}=(n-k-3){2}^{n-k-1}$。</p></blockquote><a id="more"></a><p>我的代码<br><figure class="highlight cpp"><figcaption><span>hdu4602 Partition</span><a href="/assets/code/hdu/4602-1.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">__<span class="function">int64 <span class="title">mul</span><span class="params">(__int64 n,__int64 k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">__int64 ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k&gt;=<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>)</span><br><span class="line">ans=ans*n%mod;</span><br><span class="line">k=k/<span class="number">2</span>;</span><br><span class="line">n=n*n%mod;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line">__int64 n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>,&amp;n,&amp;k);</span><br><span class="line">__int64 m=n-k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>||m==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,mul(<span class="number">2</span>,m<span class="number">-2</span>)*(m+<span class="number">3</span>)%mod);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><p>标程<br><figure class="highlight cpp"><figcaption><span>hdu4602 Partition 标程</span><a href="/assets/code/hdu/4602-2.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LOL;</span><br><span class="line"><span class="keyword">const</span> LOL MOD = <span class="number">1000000007l</span>l;</span><br><span class="line"><span class="function">LOL <span class="title">solve</span><span class="params">(LOL n,LOL k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(n&lt;k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==k) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    LOL ans=n-k+<span class="number">3</span>;</span><br><span class="line">    LOL tmp=<span class="number">2</span>;</span><br><span class="line">    k=n-k<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">-1</span>){</span><br><span class="line">        <span class="keyword">return</span> ans/<span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(k){</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span>){</span><br><span class="line">            ans=(ans*tmp)%MOD;</span><br><span class="line">        }</span><br><span class="line">        tmp=(tmp*tmp)%MOD;</span><br><span class="line">        k/=<span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    LOL n,k;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--){</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;solve(n,k)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可以知道对于任何数n都可以写成$n=x+[y+z+…]$,则对于任意的一个$x(0\leq x &amp;lt; n)$，后面的式子有${2}^{n-x-1}$种写法&lt;/p&gt;
&lt;p&gt;假设对于给定的k，题目要求的就是$f+{n}$&lt;/p&gt;
&lt;p&gt;则对于x有两种可能&lt;br&gt;若$x=k$，则这${2}^{n-x-1}$个式子中，因为第一项就是k，所以每一个式子至少含有1个$k$，现在就看其余项中含有多少$k$，而其余项就是求$f(n-x)$&lt;br&gt;若$x\neq k$相等，则第一项不含有$k$，就看其余项中含有含有多少$k$，依旧是求$f(n-x)$&lt;br&gt;注意到，当$k&amp;gt;n$是，$f(n)=0$&lt;/p&gt;
&lt;p&gt;则可以得到&lt;br&gt;$f_{n}=\sum_{i=k}^{n-1}{f_{i}}+{2}^{n-k-1}$&lt;/p&gt;
&lt;p&gt;于是可以求出通项公式&lt;br&gt;$f_{n}=(n-k+3)*{2}^{n-k-2}(n&amp;gt;k)$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方解题报告&lt;br&gt;我们特判出$n\leq k$的情况。&lt;br&gt;对于$1\leq k &amp;lt; n$,我们可以等效为$n$个点排成一列，并取出其中的连续k个点。下面分两种情况考虑：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一种情况，被选出的不包含断电，那么有$n-k-1$种情况完成上述操作，剩下未被圈的点之间还有$n-k-2$个位置，可以在每个位置断开，所以共 $(n-k-1)*{2}^{n-k-2}$ 种方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;第二种情况，即被选出的包含端点，那么有两种情况，并且剩余共$n-k-1$个位置，所以共$2*{2}^{n-k-1}$种方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总计$2 \times 2^{n-k-1}+(n-k-1){2}^{n-k-2}=(n-k-3){2}^{n-k-1}$。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="递归" scheme="https://acshiryu.github.io/tags/recursive/"/>
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu4611 Balls Rearrangement 最大公约数 2013多校2-1001</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4611-balls-rearrangement.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4611-balls-rearrangement.html</id>
    <published>2018-09-16T02:29:00.000Z</published>
    <updated>2018-09-16T02:22:20.739Z</updated>
    
    <content type="html"><![CDATA[<p>题目实际上就是求$$\sum_{i=0}^{n-1}\left | i \mod a-i \mod b \right |$$</p><p>既然有取余，明显会有循环节，很显然循环节是lcm(a,b)</p><p>那就求出循环节部分的值再乘以循环的次数再加上其余部分就可以了</p><p>多校的时候a,b都取的int，WA了  后来才弄对</p><figure class="highlight cpp"><figcaption><span>hdu4611 Balls Rearrangement</span><a href="/assets/code/hdu/4611.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line">__<span class="function">int64 <span class="title">gcd</span><span class="params">(__int64 a,__int64 b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">}</span><br><span class="line">__<span class="function">int64 <span class="title">lcm</span><span class="params">(__int64 a,__int64 b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a/gcd(a,b)*b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">__<span class="function">int64 <span class="title">abs</span><span class="params">(__int64 k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> k&lt;<span class="number">0</span>?-k:k;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line">__int64 n,a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span>,&amp;n,&amp;a,&amp;b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">{</span><br><span class="line">__int64 t;</span><br><span class="line">t=b;</span><br><span class="line">b=a;</span><br><span class="line">a=t;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">__int64 k=gcd(a,b);</span><br><span class="line">__int64 ga=a/k;</span><br><span class="line">__int64 gb=b/k;</span><br><span class="line">__int64 i,j;</span><br><span class="line">__int64 sum=<span class="number">0</span>;</span><br><span class="line">__int64 sumi;</span><br><span class="line">__int64 sumn=<span class="number">0</span>;</span><br><span class="line">__int64 x=<span class="number">0</span>;</span><br><span class="line">__int64 nm=(n%lcm(a,b))/b;</span><br><span class="line">__int64 tx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ga;i++)</span><br><span class="line">{</span><br><span class="line">sumi=<span class="number">0</span>;</span><br><span class="line">__int64 anum=x/a;</span><br><span class="line">__int64 x1=(anum+<span class="number">1</span>)*a-x;</span><br><span class="line">sumi+=x1*<span class="built_in">abs</span>(x%a-x%b);</span><br><span class="line">x+=x1;</span><br><span class="line">__int64 sy=b-x1;</span><br><span class="line"><span class="keyword">while</span>(sy&gt;=a)</span><br><span class="line">{</span><br><span class="line">sy-=a;</span><br><span class="line">sumi+=a*<span class="built_in">abs</span>(x%a-x%b);</span><br><span class="line">x+=a;</span><br><span class="line">}</span><br><span class="line">sumi+=sy*<span class="built_in">abs</span>(x%a-x%b);</span><br><span class="line"></span><br><span class="line">x+=sy;</span><br><span class="line"></span><br><span class="line">sum+=sumi;</span><br><span class="line">}</span><br><span class="line">x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nm;i++)</span><br><span class="line">{</span><br><span class="line">sumi=<span class="number">0</span>;</span><br><span class="line">__int64 anum=x/a;</span><br><span class="line">__int64 x1=(anum+<span class="number">1</span>)*a-x;</span><br><span class="line">sumi+=x1*<span class="built_in">abs</span>(x%a-x%b);</span><br><span class="line">x+=x1;</span><br><span class="line">__int64 sy=b-x1;</span><br><span class="line"><span class="keyword">while</span>(sy&gt;=a)</span><br><span class="line">{</span><br><span class="line">sy-=a;</span><br><span class="line">sumi+=a*<span class="built_in">abs</span>(x%a-x%b);</span><br><span class="line">x+=a;</span><br><span class="line">}</span><br><span class="line">sumi+=sy*<span class="built_in">abs</span>(x%a-x%b);</span><br><span class="line"></span><br><span class="line">x+=sy;</span><br><span class="line"></span><br><span class="line">sumn+=sumi;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">__int64 ans=sum*(n/lcm(a,b))+sumn;</span><br><span class="line"></span><br><span class="line">__int64 nab=n%lcm(a,b);</span><br><span class="line"><span class="keyword">for</span>(i=nm*b;i&lt;nab;i++)</span><br><span class="line">ans+=<span class="built_in">abs</span>(i%a-i%b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目实际上就是求$$\sum_{i=0}^{n-1}\left | i \mod a-i \mod b \right |$$&lt;/p&gt;
&lt;p&gt;既然有取余，明显会有循环节，很显然循环节是lcm(a,b)&lt;/p&gt;
&lt;p&gt;那就求出循环节部分的值再乘以循环的次数再加上其余部分就可以了
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="最大公约数" scheme="https://acshiryu.github.io/tags/greatest-common-divisor/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>hdu4619 Warm up 2 二分图匹配 2013多校第二场1009</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4619-warm-up-2.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4619-warm-up-2.html</id>
    <published>2018-09-16T02:28:00.000Z</published>
    <updated>2018-09-16T02:21:47.456Z</updated>
    
    <content type="html"><![CDATA[<p>实际上就是求的二分图最大匹配<br><figure class="highlight cpp"><figcaption><span>hdu4619 Warm up 2</span><a href="/assets/code/hdu/4619.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">int</span> x;<span class="keyword">int</span> y;</span><br><span class="line">}h[<span class="number">1010</span>],s[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">map</span>[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> link[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(h[i].x==s[j].x&amp;&amp;h[i].y==s[j].y)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(h[i].x+<span class="number">1</span>==s[j].x&amp;&amp;h[i].y==s[j].y)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(h[i].x==s[j].x&amp;&amp;h[i].y==s[j].y+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(h[i].x+<span class="number">1</span>==s[j].x&amp;&amp;h[i].y==s[j].y+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> k )</span> </span></span><br><span class="line"><span class="function"></span>{<span class="comment">//对k寻找匹配，如果找到就记录匹配，并返回true,否则返回false</span></span><br><span class="line">    <span class="keyword">int</span> i , j ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt;= m ; i ++ )</span><br><span class="line">    {<span class="comment">//对所有节点遍历一遍，寻找没有访问过并且与i连同的点</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">map</span> [k][i] ==<span class="literal">true</span> &amp;&amp; ! vis[i] )</span><br><span class="line">        {</span><br><span class="line">            vis [i] = <span class="literal">true</span> ;    <span class="comment">//记录改点以被访问</span></span><br><span class="line">            <span class="keyword">if</span> ( link [i] == <span class="number">0</span> || find ( link [i] ) )</span><br><span class="line">            {<span class="comment">//如果该点还未与其他点匹配，或还能找到其他点能与该点匹配的点j进行匹配，即存在增广路</span></span><br><span class="line">                link [ i ] = k ;    <span class="comment">//将i与k进行匹配</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m),n||m)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;h[i].x,&amp;h[i].y);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;s[i].x,&amp;s[i].y);</span><br><span class="line"></span><br><span class="line">zero(<span class="built_in">map</span>);</span><br><span class="line">zero(link);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">map</span>[i][j]=check(i,j);</span><br><span class="line"><span class="comment">//if(map[i][j]==1)</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;' '&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span> ;    <span class="comment">//最大匹配数</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">memset</span> ( vis , <span class="literal">false</span> , <span class="keyword">sizeof</span> ( vis ) ) ;<span class="comment">//对所有数据都初始为0，表明数据还没有试探</span></span><br><span class="line">            <span class="keyword">if</span> ( find ( i ) ) <span class="comment">//如果对i找到一个匹配</span></span><br><span class="line">                ans ++ ;</span><br><span class="line">        }</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m+n-ans);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实际上就是求的二分图最大匹配&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;hdu4619 Warm up 2&lt;/span&gt;&lt;a href=&quot;/assets/code/hdu/4619.cpp&quot;&gt;view raw&lt;/a
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="贪心" scheme="https://acshiryu.github.io/tags/greedy/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
      <category term="二分图" scheme="https://acshiryu.github.io/tags/binary-picture/"/>
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="最大匹配" scheme="https://acshiryu.github.io/tags/maximum-match/"/>
    
  </entry>
  
  <entry>
    <title>hdu4632 Palindrome subsequence 20103多校4-1001</title>
    <link href="https://acshiryu.github.io/archives/acm/hdu-4632-palindrome-subsequence.html"/>
    <id>https://acshiryu.github.io/archives/acm/hdu-4632-palindrome-subsequence.html</id>
    <published>2018-09-16T02:27:00.000Z</published>
    <updated>2018-09-16T02:21:35.761Z</updated>
    
    <content type="html"><![CDATA[<p>dp题<br><figure class="highlight cpp"><figcaption><span>hdu4632 Palindrome subsequence</span><a href="/assets/code/hdu/4632.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">10007</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T,cas=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;i+k&lt;len;k++)</span><br><span class="line">{</span><br><span class="line">j=i+k;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">dp[i][j]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">dp[i][j]=<span class="number">2</span>+(s[i]==s[j]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">dp[i][j]=(dp[i+<span class="number">1</span>][j]+dp[i][j<span class="number">-1</span>]-dp[i+<span class="number">1</span>][j<span class="number">-1</span>]+mod)%mod;</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j])</span><br><span class="line">dp[i][j]+=dp[i+<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,cas++,dp[<span class="number">0</span>][len<span class="number">-1</span>]%mod);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dp题&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;hdu4632 Palindrome subsequence&lt;/span&gt;&lt;a href=&quot;/assets/code/hdu/4632.cpp&quot;&gt;view raw&lt;
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="hdu" scheme="https://acshiryu.github.io/tags/hdu/"/>
    
  </entry>
  
  <entry>
    <title>[转]高级数据结构设计－－并查集及实现学习笔记（有趣篇）</title>
    <link href="https://acshiryu.github.io/archives/notes/notes-algorithm-union-set.html"/>
    <id>https://acshiryu.github.io/archives/notes/notes-algorithm-union-set.html</id>
    <published>2018-09-16T02:26:00.000Z</published>
    <updated>2018-09-16T02:21:11.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高级数据结构设计－－并查集及实现学习笔记（有趣篇）"><a href="#高级数据结构设计－－并查集及实现学习笔记（有趣篇）" class="headerlink" title="高级数据结构设计－－并查集及实现学习笔记（有趣篇）"></a><a href="http://www.cnblogs.com/ACShiryu/archive/2011/11/24/unionset.html" target="_blank" rel="noopener">高级数据结构设计－－并查集及实现学习笔记（有趣篇）</a></h2><div id="cnblogs_post_body"><br><div id="cnblogs_post_body"><br><div><br><br>并查集的程序设计：<br><img src="http://pic002.cnblogs.com/images/2011/315754/2011101911324357.png" alt=""><br><br>&nbsp;<br><br>为了解释并查集的原理，我将举一个更有趣的例子。<br>话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？我们可以在每个朋友圈内推举出一个比较有名望的人，作为该圈子的代表人物，这样，每个圈子就可以这样命名“齐达内朋友之队”“罗纳尔多朋友之队”……两人只要互相对一下自己的队长是不是同一个人，就可以确定敌友关系了。<br>但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。<br><br><a href="http://www.cnblogs.com/ACShiryu" target="_blank" rel="noopener"><img src="http://pic002.cnblogs.com/images/2011/315754/2011101911332023.jpg" alt=""></a><br>下面我们来看并查集的实现。<br>int pre[1000];<br>这个数组，记录了每个大侠的上级是谁。大侠们从1或者0开始编号（依据题意而定），pre[15]=3就表示15号大侠的上级是3号大侠。如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去。<br>find这个函数就是找掌门用的，意义再清楚不过了（路径压缩算法先不论，后面再说）。<br><br></div><br><div></div><br><div><br><br><a href="http://www.cnblogs.com/ACShiryu" target="_blank" rel="noopener"><img src="http://pic002.cnblogs.com/images/2011/315754/2011101911333892.png" alt=""></a><br><br></div><br>&nbsp;<br><br>再来看看join函数，就是在两个点之间连一条线，这样一来，原先它们所在的两个板块的所有点就都可以互通了。这在图上很好办，画条线就行了。但我们现在是用并查集来描述武林中的状况的，一共只有一个pre[]数组，该如何实现呢？<br>还是举江湖的例子，假设现在武林中的形势如图所示。虚竹小和尚与周芷若MM是我非常喜欢的两个人物，他们的终极boss分别是玄慈方丈和灭绝师太，那明显就是两个阵营了。我不希望他们互相打架，就对他俩说：“你们两位拉拉勾，做好朋友吧。”他们看在我的面子上，同意了。这一同意可非同小可，整个少林和峨眉派的人就不能打架了。这么重大的变化，可如何实现呀，要改动多少地方？其实非常简单，我对玄慈方丈说：“大师，麻烦你把你的上级改为灭绝师太吧。这样一来，两派原先的所有人员的终极boss都是师太，那还打个球啊！反正我们关心的只是连通性，门派内部的结构不要紧的。”玄慈一听肯定火大了：“我靠，凭什么是我变成她手下呀，怎么不反过来？我抗议！”抗议无效，上天安排的，最大。反正谁加入谁效果是一样的，我就随手指定了一个。这段函数的意思很明白了吧？<br><div></div><br>&nbsp;<br><br><a href="http://www.cnblogs.com/ACShiryu" target="_blank" rel="noopener"><img src="http://pic002.cnblogs.com/images/2011/315754/2011101911335943.png" alt=""></a><br><br>&nbsp;<br><br>再来看看路径压缩算法。建立门派的过程是用join函数两个人两个人地连接起来的，谁当谁的手下完全随机。最后的树状结构会变成什么胎唇样，我也完全无法预计，一字长蛇阵也有可能。这样查找的效率就会比较低下。最理想的情况就是所有人的直接上级都是掌门，一共就两级结构，只要找一次就找到掌门了。哪怕不能完全做到，也最好尽量接近。这样就产生了路径压缩算法。<br>设想这样一个场景：两个互不相识的大侠碰面了，想知道能不能揍。<br>于是赶紧打电话问自己的上级：“你是不是掌门？”<br>上级说：“我不是呀，我的上级是谁谁谁，你问问他看看。”<br>一路问下去，原来两人的最终boss都是东厂曹公公。<br>“哎呀呀，原来是记己人，西礼西礼，在下三营六组白面葫芦娃!”<br>“幸会幸会，在下九营十八组仙子狗尾巴花！”<br>两人高高兴兴地手拉手喝酒去了。<br>“等等等等，两位同学请留步，还有事情没完成呢！”我叫住他俩。<br>“哦，对了，还要做路径压缩。”两人醒悟。<br>白面葫芦娃打电话给他的上级六组长：“组长啊，我查过了，其习偶们的掌门是曹公公。不如偶们一起及接拜在曹公公手下吧，省得级别太低，以后查找掌门麻环。”<br>“唔，有道理。”<br>白面葫芦娃接着打电话给刚才拜访过的三营长……仙子狗尾巴花也做了同样的事情。<br>这样，查询中所有涉及到的人物都聚集在曹公公的直接领导下。每次查询都做了优化处理，所以整个门派树的层数都会维持在比较低的水平上。路径压缩的代码，看得懂很好，看不懂也没关系，直接抄上用就行了。总之它所实现的功能就是这么个意思。<br><br><a href="http://www.cnblogs.com/ACShiryu" target="_blank" rel="noopener"><img src="http://pic002.cnblogs.com/images/2011/315754/2011101911342039.jpg" alt=""></a><br><br>&nbsp;<br><br>&nbsp;<br><br>提到并查集就不得不提并查集最经典的例子：食物链。<br><strong>       POJ 1182 食物链</strong><br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1182" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1182</a><br>题目告诉有3种动物，互相吃与被吃，现在告诉你m句话，其中有真有假，叫你判断假的个数(如果前面没有与当前话冲突的，即认为其为真话)<br>这题有几种做法，我以前的做法是每个集合(或者称为子树，说集合的编号相当于子树的根结点，一个概念)中的元素都各自分为A, B, C三类，在合并时更改根结点的种类，其他点相应更改偏移量。但这种方法公式很难推，特别是偏移量很容易计算错误。<br>下面来介绍一种通用且易于理解的方法：<br>首先，集合里的每个点我们都记录它与它这个集合(或者称为子树)的根结点的相对关系relation。0表示它与根结点为同类，1表示它吃根结点，2表示它被根结点吃。<br>那么判断两个点a, b的关系，我们令p = Find(a), q = Find(b)，即p, q分别为a, b子树的根结点。<br>1. 如果p != q，说明a, b暂时没有关系，那么关于他们的判断都是正确的，然后合并这两个子树。这里是关键，如何合并两个子树使得合并后的新树能保证正确呢？这里我们规定只能p合并到q(刚才说过了，启发式合并的优化效果并不那么明显，如果我们用启发式合并，就要推出两个式子，而这个推式子是件比较累的活…所以一般我们都规定一个子树合到另一个子树)。那么合并后，p的relation肯定要改变，那么改成多少呢？这里的方法就是找规律，列出部分可能的情况，就差不多能推出式子了。这里式子为 : tree[p].relation = (tree[b].relation - tree[a].relation + 2 + d) % 3; 这里的d为判断语句中a, b的关系。还有个问题，我们是否需要遍历整个a子树并更新每个结点的状态呢？答案是不需要的，因为我们可以在Find()函数稍微修改，即结点x继承它的父亲(注意是前父亲，因为路径压缩后父亲就会改变)，即它会继承到p结点的改变，所以我们不需要每个都遍历过去更新。<br>2. 如果p = q，说明a, b之前已经有关系了。那么我们就判断语句是否是对的，同样找规律推出式子。即if ( (tree[b].relation + d + 2) % 3 != tree[a].relation ), 那么这句话就是错误的。<br>3. 再对Find()函数进行些修改，即在路径压缩前纪录前父亲是谁，然后路径压缩后，更新该点的状态(通过继承前父亲的状态，这时候前父亲的状态是已经更新的)。<br>核心的两个函数为：<br>int Find(int x)<br>{<br>int temp_p;<br>if (tree[x].parent != x)<br>{<br>// 因为路径压缩，该结点的与根结点的关系要更新(因为前面合并时可能还没来得及更新).<br>temp_p = tree[x].parent;<br>tree[x].parent = Find(tree[x].parent);<br>// x与根结点的关系更新(因为根结点变了)，此时的temp_p为它原来子树的根结点.<br>tree[x].relation = (tree[x].relation + tree[temp_p].relation) % 3;<br>}<br>return tree[x].parent;<br>}<br><br>void Merge(int a, int b, int p, int q, int d)<br>{<br>// 公式是找规律推出来的.<br>tree[p].parent = q; // 这里的下标相同，都是tree[p].<br>tree[p].relation = (tree[b].relation - tree[a].relation + 2 + d) % 3;<br>}<br><br>而这种纪录与根结点关系的方法，适用于几乎所有的并查集判断关系(至少我现在没遇到过不适用的情况…可能是自己做的还太少了…)，所以向大家强烈推荐～～<br><br>搞定了食物链这题，基本POJ上大部分基础并查集题目就可以顺秒了，这里仅列个题目编号: <strong>POJ 1308 1611 1703 1988 2236 2492 2524。</strong><br><br>下面来讲解几道稍微提高点的题目:<br><strong>       POJ 1456 Supermarket</strong><br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1456" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1456</a><br>这道题贪心的思想很明显，不过O(n^2)的复杂度明显不行，我们可以用堆进行优化，这里讲下并查集的优化方法(很巧妙)。我们把连续的被占用的区间看成一个集合(子树)，它的根结点为这个区间左边第一个未被占用的区间。<br>先排序，然后每次判断Find(b[i])是否大于0，大于0说明左边还有未被占用的空间，则占用它，然后合并(b[i], Find(b[i]) – 1)即可。同样这里我们规定只能左边的子树合并到右边的子树(想想为什么～～)。<br><br><strong>       POJ 1733 Parity game</strong><br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1733" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1733</a><br>这题同样用类似食物链的思想。<br>首先我们先离散化，因为原来的区间太大了(10^9)，我们可以根据问题数目离散成(10^4)。我们要理解，这里的离散化并不影响最终的结果，因为区间里1的奇偶个数与区间的大小无关(这句话有点奇怪，可以忽略…)，然后每次输入a, b，我们把b++，如果他俩在一个集合内，那么区间[a, b]里1的个数相当于b.relation ^ a.relation，判断对错即可。如果不在一个集合内，合并集合(这里我们规定根结点小的子树合并根结点大的，所以要根据不同情况推式子)，修改子树的根结点的状态，子树的其他结点状态通过Find()函数来更新。<br><br><strong>       hdu 3038 How Many Answers Are Wrong</strong><br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3038" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=3038</a><br>上面那题的加强版，不需要离散化，因为区间的和与区间的大小有关(和上面的那句话对比下，同样可以忽略之…)，做法与上面那题差不多，只是式子变了，自己推推就搞定了。但这题还有个条件，就是每个点的值在[0, 100]之间，那么如果a, b不在一个子树内，我们就合并，但在合并之前还要判断合并后会不会使得区间的和不合法，如果会说明该合并是非法的，那么就不合并，同样认为该句话是错误的。<br><br><strong>     POJ 1417 True Liars(难)</strong><br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1417" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=1417</a><br>并查集 + DP(或搜索)。<br>题目中告诉两种人，一种只说真话，一种只说假话。然后告诉m条语句，问是否能判断哪些人是只说真话的那类人。<br>其实并查集部分跟食物链还是相似，而且种类变少了一种，更容易了。我们可以通过并查集把有关系的一些人合并到一个集合内(具体方法参见食物链讲解)。<br>现在的问题转化为，有n个集合，每个集合都有a, b连个数字，现在要求n个集合中各跳出一个数(a或者b)，使得他们之和等于n1(说真话的人数)。而这个用dp可以很好的解决，用f[i][j]表示到第i个集合和为j个的情况数，我们还用过pre[i][j]记录当前选的是a还是b，用于后面判断状态。方程为f[i][j] = f[i – 1][j – a] + f[i – 1][j – b], j &gt;= a, j &gt;= b。如果最后f[n][n1] == 1说明是唯一的情况，输出该情况，否则输出 “no”(多解算no)<br>注意点 :<br>1. 这题的m, n1, n2都有可能出现0，可以特殊处理，也可以一起处理。<br>2. 按上面的dp写法，f[i][j]可能会很大，因为n可以达到三位数。其实我们关心的只是f[i][j] 等于0，等于1，大于1三种情况，所以当f[i][j] &gt; 1时，我们都让它等于2即可。<br><br><strong>       POJ 2912 Rochambeau(难)</strong><br><a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2912" target="_blank" rel="noopener">http://acm.pku.edu.cn/JudgeOnline/problem?id=2912</a><br>Baidu Star 2006 Preliminary的题目，感觉出的很好，在并查集题目中算是较难的了。其实这题跟食物链完全一个磨子，同样三类食物，同样的互相制约关系。所以食物链代码拿过来改都不需要改。但这题有个judge，他可以出任意手势。于是我们的做法是，枚举每个小孩为judge，判断他为judge时在第几句话出错err<a href="即到第几句话能判断该小孩不是judge">i</a>。<br>1. 如果只有1个小孩是judge时全部语句都是正确的，说明该小孩是judge，那么判断的句子数即为其他小孩的err[i]的最大值。如果<br>2. 如果每个小孩的都不是judge(即都可以找到出错的语句)，那么就是impossible。<br>3. 多于1个小孩是judge时没有找到出错的语句，就是Can not determine。<br><br><strong>     ZOJ 3261 Connections in Galaxy War</strong>        <a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=3563" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=3563</a><br><strong>        nuaa 1087 联通or不连通</strong><br><a href="http://acm.nuaa.edu.cn/acmhome/problemdetail.do?&amp;method=showdetail&amp;id=1087" target="_blank" rel="noopener">http://acm.nuaa.edu.cn/acmhome/problemdetail.do?&amp;method=showdetail&amp;id=1087</a><br>两题做法差不多，都是反过来的并查集题目，先对边集排序，然后把要删去的边从二分在边集中标记。然后并查集连接没有标记的边集，再按查询反向做就可。第一题合并结点时按照题目要求的优先级合并即可。<br><br>这里介绍的并查集题目，主要都是处理些集合之间的关系(这是并查集的看家本领～～)，至于并查集还有个用处就在求最小生成树的Kruskal算法中，那个是图论中求最小生成树的问题(一般这个难点不在于并查集，它只是用于求最小生成树的一种方法)，就不在这里赘述了～～<br><br>分享来自<a href="http://hi.baidu.com/tina_z_y" target="_blank" rel="noopener">Tina_Z_Y</a>和<a href="http://hi.baidu.com/myacmjd/blog/item/3fe92b6515ba2929ab184cb5.html" target="_blank" rel="noopener">czyuan</a> 感谢两个牛人！<br><div></div><br></div><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;高级数据结构设计－－并查集及实现学习笔记（有趣篇）&quot;&gt;&lt;a href=&quot;#高级数据结构设计－－并查集及实现学习笔记（有趣篇）&quot; class=&quot;headerlink&quot; title=&quot;高级数据结构设计－－并查集及实现学习笔记（有趣篇）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://acshiryu.github.io/categories/notes/"/>
    
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
      <category term="并查集" scheme="https://acshiryu.github.io/tags/union-set/"/>
    
      <category term="算法" scheme="https://acshiryu.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之Crontab学习笔记</title>
    <link href="https://acshiryu.github.io/archives/notes/notes-linux-crontab.html"/>
    <id>https://acshiryu.github.io/archives/notes/notes-linux-crontab.html</id>
    <published>2018-09-16T02:25:00.000Z</published>
    <updated>2018-09-16T02:20:23.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="crontab介绍"><a href="#crontab介绍" class="headerlink" title="crontab介绍"></a>crontab介绍</h2><p>crontab是unix下设置周期性执行任务的工具，类似于windows的计划任务。当系统启动时会自动启动cron进程并后台运行，系统每分钟就启动一次cron服务并检查是否有可执行的任务，若有则会自动执行该任务。</p><h2 id="安装crond服务"><a href="#安装crond服务" class="headerlink" title="安装crond服务"></a>安装crond服务</h2><p>Linux系统一般都默认安装有crond服务，可跳过该步</p><p>安装crond服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install vixie-cron  <span class="comment">#vixie-cron是cron主程序</span></span><br><span class="line">yum install crontabs    <span class="comment">#crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序</span></span><br></pre></td></tr></table></figure></p><p>启动crond服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond start</span><br></pre></td></tr></table></figure></p><p>查看crond服务是否启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond status</span><br></pre></td></tr></table></figure></p><p>设置开机启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig crond on</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="crontab格式"><a href="#crontab格式" class="headerlink" title="crontab格式"></a>crontab格式</h2><p>crontab格式为5个*加上一个任务命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * COMMAND</span><br></pre></td></tr></table></figure></p><p>第一个*表示分钟，范围0~59<br>第二个*表示小时，范围0~23<br>第三个*表示日期，范围1~31<br>第四个*表示月份，范围1~12<br>第五个*表示星期，范围0~7，其中0和7都表示星期天<br>代表在特定的时间执行COMMAND，若要每隔一定的时间执行COMMAND，则在*后紧跟/</p><ul><li>*表示任何时候都匹配  </li><li>可以用“A,B,C”表示A或者B或者C时执行一次命令</li><li>可以用“A-B”表示A到B之间时执行一次命令</li><li>可以用“X/A”表示每A分钟(小时等)执行一次命令，会先满足X约束，再满足A条件</li></ul><h2 id="crontab应用举例"><a href="#crontab应用举例" class="headerlink" title="crontab应用举例"></a>crontab应用举例</h2><p>每晚22:30重启mysql服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 22 * * * service mysqld restart</span><br></pre></td></tr></table></figure></p><p>每月5,15,25日的21:45重启mysql服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45 21 5,15,25 * * service mysqld restart</span><br></pre></td></tr></table></figure></p><p>每月1到15日的22:45重启mysql服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">45 22 1-15 * * service mysqld restart</span><br></pre></td></tr></table></figure></p><p>每隔5分钟重启mysql服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/5 * * * * service mysqld restart</span><br></pre></td></tr></table></figure></p><p>晚上22点至6点间每隔1小时重启mysql服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 22-6/1 * * * service mysqld restart</span><br></pre></td></tr></table></figure></p><p>晚上22点至6点间每隔30分钟重启mysql服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,30 22-6 * * * service mysqld restart</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0-59/30 22-6 * * * service mysqld restart</span><br></pre></td></tr></table></figure></p><h2 id="crontab基本命令"><a href="#crontab基本命令" class="headerlink" title="crontab基本命令"></a>crontab基本命令</h2><p>crontab命令大全<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u user] file  </span><br><span class="line">crontab [-u user ] [ -i ] &#123; -e | -l | -r &#125;</span><br><span class="line">(default operation is replace, per 1003.2)</span><br><span class="line">-e(edit user<span class="string">'s crontab)</span></span><br><span class="line"><span class="string">-l(list user'</span>s crontab)</span><br><span class="line">-r(delete user<span class="string">'s crontab)</span></span><br><span class="line"><span class="string">-i(prompt before deleting user'</span>s crontab)</span><br></pre></td></tr></table></figure></p><p>若没有指定-u则默认当前用户</p><h2 id="crontab配置文件"><a href="#crontab配置文件" class="headerlink" title="crontab配置文件"></a>crontab配置文件</h2><p>全局配置目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/crontab</span><br></pre></td></tr></table></figure></p><p>用户配置目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/spool/cron</span><br></pre></td></tr></table></figure></p><p>crontab日志文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/cron</span><br></pre></td></tr></table></figure></p><h2 id="Crontab常见错误"><a href="#Crontab常见错误" class="headerlink" title="Crontab常见错误"></a>Crontab常见错误</h2><ol><li>环境变量不存在</li><li>命令行双引号使用%时没加\</li><li>第3个*和第5个*之间执行的是”或”操作</li><li>分钟设置误用</li></ol><p>例如：四月的第一个星期日早晨1时59分运行a.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">59 1 1-7 4 0 /root/a.sh<span class="comment">#错误的写法，实际上会在4月的1-7号或者星期日的1时59分执行a.sh</span></span><br><span class="line">59 1 1-7 4 * <span class="built_in">test</span> `date +\%w` -eq 0 &amp;&amp; /root/a.sh<span class="comment">#正确，虽会在4月1-7号都执行，但会先执行test判断是否星期日，只有是星期日才会继续执行a.sh</span></span><br></pre></td></tr></table></figure></p><p>例如：每6小时执行一次a.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 0,6,12,18 * * * /root/a.sh<span class="comment">#错误，0,6,12,18点的时候会每一分钟都执行</span></span><br><span class="line">0 */6 * * */root/a.sh<span class="comment">#正确</span></span><br></pre></td></tr></table></figure></p><h2 id="crontab综合案例"><a href="#crontab综合案例" class="headerlink" title="crontab综合案例"></a>crontab综合案例</h2><p>crontab中最小执行任务的时间单元是分钟，但如果想每30秒执行一次要怎么做？<br>可以通过sleep命令配合crontabs完成该功能<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMAND; sleep 30s; COMMAND</span><br></pre></td></tr></table></figure></p><p>但若要每秒都执行，则可以先写好shell脚本，然后让每一分钟去执行该脚本</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.imooc.com/learn/216" target="_blank" rel="noopener">Linux中的计划任务—Crontab</a><br><a href="http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html" target="_blank" rel="noopener">每天一个linux命令（50）：crontab命令</a><br><a href="http://blog.163.com/victory_wxl/blog/static/14130530220115296180333/" target="_blank" rel="noopener">CentOS安装crontab及使用方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;crontab介绍&quot;&gt;&lt;a href=&quot;#crontab介绍&quot; class=&quot;headerlink&quot; title=&quot;crontab介绍&quot;&gt;&lt;/a&gt;crontab介绍&lt;/h2&gt;&lt;p&gt;crontab是unix下设置周期性执行任务的工具，类似于windows的计划任务。当系统启动时会自动启动cron进程并后台运行，系统每分钟就启动一次cron服务并检查是否有可执行的任务，若有则会自动执行该任务。&lt;/p&gt;
&lt;h2 id=&quot;安装crond服务&quot;&gt;&lt;a href=&quot;#安装crond服务&quot; class=&quot;headerlink&quot; title=&quot;安装crond服务&quot;&gt;&lt;/a&gt;安装crond服务&lt;/h2&gt;&lt;p&gt;Linux系统一般都默认安装有crond服务，可跳过该步&lt;/p&gt;
&lt;p&gt;安装crond服务&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install vixie-cron  &lt;span class=&quot;comment&quot;&gt;#vixie-cron是cron主程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install crontabs    &lt;span class=&quot;comment&quot;&gt;#crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动crond服务&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;service crond start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看crond服务是否启动&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;service crond status&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置开机启动&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chkconfig crond on&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://acshiryu.github.io/categories/notes/"/>
    
    
      <category term="Linux" scheme="https://acshiryu.github.io/tags/Linux/"/>
    
      <category term="crontab" scheme="https://acshiryu.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>poj1006 中国剩余定理</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1006-biorhythms.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1006-biorhythms.html</id>
    <published>2018-09-16T02:24:00.000Z</published>
    <updated>2018-09-16T02:20:08.381Z</updated>
    
    <content type="html"><![CDATA[<p>很明显这题要求的是使等式 $x + d = p \bmod 23 = e \bmod 28 = i \bmod 33$ 成立的最小的x，注意x不能为0</p><p>注意，有几组特殊数据供参考</p><ul><li>24 29 34 0 1</li><li>24 29 34 1 21252</li><li>24 29 34 2 21251</li><li>0 0  0  0 21252</li></ul><p>关于中国剩余定理，我理解的也不是很好，直接套的模板</p><figure class="highlight cpp"><figcaption><span>poj1006 Biorhythms</span><a href="/assets/code/poj/1006.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Extended_Euclid</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span>    <span class="comment">//扩展欧几里得算法  </span></span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">int</span> d;  </span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)  </span><br><span class="line">    {  </span><br><span class="line">        x=<span class="number">1</span>;y=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">return</span> a;  </span><br><span class="line">    }  </span><br><span class="line">    d=Extended_Euclid(b,a%b,y,x);  </span><br><span class="line">    y-=a/b*x;  </span><br><span class="line">    <span class="keyword">return</span> d;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Chinese_Remainder</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> w[],<span class="keyword">int</span> len)</span>    <span class="comment">//中国剩余定理  a[]存放余数  w[]存放两两互质的数  </span></span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">int</span> i,d,x,y,m,n,ret;  </span><br><span class="line">    ret=<span class="number">0</span>;  </span><br><span class="line">    n=<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;len;i++)  </span><br><span class="line">        n*=w[i];  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;len;i++)  </span><br><span class="line">    {  </span><br><span class="line">        m=n/w[i];  </span><br><span class="line">        d=Extended_Euclid(w[i],m,x,y);  </span><br><span class="line">        ret=(ret+y*m*a[i])%n;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> (n+ret%n)%n;  </span><br><span class="line">}  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>{  </span><br><span class="line">    <span class="keyword">int</span> n;  </span><br><span class="line">    <span class="keyword">int</span> w[<span class="number">3</span>],a[]={<span class="number">23</span>,<span class="number">28</span>,<span class="number">33</span>};</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;w[<span class="number">0</span>],&amp;w[<span class="number">1</span>],&amp;w[<span class="number">2</span>],&amp;n))     </span><br><span class="line">    {  </span><br><span class="line">        <span class="keyword">if</span> ( w[<span class="number">0</span>]==<span class="number">-1</span>&amp;&amp;w[<span class="number">1</span>]==<span class="number">-1</span>&amp;&amp;w[<span class="number">2</span>]==<span class="number">-1</span>&amp;&amp;n==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> t = Chinese_Remainder(w,a,<span class="number">3</span>) - n ;    <span class="comment">//引用中国剩余定理</span></span><br><span class="line">        t=t % ( <span class="number">23</span> * <span class="number">28</span> * <span class="number">33</span> ) ;</span><br><span class="line">        <span class="keyword">if</span> ( t &lt;= <span class="number">0</span> )</span><br><span class="line">            t += <span class="number">23</span> * <span class="number">28</span> * <span class="number">33</span> ;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: the next triple peak occurs in "</span>,k) ;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d days.\n"</span>,t);  </span><br><span class="line">        k++;</span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很明显这题要求的是使等式 $x + d = p \bmod 23 = e \bmod 28 = i \bmod 33$ 成立的最小的x，注意x不能为0&lt;/p&gt;
&lt;p&gt;注意，有几组特殊数据供参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;24 29 34 0 1&lt;/li&gt;
&lt;li&gt;24 29
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="中国剩余定理" scheme="https://acshiryu.github.io/tags/chinese-remainder-theorem/"/>
    
  </entry>
  
  <entry>
    <title>POJ1019 ---简单的数学找规律题</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1019-number-sequence.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1019-number-sequence.html</id>
    <published>2018-09-16T02:23:00.000Z</published>
    <updated>2018-09-16T02:19:52.432Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是给你这一串数字$11212312341234512345612345671234567812345678912345678910123456789101112345678910……$（未列完）</p><p>要我们求出第$n$个数是多少(从左到右看)，例如第2个是1，第三个是$2$，第八个是$2$；</p><p>如果仔细观察这一串数字，可以发现他可以还分为很多小串，假设第i小串是$123……i$，假设第$i$小串所占的空间是$a_i$，则通过对比$a_i$与$a_{i+1}$发现，</p><p>第$i+1$串只比第$i$串多一个数，即$i+1$，故他们所占的空间差就是第$i+1$所占的空间。</p><p>对任意一个数所占的空间很好求，即 $\left \lfloor \log_{10}k+1 \right \rfloor$；</p><p>然后就可以求出每一个串的起始位置，通过与n比较就可以确定n出现在那一个串里，最后在求出$n$在这个串里的相对位置，就可以求出该题的解</p><figure class="highlight cpp"><figcaption><span>poj1019 Number Sequence</span><a href="/assets/code/poj/1019.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">32000</span>] ;        <span class="comment">//用来存储每一个串所占的空间</span></span><br><span class="line">__int64 a[<span class="number">32000</span>] ;    <span class="comment">//用来存储每一个串的起始位置</span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">150000</span>];    <span class="comment">//打印出最大的一个串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    a1[<span class="number">0</span>]=<span class="number">0</span> ;</span><br><span class="line">    a1[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">2</span> ; i &lt; <span class="number">32000</span> ; i ++ )</span><br><span class="line">        a1[i] = a1[i<span class="number">-1</span>] + (<span class="keyword">int</span>)<span class="built_in">log10</span>(<span class="number">1.0</span>*i)+<span class="number">1</span>;    <span class="comment">//推导详见上文</span></span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt; <span class="number">32000</span> ; i ++ )</span><br><span class="line">        a[i]=a[i<span class="number">-1</span>]+a1[i<span class="number">-1</span>];                    <span class="comment">//上一个串的起点加所占空间就是下一个串的起点                </span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt; <span class="number">31300</span> ; i ++ )</span><br><span class="line">    {<span class="comment">//打印最大的一个串</span></span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">        str[<span class="number">0</span>]=<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">int</span> ti = i ;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span> (ti)</span><br><span class="line">        {</span><br><span class="line">            str[len]=ti%<span class="number">10</span>+<span class="string">'0'</span>;</span><br><span class="line">            ti=ti/<span class="number">10</span>;</span><br><span class="line">            len++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> ( len -- )</span><br><span class="line">        {</span><br><span class="line">            num[k]=str[len]-<span class="string">'0'</span>;</span><br><span class="line">            k++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> ( t-- )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> mn;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;mn;</span><br><span class="line">        <span class="keyword">for</span> ( i =<span class="number">1</span>; i &lt; <span class="number">32000</span> ; i ++ )</span><br><span class="line">            <span class="keyword">if</span> ( a[i]&gt;=mn )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( a[i] ==mn )</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {<span class="comment">//mn-a[i-1]+1就是其在第i-1个串里的相对位置</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;num[mn-a[i<span class="number">-1</span>]+<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是给你这一串数字$11212312341234512345612345671234567812345678912345678910123456789101112345678910……$（未列完）&lt;/p&gt;
&lt;p&gt;要我们求出第$n$个数是多少(从左到右看)，例如第2个
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="递归" scheme="https://acshiryu.github.io/tags/recursive/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="规律" scheme="https://acshiryu.github.io/tags/regular-pattern/"/>
    
  </entry>
  
  <entry>
    <title>poj1050经典DP的二维形式</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1050-to-the-max.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1050-to-the-max.html</id>
    <published>2018-09-16T02:22:00.000Z</published>
    <updated>2018-09-16T02:19:05.247Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是给出一个n×n的矩阵，要求在里面找一个子矩阵，使得子矩阵中的元素和是最大的，输出这个最大的元素和</p><p>解决这题首先要会求给n个数，问这n个数的最大子串和是多少？这一道题就是把上面的问题拓展到了二维，但解决方法类似</p><p>枚举所有的行组合，将这些行压缩成一个数列，进行上述操作就可以了</p><figure class="highlight cpp"><figcaption><span>poj1050 To the Max</span><a href="/assets/code/poj/1050.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j , k , t;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a[i][j] ;</span><br><span class="line">        <span class="keyword">int</span> sumall = - (<span class="number">1</span> &lt;&lt; <span class="number">30</span> );</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n  ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> sumdp;    </span><br><span class="line">            <span class="keyword">for</span> ( t = i + <span class="number">1</span> ; t &lt;= n ; t ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">int</span> sumi = <span class="number">0</span> ;</span><br><span class="line">                    <span class="keyword">for</span> ( k = i ; k &lt; t ; k ++ )</span><br><span class="line">                    {</span><br><span class="line">                        sumi += a[k][j] ;</span><br><span class="line">                    }</span><br><span class="line">                     sum[j] = sumi ;</span><br><span class="line">                    <span class="keyword">if</span> ( j )</span><br><span class="line">                        sumall = max ( sumall , sumdp = max ( sumdp + sum[j] , sum[j] ) ) ;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                       sumall = max ( sumall , sumdp = sum[j] ) ;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sumall &lt;&lt; <span class="built_in">endl</span> ; </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是给出一个n×n的矩阵，要求在里面找一个子矩阵，使得子矩阵中的元素和是最大的，输出这个最大的元素和&lt;/p&gt;
&lt;p&gt;解决这题首先要会求给n个数，问这n个数的最大子串和是多少？这一道题就是把上面的问题拓展到了二维，但解决方法类似&lt;/p&gt;
&lt;p&gt;枚举所有的行组合，将这些
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>通过POJ1061青蛙的约会来谈扩展欧几里得算法</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1061-frog-dating.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1061-frog-dating.html</id>
    <published>2018-09-16T02:21:00.000Z</published>
    <updated>2018-09-24T05:07:33.602Z</updated>
    
    <content type="html"><![CDATA[<p>对于题目中的数据，详见下表<br><img src="/assets/image/poj/1061.png" alt=""><br>故，可得两只青蛙跳四次就可以在点3处相遇</p><p>对于这道题可以知道，当他们相遇时距离原点的位移是相等的，则假设青蛙跳了t次后，则他们相对于原点的位移是</p><p>A：$(x+mt）\bmod l$</p><p>B：$(y+nt）\bmod l$</p><p>则可以列方程$(x+mt) -(y+nt)=cl (c为整数)$</p><p>则变形得$(m-n)t-cl=y-x$;</p><p>题目要求的就是要使等式成立时最小时的正整数t</p><p>在解决这个问题前，我们首先就应该知道什么是扩展欧几里得算法</p><p>即找出一对整数$(x，y)$，使得$ax+by=gcd(a，b)$。</p><p>注意，这里的$x$和$y$不一定是正数，也可能是负数或者$0$.</p><a id="more"></a><p>下面是扩展欧几里得算法的源程序：（参考刘汝佳的《算法竞赛入门经典》第179页）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gcd</span> <span class="params">( <span class="keyword">int</span> a , <span class="keyword">int</span> b , <span class="keyword">int</span>&amp; d , <span class="keyword">int</span>&amp; x , <span class="keyword">int</span>&amp; y )</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//a，b分别代表方程的系数，d返回a，b的最大公约数，x，y返回对应的解</span></span><br><span class="line">    <span class="keyword">if</span> ( ! b )<span class="comment">//当b等于0的时候，方程就变成了ax=gcd（a，0）=a，所以此时明显可以得到方程的解为x=1，y=0，此时d就为a</span></span><br><span class="line">        d = a , x =<span class="number">1</span> , y =<span class="number">0</span> ;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;<span class="comment">//递归求方程的解，等下证明</span></span><br><span class="line">          gcd ( b , a % b , d , y , x ) ;</span><br><span class="line">          y -= ( a / b ) * x ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>书上对该算法没有给出证明，只有“用数学归纳法并不难证明算法的正确性”一笔代过，现在，去我们就来证明该算法的正确性</p><p>当$b=0$时很好理解，详见上面的注释</p><p>关键是当$ b \neq 0 $，则我们先来假设方程的$ax+by=gcd(a，b)=d$的一个正整数解为$x_1$，$y_1$；别怀疑，这个方程一定有解</p><p>则有①：$ax_1+by_1=gcd(a，b)$ </p><p>又对于方程$bx +(a \bmod b)y = gcd (b ,a \bmod b )$ 有解$x_2$，$y_2$（假设）</p><p>则有②：$bx_2+(a \bmod b)y_2 = gcd (b ,a \bmod b) = gcd(a, b)$</p><p>又$a \bmod b = a - (a/b)b$；</p><p>则②式变为$bx_2+(a-(a/b)b)y_2=gcd(a,b)$;</p><p>即③：$ay_2 + b(x_2-(a/b)*y_2) = gcd (a,b)$;</p><p>对比①③得</p><p>$x_1=y_2$     </p><p>$y_1 =  x_2 - (a/b)y_2$</p><p>故，$ax+by=gcd(a，b)$的解只需要在方程$bx +(a \bmod b)y =gcd (b ,a \bmod b )$的解的基础上进行简单的运算就变成原来方程的解，因为gcd不断递推时会有$b=0$的情况出现，故可以通过递推来得到方程的解</p><p>然后得出了关于方程$ax+by=gcd(a，b)$的解$x_0$，$y_0$，</p><p>但如何要求题目所要求的解了；</p><p>假设方程是$ax+by=c$；</p><p>现在我们已经知道了$ax+by=gcd(a，b)$的解$x_0$，$y_0$，即$ax_0+by_0=gcd(a，b)$；</p><p>则等式两边同乘以$c/gcd(a，b)$则得</p><p>$ax_0c/gcd(a,b)+by_0c/gcd(a,b)=c$;(则可知人如果c不是$gcd(a，b)$的倍数则无解)</p><p>故可以得到原方程的一个解是$x_1=x_0c/gcd(a,b)$，$y_1=y_0c/gcd(a,b)$</p><p>再根据下面的结论就可以很好的得出此题的答案了</p><p><strong>设$a，b，c$为任意整数。若方程$ax+by=c$的一组整数解为$(x_0，y_0)$，则它的任意整数解都可以写成$(x_0+kb’,y_0-ka’)$,其中$a’=a/gcd(a，b)$，$b’=b/gcd(a，b)$，$k$为任意整数</strong></p><p>关于上面的结论很好证明，此处略。</p><p>刚开始的时候没有注意到怎样就解答系，WA了两次</p><figure class="highlight cpp"><figcaption><span>poj1061 青蛙的约会</span><a href="/assets/code/poj/1061.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gcd</span> <span class="params">( __int64 a , __int64 b , __int64 &amp;d , __int64 &amp;x , __int64 &amp;y )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ! b ) </span><br><span class="line">        d = a , x = <span class="number">1</span> , y = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        gcd ( b , a%b , d , y , x ) , y -= x * ( a / b ) ; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    __int64 s , t , m , n , l ;</span><br><span class="line">    <span class="keyword">while</span> ( ~ <span class="built_in">scanf</span> (<span class="string">"%I64d%I64d%I64d%I64d%I64d"</span> , &amp; s , &amp; t , &amp; m , &amp; n , &amp; l ) )</span><br><span class="line">    {</span><br><span class="line">        __int64 a , b , d , ans ;</span><br><span class="line">        __int64 x , y ;</span><br><span class="line">        a = l ;</span><br><span class="line">        b = m - n ;</span><br><span class="line">        ans = t - s ;</span><br><span class="line">        <span class="keyword">if</span> ( b &lt; <span class="number">0</span> )</span><br><span class="line">            b = n - m , ans = s - t ;</span><br><span class="line">        gcd ( a , b , d , x , y ) ;</span><br><span class="line">        <span class="keyword">if</span> ( ans % d )<span class="comment">//无解出现的情况</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>) ;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            __int64 tmp = l / d ;        </span><br><span class="line">            ans = (  ans / d * y ) % tmp ;<span class="comment">//求出答案，因答案要求最小，故还得对答案的“周期”取余</span></span><br><span class="line">            <span class="keyword">if</span> ( ans &lt; <span class="number">0</span> )<span class="comment">//如果出现的是负数，就要加上周期</span></span><br><span class="line">                ans += tmp ;</span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">"%I64d\n"</span>,ans);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于题目中的数据，详见下表&lt;br&gt;&lt;img src=&quot;/assets/image/poj/1061.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;故，可得两只青蛙跳四次就可以在点3处相遇&lt;/p&gt;
&lt;p&gt;对于这道题可以知道，当他们相遇时距离原点的位移是相等的，则假设青蛙跳了t次后，则他们相对于原点的位移是&lt;/p&gt;
&lt;p&gt;A：$(x+mt）\bmod l$&lt;/p&gt;
&lt;p&gt;B：$(y+nt）\bmod l$&lt;/p&gt;
&lt;p&gt;则可以列方程$(x+mt) -(y+nt)=cl (c为整数)$&lt;/p&gt;
&lt;p&gt;则变形得$(m-n)t-cl=y-x$;&lt;/p&gt;
&lt;p&gt;题目要求的就是要使等式成立时最小时的正整数t&lt;/p&gt;
&lt;p&gt;在解决这个问题前，我们首先就应该知道什么是扩展欧几里得算法&lt;/p&gt;
&lt;p&gt;即找出一对整数$(x，y)$，使得$ax+by=gcd(a，b)$。&lt;/p&gt;
&lt;p&gt;注意，这里的$x$和$y$不一定是正数，也可能是负数或者$0$.&lt;/p&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="同余方程" scheme="https://acshiryu.github.io/tags/congruence-equation/"/>
    
      <category term="扩展欧几里得" scheme="https://acshiryu.github.io/tags/extended-euclid/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1062 昂贵的聘礼 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1062-expensive-dowry.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1062-expensive-dowry.html</id>
    <published>2018-09-16T02:20:00.000Z</published>
    <updated>2018-09-16T02:16:48.203Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述的很清楚，关于答案的由来可以这样看，探险家花50买到编号4的物品，接着拿4和200金币买到编号3，然后拿着3和2000金币买到1，故总共花去了5250金币，并且交易中等级最高的是3，最低的是2，没超过1，故此发可行，故最少花费金币是5250.如果将题目的数据改为</p><blockquote><p>1 4<br>10000 3 2<br>2 8000<br>3 5000<br>1000 2 1<br>4 200<br>3000 1 1<br>4 200<br>50 2 0</p></blockquote><p>则答案不是5250了，因为刚才交易的顺序是4-3-1，而3的等级是1，1的等级是3，两者等级差超过了m（=1），故不能这样交换，则此时交换的顺序应该为4-2-1，此时花费最少金币为8250.</p><p>昨天开始做这道题目时感觉好难，因为，还没怎么写图论题，想套模板也不知道怎么套，就是有点思路，但不会写，也许是对图论题目不是很熟，今天AC了几道基本题后，再来做这题，有点感觉了，一次AC</p><p>要AC这道题，就要所选路径的等级差小于m，解决这个问题我的办法就是将等级限定在某个闭区间[a,a+m]，明显第一个人的等级必须要在这个区间内。然后就是选择Dijkstra的算法，每次加入点时就更新外面的点的最短路，注意，不在闭区间的点就不用考虑。先前没写过该算法，但好像Prim算法和这好像，就将Prim算法初略该变了一下，同样AC了</p><figure class="highlight cpp"><figcaption><span>poj1062 昂贵的聘礼</span><a href="/assets/code/poj/1062.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> cost[<span class="number">100</span>],lowcost[<span class="number">100</span>],level[<span class="number">100</span>];    <span class="comment">//各点的的花费，从0到各点最小费用，各点的等级</span></span><br><span class="line"><span class="keyword">int</span> change[<span class="number">100</span>][<span class="number">100</span>];                    <span class="comment">//拿i换j时还额外要的金币</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100</span>];                            <span class="comment">//确定i是否还要访问</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> m , n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n ) </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j , k ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">                change [i][j] = ( i == j ? <span class="number">0</span> : ( <span class="number">1</span> &lt;&lt; <span class="number">20</span> ) );<span class="comment">//初始化，如果不能交换就为最大</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {<span class="comment">//输入数值</span></span><br><span class="line">            <span class="keyword">int</span> a , b , c ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">            cost[i]=a;</span><br><span class="line">            level[i]=b;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; c ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">int</span> d , e ;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; d &gt;&gt; e;</span><br><span class="line">                change[i][d<span class="number">-1</span>]=e;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> minans = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>);<span class="comment">//定义结果</span></span><br><span class="line">        <span class="keyword">for</span> ( k = level[<span class="number">0</span>] - m ; k != level[<span class="number">0</span>] + <span class="number">1</span> ; k ++ )</span><br><span class="line">        {<span class="comment">//定义区间早[k，k+m]</span></span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="literal">true</span>,<span class="keyword">sizeof</span>(vis));    <span class="comment">//初始化标记数组</span></span><br><span class="line">            vis[<span class="number">0</span>]=<span class="literal">false</span>;                    <span class="comment">//0不用访问了</span></span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> ( level[j]&lt;k || level[j]&gt;k+m)</span><br><span class="line">                {<span class="comment">//如果不在该区间了。就不用访问了</span></span><br><span class="line">                    sum ++ ;</span><br><span class="line">                    vis[j]=<span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">                    lowcost[i] = change[<span class="number">0</span>][i] + cost [i] ;<span class="comment">//初始化各点到0的最短路（所发金币）</span></span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">1</span> ; j &lt; n - sum ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">int</span> one ;</span><br><span class="line">                <span class="keyword">int</span> ans = (<span class="number">1</span> &lt;&lt; <span class="number">30</span>);</span><br><span class="line">                <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">                {<span class="comment">//寻找花费金币最少的一点</span></span><br><span class="line">                    <span class="keyword">if</span>( vis[i] &amp;&amp; ans &gt; lowcost[i] )</span><br><span class="line">                    {</span><br><span class="line">                        ans = lowcost [i] ;</span><br><span class="line">                        one = i;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                vis [one] =<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">                {<span class="comment">//更新各点的最短路</span></span><br><span class="line">                    <span class="keyword">if</span> ( lowcost [i] &gt;( lowcost [one]- cost [one ] +change [one][i] + cost [i]) )</span><br><span class="line">                        lowcost [i] = lowcost [one]-cost [one ] +change [one][i] + cost [i] ;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {<span class="comment">//遍历从0到n的最短路，寻找所花金币最小的点</span></span><br><span class="line">                <span class="keyword">if</span> ( level[j]&gt;=k &amp;&amp; level[j]&lt;=k+m&amp;&amp;minans &gt; lowcost [j] )</span><br><span class="line">                    minans = lowcost [j] ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;minans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目描述的很清楚，关于答案的由来可以这样看，探险家花50买到编号4的物品，接着拿4和200金币买到编号3，然后拿着3和2000金币买到1，故总共花去了5250金币，并且交易中等级最高的是3，最低的是2，没超过1，故此发可行，故最少花费金币是5250.如果将题目的数据改为&lt;/
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="最短路" scheme="https://acshiryu.github.io/tags/shortest-road/"/>
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj1080 人类基因配对</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1080-human-gene-functions.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1080-human-gene-functions.html</id>
    <published>2018-09-16T02:19:00.000Z</published>
    <updated>2018-09-16T02:15:44.589Z</updated>
    
    <content type="html"><![CDATA[<p>是就是求两基因的相似度，先要在每个基因对中加入若干空格，然后再依次加上匹配度，详见上表，则相似度就是最大的匹配度和</p><p>例如对于测试数据一，加上空格则变成</p><blockquote><p>AGTGAT–G<br>-GT—-TAG</p></blockquote><p>则相似度就是$(-3)+5+5+(-2)+5+(-1)+5=14$，可以证明这是最大的，故为所求</p><p>此题为dp,详见代码</p><figure class="highlight cpp"><figcaption><span>poj1080 Human Gene Functions</span><a href="/assets/code/poj/1080.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[][<span class="number">5</span>]={    {<span class="number">5</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-3</span>},</span><br><span class="line">                {<span class="number">-1</span>,<span class="number">5</span>,<span class="number">-3</span>,<span class="number">-2</span>,<span class="number">-4</span>},</span><br><span class="line">                {<span class="number">-2</span>,<span class="number">-3</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">-2</span>},</span><br><span class="line">                {<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">5</span>,<span class="number">-1</span>},</span><br><span class="line">                {<span class="number">-3</span>,<span class="number">-4</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">0</span>} };</span><br><span class="line"><span class="keyword">char</span> str1[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">char</span> str2[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">int</span> xy=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">-1</span> )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt;= y ; i ++ )</span><br><span class="line">            xy += <span class="built_in">map</span>[str2[i]][<span class="number">4</span>] ;</span><br><span class="line">        <span class="keyword">return</span> xy ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( y == <span class="number">-1</span> )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt;= x ; i ++ )</span><br><span class="line">            xy += <span class="built_in">map</span>[str1[i]][<span class="number">4</span>] ;</span><br><span class="line">        <span class="keyword">return</span> xy ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ( vis[x][y] ) </span><br><span class="line">        <span class="keyword">return</span> ans[x][y] ;</span><br><span class="line">    vis[x][y]=<span class="literal">true</span>;</span><br><span class="line">    ans[x][y] = max ( DFS ( x - <span class="number">1</span> , y - <span class="number">1</span> ) + <span class="built_in">map</span>[str1[x]][str2[y]] , max ( DFS(x,y<span class="number">-1</span>)+<span class="built_in">map</span>[<span class="number">4</span>][str2[y]] , DFS(x<span class="number">-1</span>,y)+<span class="built_in">map</span>[str1[x]][<span class="number">4</span>] )) ;</span><br><span class="line">    <span class="keyword">return</span> ans[x][y] ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    f[<span class="string">'A'</span>]=<span class="number">0</span>;</span><br><span class="line">    f[<span class="string">'C'</span>]=<span class="number">1</span>;</span><br><span class="line">    f[<span class="string">'-'</span>]=<span class="number">4</span>;</span><br><span class="line">    f[<span class="string">'G'</span>]=<span class="number">2</span>;</span><br><span class="line">    f[<span class="string">'T'</span>]=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="keyword">int</span> len1 , len2 ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; len1 &gt;&gt; str1 ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; len1 ; i ++ )</span><br><span class="line">            str1[i]=f[str1[i]];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; len2 &gt;&gt; str2 ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; len2 ; i ++ )</span><br><span class="line">            str2[i]=f[str2[i]];</span><br><span class="line">        <span class="built_in">memset</span> ( vis , <span class="number">0</span> , <span class="keyword">sizeof</span> ( vis ) ) ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; DFS(len1<span class="number">-1</span>,len2<span class="number">-1</span>) &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;是就是求两基因的相似度，先要在每个基因对中加入若干空格，然后再依次加上匹配度，详见上表，则相似度就是最大的匹配度和&lt;/p&gt;
&lt;p&gt;例如对于测试数据一，加上空格则变成&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AGTGAT–G&lt;br&gt;-GT—-TAG&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj1088记忆化搜索</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1088-skiing.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1088-skiing.html</id>
    <published>2018-09-16T02:18:00.000Z</published>
    <updated>2018-09-16T02:15:27.010Z</updated>
    
    <content type="html"><![CDATA[<p>就是从各点进行搜索，并用以数组记录搜索的结果，一遍下次搜索该处时再用<br>然后遍历一下该数组，找到最大的一个元素</p><figure class="highlight cpp"><figcaption><span>poj1088 滑雪</span><a href="/assets/code/poj/1088.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> f[][<span class="number">2</span>]={</span><br><span class="line">{<span class="number">1</span>,<span class="number">0</span>},</span><br><span class="line">{<span class="number">0</span>,<span class="number">1</span>},</span><br><span class="line">{<span class="number">-1</span>,<span class="number">0</span>},</span><br><span class="line">{<span class="number">0</span>,<span class="number">-1</span>}</span><br><span class="line">;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">105</span>][<span class="number">105</span>] ;</span><br><span class="line"><span class="keyword">int</span> m , n ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span> <span class="params">( <span class="keyword">int</span> x , <span class="keyword">int</span> y )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> ( vis[x][y] != <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">return</span> vis[x][y] ;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; <span class="number">4</span> ; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> s = x + f[i][<span class="number">0</span>] ;</span><br><span class="line">        <span class="keyword">int</span> t = y + f[i][<span class="number">1</span>] ;</span><br><span class="line">        <span class="keyword">if</span> ( s &lt; <span class="number">0</span> || t &lt; <span class="number">0</span> || s &gt;= m || t &gt;= n )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">map</span>[s][t] &gt;= <span class="built_in">map</span>[x][y] )</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        sum = max ( sum , DFS ( s , t ) + <span class="number">1</span> ) ;</span><br><span class="line">    }</span><br><span class="line">    vis[x][y] = sum ;</span><br><span class="line">    <span class="keyword">return</span> sum ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; m ; i ++ )</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j  ++ )</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span> [i][j] ;</span><br><span class="line">        <span class="built_in">memset</span> ( vis , <span class="number">-1</span> , <span class="keyword">sizeof</span> ( vis ) ) ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; m ; i ++ )</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j  ++ )</span><br><span class="line">                sum = max ( sum , DFS ( i , j ) ) ; </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;就是从各点进行搜索，并用以数组记录搜索的结果，一遍下次搜索该处时再用&lt;br&gt;然后遍历一下该数组，找到最大的一个元素&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;poj1088 滑雪&lt;/span&gt;&lt;a href=&quot;/
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="记忆化搜索" scheme="https://acshiryu.github.io/tags/memory-search/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1125 Stockbroker Grapevine 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1125-stockbroker-grapevine.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1125-stockbroker-grapevine.html</id>
    <published>2018-09-16T02:17:00.000Z</published>
    <updated>2018-09-16T02:14:49.421Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意是股票经纪人要在一群人中散布一个谣言，而谣言只能在亲密的人中传递，题目各处了人与人之间的关系及传递谣言所用的时间，要求程序给出应以那个人为起点，可以在最短的时间内让所有的人都得知这个谣言。要注意从a到b传递的时间不一定等于从b到a的时间，如果没有方案能够让每一个人都知道谣言，则输出”disjoint”。（有关图的连通性，你懂得！但好像不用考虑这种情况一样能AC，只能说测试数据有点小水！）</p><p>题目数据的输入第一行为n，代表总人数，当n=0时结束程序，接着n行，第i+1行的第一个是一个整数t，表示第i个人与t个人的关系要好，接着有t对整数，每对的第一个数是j，表示i与j要好，第二个数是从i直接传递谣言到j所用的时间，数据的输出是两个整数，第一个为选点的散布谣言的起点，第二个整数时所有人得知谣言的最短时间</p><p>例如，对于数据1，可知如果从3开始传播，则1，2得知谣言的时间都是2，所用的时间比从1，2开始传播所用的时间要短，故程序的输出时3 2；</p><figure class="highlight cpp"><figcaption><span>poj1125 Stockbroker Grapevine</span><a href="/assets/code/poj/1125.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>);    <span class="comment">//最大值</span></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> x,y,d;    <span class="comment">//定义起点，终点，所用时间</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n,n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先将路径初始化，让d[i][i]=0,d[i][j]=inf;i =/= j;</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">105</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">105</span>;j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(i==j)</span><br><span class="line">                    d[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    d[i][j]=inf;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据输入的数据构造路径，注意题目的起点和终点范围是1……N，而数组是从0开始的，故要把所给的节点-1</span></span><br><span class="line">        <span class="keyword">for</span>(i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> m;    <span class="comment">//从i出发亲密人的个数</span></span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; m ; j ++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">int</span> a, b ;        <span class="comment">//与i亲密的人及传递谣言的时间</span></span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">                d[i][a<span class="number">-1</span>]=b;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Floyd算法，你懂的</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; n ; k ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">if</span>(d[i][j]&gt;d[i][k]+d[k][j])</span><br><span class="line">                        d[i][j]=d[i][k]+d[k][j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        prog dij ,pij;<span class="comment">//保存谣言散布的地点，终点，及时间，其中dij表示的是题目要求的，而pij表示的从固定点出发散布到某点的最长时间</span></span><br><span class="line">        dij.d=inf;<span class="comment">//初始时将时间初始化为最大（因为要求的是从任意点出发让所有人知道谣言的最短时间）</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            pij.d=<span class="number">0</span>;<span class="comment">//将从i散布谣言所用的时间初始化为0（因为此处要求的是从i出发散布谣言的最大时间）</span></span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(pij.d&lt;d[i][j])</span><br><span class="line">                {<span class="comment">//如果找到从i到j所用的时间要长与目前找到的从i出发用时的时间，则更新pij</span></span><br><span class="line">                    pij.d=d[i][j];</span><br><span class="line">                    pij.x=i;</span><br><span class="line">                    pij.y=j;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//如果从i出发用的时间比目前找到的用的最长时间还要短，则更新dij</span></span><br><span class="line">            <span class="keyword">if</span>(dij.d&gt;pij.d)</span><br><span class="line">                dij=pij;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(dij.d&gt;=inf)<span class="comment">//如果dij还一直是最大值，说明并不能让全部人得知谣言，则输出disjoint。但数据比较水，这个判断可省略 Orz</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"disjoint"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//输出起点和时间，注意要将起点标号+1</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;dij.x+<span class="number">1</span>&lt;&lt;<span class="string">' '</span>&lt;&lt;dij.d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意是股票经纪人要在一群人中散布一个谣言，而谣言只能在亲密的人中传递，题目各处了人与人之间的关系及传递谣言所用的时间，要求程序给出应以那个人为起点，可以在最短的时间内让所有的人都得知这个谣言。要注意从a到b传递的时间不一定等于从b到a的时间，如果没有方案能够让每一个人都
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="最短路" scheme="https://acshiryu.github.io/tags/shortest-road/"/>
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="floyd" scheme="https://acshiryu.github.io/tags/floyd/"/>
    
  </entry>
  
  <entry>
    <title>poj1141 Brackets Sequence(经典DP) 解题报告另附官方测试数据</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1141-brackets-sequence.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1141-brackets-sequence.html</id>
    <published>2018-09-16T02:16:00.000Z</published>
    <updated>2018-09-16T02:14:34.156Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写解题报告了！<br>这题的意思很简单，lrj的《算法艺术和信息学竞赛》里动态规划篇的第一个例题。就是给出一个括号串，求出最小的一个规格串，使得括号串是规格串的字串，如果有多个，因为是Special Judge，只用写出一个。一个串属于规格串要求满足下列条件之一</p><p>这题一眼就可以看出是DP，因为根据定义，一个问题可以划分为更小的子问题，如果对dp比较熟的话，求加括号数的转移方程可以很容写出，关键是括号家的位置怎么处理记录。我事这样处理的：<br>另开一个数组，记录dp分成更小的子问题的过程，这个数组的值分两部分，xxxy，我们用个位数表示划分子问题的情况，如果y是-1，表示是去掉两边的括号，y是8表示分裂成两部分。而前面的xxx部分表示划分的区域，最后，开始递推，输出括号的位置。这题有一个trick，就是最后一组数据是空串，而用scanf读取字符串会wa。详细看代码和测试数据</p><figure class="highlight cpp"><figcaption><span>poj1141 Brackets Sequence</span><a href="/assets/code/poj/1141.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> ac[<span class="number">200</span>][<span class="number">200</span>];<span class="comment">//记录放的位置  表示是xxxy  xxx表示参照点 y表示方的括号种类和具体方位 </span></span><br><span class="line"><span class="comment">//  当y为-1时表示两边去括号  当为8时分开  党为0-3表示括号的种类  详看printto函数</span></span><br><span class="line"><span class="keyword">char</span> to[<span class="number">255</span>];<span class="comment">//括号对应转换成整数  方便存储</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printto</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">switch</span>(k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">printf</span>(<span class="string">")"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">printf</span>(<span class="string">"("</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">"]"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">"["</span>);<span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(j&lt;i)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(ac[i][j]==<span class="number">-1</span>)</span><br><span class="line">{<span class="comment">//属于(S)或[S]类型    则先打印正括号 在打印S  最后打印反括号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,s[i]);</span><br><span class="line">print(i+<span class="number">1</span>,j<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,s[j]);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ac[i][j]%<span class="number">10</span>==<span class="number">8</span>)</span><br><span class="line">{<span class="comment">//属于AB  分别打印AB</span></span><br><span class="line">print(i,ac[i][j]/<span class="number">10</span>);</span><br><span class="line">print(ac[i][j]/<span class="number">10</span>+<span class="number">1</span>,j);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他就属于(S ,[S ,S] ,S)类型  根据括号的位置打印</span></span><br><span class="line"><span class="keyword">if</span>(ac[i][j]/<span class="number">10</span>==i)</span><br><span class="line">{<span class="comment">//属于(S ,[S 类型  先打印正反括号 再打印S</span></span><br><span class="line"><span class="keyword">if</span>(to[s[i]]&lt;<span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"()"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[]"</span>);</span><br><span class="line">print(i+<span class="number">1</span>,j);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{<span class="comment">//属于S] ,S)类型 先打印S 再打印正反括号</span></span><br><span class="line">print(i,j<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(to[s[j]]&lt;<span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"()"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[]"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">to[<span class="string">'('</span>]=<span class="number">0</span>;to[<span class="string">')'</span>]=<span class="number">1</span>;to[<span class="string">'['</span>]=<span class="number">2</span>;to[<span class="string">']'</span>]=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span>(gets(s))</span><br><span class="line">{<span class="comment">//因为测试数据中有空串  不能用scanf读取字符串，很多人就是wa在这里</span></span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">zero(dp);</span><br><span class="line">zero(ac);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">{<span class="comment">//初始化</span></span><br><span class="line">dp[i][i]=<span class="number">1</span>;</span><br><span class="line">ac[i][i]=i*<span class="number">10</span>+to[s[i]];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;len;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i+j&lt;len;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((to[s[i]]^to[s[i+j]])==<span class="number">1</span>&amp;&amp;((to[s[i]]%<span class="number">2</span>)==<span class="number">0</span>))</span><br><span class="line">{<span class="comment">//如果能够表示成（S）和[S]情况的话</span></span><br><span class="line"><span class="keyword">if</span>(j!=<span class="number">1</span>)</span><br><span class="line">dp[i][i+j]=dp[i+<span class="number">1</span>][i+j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][i+j]=<span class="number">0</span>;</span><br><span class="line">ac[i][i+j]=<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//表示成(S或者[S  则需要在i位置补全为()S或者[]S</span></span><br><span class="line">dp[i][i+j]=dp[i+<span class="number">1</span>][i+j]+<span class="number">1</span>;</span><br><span class="line">ac[i][i+j]=(i)*<span class="number">10</span>+to[s[i]];</span><br><span class="line"><span class="keyword">if</span>(dp[i][i+j]&gt;dp[i][i+j<span class="number">-1</span>]+<span class="number">1</span>)</span><br><span class="line">{<span class="comment">//表示成S)或者S]  则需要在i位置补全为S()或者S[]  ac记录最后一位的数字</span></span><br><span class="line">dp[i][i+j]=dp[i][i+j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">ac[i][i+j]=(i+j)*<span class="number">10</span>+to[s[i+j]];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//划分成A B 两部分向更小的部分递推  此时ac数组记录分开的位置</span></span><br><span class="line"><span class="keyword">for</span>(k=i+<span class="number">1</span>;k&lt;i+j<span class="number">-1</span>;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(dp[i][i+j]&gt;dp[i][k]+dp[k+<span class="number">1</span>][i+j])</span><br><span class="line">{</span><br><span class="line">dp[i][i+j]=dp[i][k]+dp[k+<span class="number">1</span>][i+j];</span><br><span class="line">ac[i][i+j]=k*<span class="number">10</span>+<span class="number">8</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line">print(<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没写解题报告了！&lt;br&gt;这题的意思很简单，lrj的《算法艺术和信息学竞赛》里动态规划篇的第一个例题。就是给出一个括号串，求出最小的一个规格串，使得括号串是规格串的字串，如果有多个，因为是Special Judge，只用写出一个。一个串属于规格串要求满足下列条件之一&lt;/p
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="字符串匹配" scheme="https://acshiryu.github.io/tags/string-match/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>POJ1142Smith Numbers一道简单的数学题</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1142-smith-numbers.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1142-smith-numbers.html</id>
    <published>2018-09-16T02:15:00.000Z</published>
    <updated>2018-09-16T02:14:05.685Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是要你找一个大于n的和数，并且满足他的各位的和与他所有的质因子的各位的和相等的最小的一个数，即此题的Smith Number</p><p>例如对于$4937774$，比他大的第一个数是$4937775$</p><p>因为$4+9+3+7+7+7+5=42$</p><p>又$4937775=3 \times 5 \times 5 \times 65837$</p><p>而$3+5+5+6+5+8+3+7=42$</p><p>故$4937775$是题目要求的答案。</p><p>这是一道纯数学题，可以通过暴力直接得到答案，因为这样的数分布比较密，</p><p>不过在做这题时学到了很好的一个思想，分治法，详见代码；</p><p>提交1次就A了，刚开始时想复杂了，准备筛选做的，看了一下讨论，好像没必要，可直接暴力</p><figure class="highlight cpp"><figcaption><span>poj1142 Smith Numbers</span><a href="/assets/code/poj/1142.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span> <span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//判断是否是素数</span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">sqrt</span> ( k + <span class="number">0.5</span> );</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= t ; i ++ )</span><br><span class="line">        <span class="keyword">if</span> ( k % i == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//求出该数各位上的和</span></span><br><span class="line">    <span class="keyword">int</span> i , s;</span><br><span class="line">    s = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> ( k != <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">        i = k % <span class="number">10</span> ;</span><br><span class="line">        s += i ;</span><br><span class="line">        k = k / <span class="number">10</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cut</span> <span class="params">(<span class="keyword">int</span> k )</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//分治法思想，如果是素数，就返回sum，否则，就将该数分成两部分，再来求各部分的质因子的sum</span></span><br><span class="line">    <span class="keyword">if</span> ( isprime(k) )</span><br><span class="line">        <span class="keyword">return</span> sum (k);</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = (<span class="keyword">int</span>) <span class="built_in">sqrt</span> (k + <span class="number">0.5</span>) ; i &gt;<span class="number">1</span> ; i -- )</span><br><span class="line">        <span class="keyword">if</span> ( k % i == <span class="number">0</span> ) </span><br><span class="line">            <span class="keyword">return</span> cut (i) + cut (k / i) ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n , n )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">while</span> ( n ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (!isprime(n)&amp;&amp;sum(n)==cut(n))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是要你找一个大于n的和数，并且满足他的各位的和与他所有的质因子的各位的和相等的最小的一个数，即此题的Smith Number&lt;/p&gt;
&lt;p&gt;例如对于$4937774$，比他大的第一个数是$4937775$&lt;/p&gt;
&lt;p&gt;因为$4+9+3+7+7+7+5=42$&lt;/
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj1191棋盘分割(动态规划)</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1191-checkerboard-segmentation.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1191-checkerboard-segmentation.html</id>
    <published>2018-09-16T02:14:00.000Z</published>
    <updated>2018-09-16T02:13:51.082Z</updated>
    
    <content type="html"><![CDATA[<p>黑书上面动态规划篇的第二道例题，题目大意很简单，可以记忆化搜索或dp做。最近在训练dp，直接dp做了，但记忆化搜索更简单。黑书上面的动态规划转移方程也写得很简单，用五层for循环嵌套。我的方程和他的略有不同，但大体意思是一样的！</p><p>$dp_{kx_{1}y_{1}x_{2}y_{2}}$为下列式子中最小的一个</p><p>$dp_{(k-1)x_{1}y_{1}ay_{2}} + dp_{0(a+1)y_{1}x_{2}y_{2}}$ 其中$x_{1}≤a﹤x_{2}$<br>$dp_{(k-1)(a+1)y_{1}x_{2}y_{2}} + dp_{0x_{1}y_{1}ay_{2}}$ 其中$x_{1}≤a﹤x_{2}$<br>$dp_{(k-1)x_{1}y_{1}x_{2}a} + dp_{0x_{1}(a+1)x_{2}y_{2}}$ 其中$y_{1}≤a﹤y_{2}$<br>$dp_{(k-1)x_{1}(a+1)x_{2}y_{2}} + dp_{0x_{1}y_{1}x_{2}a}$ 其中$y_{1}≤a﹤y_{2}$</p><p>然后就是5个嵌套的for循环，这题还有一个问题，不知道为什么，我之前用int和__int64都wa了，改成long double才ac了，难道卡在精度上？</p><figure class="highlight cpp"><figcaption><span>poj1191 棋盘分割</span><a href="/assets/code/poj/1191.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> dp[<span class="number">20</span>][<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">double</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ans= __int64(sum[m][n]-sum[m][y]-sum[x][n]+sum[x][y]);</span><br><span class="line"><span class="keyword">return</span> ans*ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">zero(sum);</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;j++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">sum[i][j]=sum[i<span class="number">-1</span>][j]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>]+sum[i][j<span class="number">-1</span>]+a[i][j];</span><br><span class="line">num+=a[i][j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;j++)</span><br><span class="line"><span class="keyword">for</span>(x=i;x&lt;=<span class="number">8</span>;x++)</span><br><span class="line"><span class="keyword">for</span>(y=j;y&lt;=<span class="number">8</span>;y++)</span><br><span class="line">dp[<span class="number">0</span>][i][j][x][y]=count(i<span class="number">-1</span>,j<span class="number">-1</span>,x,y);</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;n;k++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">8</span>;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">1</span>;x+i&lt;=<span class="number">8</span>;x++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(y=<span class="number">1</span>;y+j&lt;=<span class="number">8</span>;y++)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">dp[k][x][y][x+i][y+j]=<span class="keyword">long</span> <span class="keyword">double</span>((<span class="number">1</span>)&lt;&lt;<span class="number">30</span>);</span><br><span class="line"><span class="keyword">for</span>(t=x;t&lt;x+i;t++)</span><br><span class="line">{</span><br><span class="line">dp[k][x][y][x+i][y+j]=min(dp[k][x][y][x+i][y+j],dp[k<span class="number">-1</span>][t+<span class="number">1</span>][y][x+i][y+j]+dp[<span class="number">0</span>][x][y][t][y+j]);</span><br><span class="line">dp[k][x][y][x+i][y+j]=min(dp[k][x][y][x+i][y+j],dp[k<span class="number">-1</span>][x][y][t][y+j]+dp[<span class="number">0</span>][t+<span class="number">1</span>][y][x+i][y+j]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(t=y;t&lt;y+j;t++)</span><br><span class="line">{</span><br><span class="line">dp[k][x][y][x+i][y+j]=min(dp[k][x][y][x+i][y+j],dp[k<span class="number">-1</span>][x][y][x+i][t]+dp[<span class="number">0</span>][x][t+<span class="number">1</span>][x+i][y+j]);</span><br><span class="line">dp[k][x][y][x+i][y+j]=min(dp[k][x][y][x+i][y+j],dp[k<span class="number">-1</span>][x][t+<span class="number">1</span>][x+i][y+j]+dp[<span class="number">0</span>][x][y][x+i][t]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ans=<span class="number">1.0</span>*dp[n<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">8</span>][<span class="number">8</span>]/n-<span class="keyword">long</span> <span class="keyword">double</span>(<span class="number">1.0</span>*num/n)*<span class="keyword">long</span> <span class="keyword">double</span>(<span class="number">1.0</span>*num/n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,<span class="built_in">sqrt</span>(ans));</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;黑书上面动态规划篇的第二道例题，题目大意很简单，可以记忆化搜索或dp做。最近在训练dp，直接dp做了，但记忆化搜索更简单。黑书上面的动态规划转移方程也写得很简单，用五层for循环嵌套。我的方程和他的略有不同，但大体意思是一样的！&lt;/p&gt;
&lt;p&gt;$dp_{kx_{1}y_{1
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>POJ1222EXTENDED LIGHTS OUT 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1222-extended-lights-out.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1222-extended-lights-out.html</id>
    <published>2018-09-16T02:13:00.000Z</published>
    <updated>2018-09-16T02:13:37.444Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意是给你一个5*6的矩阵，矩阵里每一个单元都有一个灯和一个开关，如果按下此开关，那么开关所在位置的那个灯和开关前后左右的灯的状态都会改变(即由亮到不亮或由不亮到亮)。给你一个初始的灯的状态，问怎样控制每一个开关使得所有的灯最后全部熄灭，保证解唯一</p><p>刚开始看时，感觉像搜索，但状态太多，有2^30，必然超时。但可以发现，每一开关的影响是受上下左右影响的，也就是说，如果我第一行的开关状态定下来的话，那么第二行的开关状态也就定下来了，以此类推到最高行，如果最后最高行和目标状态一样，那么就发现答案。解决开关中间要涉及到一些位运算，详细参考代码！这题也可以用高斯消元做。</p><figure class="highlight cpp"><figcaption><span>poj1222 EXTENDED LIGHTS OUT</span><a href="/assets/code/poj/1222.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    k=k^t;</span><br><span class="line">    k=k^(t&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    k=k^(t&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    k=k&amp;((<span class="number">1</span>&lt;&lt;<span class="number">6</span>)<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T,cas=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i,j,k;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">                k=k*<span class="number">2</span>+a[i][j];</span><br><span class="line">            }</span><br><span class="line">            mat[i]=k;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> bin=(<span class="number">1</span>&lt;&lt;<span class="number">6</span>)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> up;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=bin;i++)</span><br><span class="line">        {</span><br><span class="line">            ans[<span class="number">0</span>]=i;</span><br><span class="line">            k=mat[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)</span><br><span class="line">            {</span><br><span class="line">                up=test(k,ans[j<span class="number">-1</span>]);</span><br><span class="line">                k=mat[j]^ans[j<span class="number">-1</span>];</span><br><span class="line">                ans[j]=up;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(up==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"PUZZLE #%d\n"</span>,cas++);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">5</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="keyword">bool</span>(ans[i]&amp;(<span class="number">1</span>&lt;&lt;j)));</span><br><span class="line">                <span class="keyword">if</span>(j!=<span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意是给你一个5*6的矩阵，矩阵里每一个单元都有一个灯和一个开关，如果按下此开关，那么开关所在位置的那个灯和开关前后左右的灯的状态都会改变(即由亮到不亮或由不亮到亮)。给你一个初始的灯的状态，问怎样控制每一个开关使得所有的灯最后全部熄灭，保证解唯一&lt;/p&gt;
&lt;p&gt;刚开始
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="枚举" scheme="https://acshiryu.github.io/tags/enumerate/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="位运算" scheme="https://acshiryu.github.io/tags/bit-operation/"/>
    
      <category term="高斯消元" scheme="https://acshiryu.github.io/tags/gaussian-elimination/"/>
    
  </entry>
  
  <entry>
    <title>POJ1251 Jungle Roads 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1251-jungle-roads.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1251-jungle-roads.html</id>
    <published>2018-09-16T02:12:00.000Z</published>
    <updated>2018-09-16T02:13:24.204Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意在相通n个岛屿的所有桥都坏了，要重修，重修每一个桥所用的时间不同，求重修使每个岛屿都间接或直接与其他岛屿相同时所用的的最短时间（只有修完一个桥后才可修下一个桥）。简言之就是求最小生成树。</p><p>对于数据，数据输入的第一行n代表岛屿的个数，当为0是结束程序，接着n-1行开始时为这岛屿的编号，用大写字母表示，接着是一个整数m，表示与该岛屿连接的字典序大于该岛屿编号的个数，然后该行输入m对数据，每对数据的第一个字母表示与该岛屿连通的岛屿的编号，第二个数字表示要重修两岛屿之间桥所需要的时间，输出数据见样例及原题。</p><p>该题图为稀疏图，用Kruskal算法比较好，经过昨天对于生成树的题目的训练，今天终于对该类题目有所感觉，这题只是纯粹的求最小生成树，难度不大，我1次提交就AC了，点此进入关于Kruskal算法的详细介绍</p><figure class="highlight cpp"><figcaption><span>poj1251 Jungle Roads</span><a href="/assets/code/poj/1251.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Kruskal算法的基本思想</span></span><br><span class="line"><span class="comment">假设WN=(V,{E})是一个含有n个顶点的连通网，则按照克鲁斯卡尔算法构造最小生成树的过程为：</span></span><br><span class="line"><span class="comment">先构造一个只含n个顶点，而边集为空的子图，</span></span><br><span class="line"><span class="comment">若将该子图中各个顶点看成是各棵树上的根结点，则它是一个含有n棵树的一个森林。</span></span><br><span class="line"><span class="comment">之后，从网的边集E中选取一条权值最小的边，若该条边的两个顶点分属不同的树，则将其加入子图，</span></span><br><span class="line"><span class="comment">也就是说，将这两个顶点分别所在的两棵树合成一棵树；</span></span><br><span class="line"><span class="comment">反之，若该条边的两个顶点已落在同一棵树上，则不可取，而应该取下一条权值最小的边再试之。</span></span><br><span class="line"><span class="comment">依次类推，直至森林中只有一棵树，也即子图中含有n-1条边为止。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = ( <span class="number">1</span> &lt;&lt; <span class="number">20</span> ) ;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">27</span>];        <span class="comment">//    并查集，用于判断两点是否直接或间接连通</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span> {</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">}<span class="built_in">map</span>[<span class="number">80</span>];<span class="comment">//存储边的信息，包括起点/终点/权值</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">( prog a , prog b)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//排序函数，将边根据权值从小到大排</span></span><br><span class="line">    <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//并查集的find，不解释</span></span><br><span class="line">    <span class="keyword">return</span> x==p[x]?x:p[x]=find(p[x]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n , n ) </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="keyword">for</span>  ( i = <span class="number">0</span> ; i &lt; <span class="number">27</span>  ; i ++ )</span><br><span class="line">            p[i] = i ;<span class="comment">//并查集初始化</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n - <span class="number">1</span> ; i ++ )</span><br><span class="line">        {<span class="comment">//构造边的信息</span></span><br><span class="line">            <span class="keyword">char</span> str[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">int</span> m;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str &gt;&gt; m ;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; m ; j ++ ,k ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">char</span> str2[<span class="number">3</span>];</span><br><span class="line">                <span class="keyword">int</span> t;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; str2 &gt;&gt; t ;</span><br><span class="line">                <span class="built_in">map</span>[k].u=(str[<span class="number">0</span>]-<span class="string">'A'</span>);</span><br><span class="line">                <span class="built_in">map</span>[k].v=(str2[<span class="number">0</span>]-<span class="string">'A'</span>);</span><br><span class="line">                <span class="built_in">map</span>[k].w=t;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        sort ( <span class="built_in">map</span> , <span class="built_in">map</span> + k , cmp );<span class="comment">//将边从小到大排序</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;        <span class="comment">//所要求的答案</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; k ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x = find(<span class="built_in">map</span>[i].u);</span><br><span class="line">            <span class="keyword">int</span> y = find(<span class="built_in">map</span>[i].v);</span><br><span class="line">            <span class="keyword">if</span>( x!=y)</span><br><span class="line">            {<span class="comment">//如果两点不在同一连通分量里，则将两点连接，并存储该边</span></span><br><span class="line">                ans+=<span class="built_in">map</span>[i].w;</span><br><span class="line">                p[x]=y;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意在相通n个岛屿的所有桥都坏了，要重修，重修每一个桥所用的时间不同，求重修使每个岛屿都间接或直接与其他岛屿相同时所用的的最短时间（只有修完一个桥后才可修下一个桥）。简言之就是求最小生成树。&lt;/p&gt;
&lt;p&gt;对于数据，数据输入的第一行n代表岛屿的个数，当为0是结束程序，接
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="kruskal" scheme="https://acshiryu.github.io/tags/kruskal/"/>
    
      <category term="生成树" scheme="https://acshiryu.github.io/tags/spanning-tree/"/>
    
  </entry>
  
  <entry>
    <title>POJ1258 Agri-Net 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1258-agri-net.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1258-agri-net.html</id>
    <published>2018-09-16T02:11:00.000Z</published>
    <updated>2018-09-16T02:13:07.549Z</updated>
    
    <content type="html"><![CDATA[<p>题目给出了n个农场之间的距离，先要让这n个农场全部覆盖网络，求所用网线的最小长度，典型的最小生成树问题，比较简单，因为是稠密图，可直接用Prim算法解，我提交1次就A了，详情见代码.</p><figure class="highlight cpp"><figcaption><span>poj1258 Agri-Net</span><a href="/assets/code/poj/1258.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Prim算法基本思想</span></span><br><span class="line"><span class="comment">1\. 在图G=(V, E) （V表示顶点 ，E表示边）中，从集合V中任取一个顶点（例如取顶点v0）放入集合 U中，这时 U={v0}，集合T(E)为空。</span></span><br><span class="line"><span class="comment">2\. 从v0出发寻找与U中顶点相邻（另一顶点在V中）权值最小的边的另一顶点v1，并使v1加入U。即U={v0,v1 }，同时将该边加入集合T(E)中。</span></span><br><span class="line"><span class="comment">3\. 重复2，直到U=V为止。</span></span><br><span class="line"><span class="comment">这时T(E)中有n-1条边，T = (U, T(E))就是一棵最小生成树。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> lowcost[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>) ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            lowcost[i]=<span class="built_in">map</span>[<span class="number">0</span>][i];    <span class="comment">//初始化各点到集合的距离</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="comment">//记录生成树的长度</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n<span class="number">-1</span> ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> mindis=inf;</span><br><span class="line">            <span class="keyword">int</span> minone;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {<span class="comment">//寻找到集合距离最近的点</span></span><br><span class="line">                <span class="keyword">if</span>(lowcost[j]&amp;&amp;mindis&gt;lowcost[j])</span><br><span class="line">                {</span><br><span class="line">                    mindis=lowcost[j];</span><br><span class="line">                    minone=j;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            ans+=lowcost[minone];</span><br><span class="line">            lowcost[minone]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {<span class="comment">//更新各点到集合的距离</span></span><br><span class="line">                <span class="keyword">if</span>(lowcost[j]&gt;<span class="built_in">map</span>[minone][j])</span><br><span class="line">                    lowcost[j]=<span class="built_in">map</span>[minone][j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目给出了n个农场之间的距离，先要让这n个农场全部覆盖网络，求所用网线的最小长度，典型的最小生成树问题，比较简单，因为是稠密图，可直接用Prim算法解，我提交1次就A了，详情见代码.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="生成树" scheme="https://acshiryu.github.io/tags/spanning-tree/"/>
    
      <category term="prim" scheme="https://acshiryu.github.io/tags/prim/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1274 The Perfect Stall 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1274-the-perfect-stall.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1274-the-perfect-stall.html</id>
    <published>2018-09-16T02:11:00.000Z</published>
    <updated>2018-09-16T02:10:58.780Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是求二分图的最大匹配，算得上是基础题，直接运用匈牙利算法可以求解，关于匈牙利算法昨天找了一天资料，看了无数ppt都没有搞懂，那些讲解都太抽象了，直接文字表述，连个图都没有，现在也只是对该算法一知半解。匈牙利算法的思想说白了就是要你从二分图中找出一条路径来，让路径的起点和终点都是还没有匹配过的点，并且路径经过的连线是一条没被匹配、一条已经匹配过，再下一条又没匹配这样交替地出现。找到这样的路径后，显然路径里没被匹配的连线比已经匹配了的连线多一条，于是修改匹配图，把路径里所有匹配过的连线去掉匹配关系，把没有匹配的连线变成匹配的，这样匹配数就比原来多1个。不断执行上述操作，直到找不到这样的路径为止。（传自Matrix67大牛的博客）</p><p>第一次做，刚开始不懂，看了nocow的代码后，自己当CPU运行了一遍，知道了大概，直接套模板把这题给AC了<br><a id="more"></a><br><figure class="highlight cpp"><figcaption><span>poj1274 The Perfect Stall</span><a href="/assets/code/poj/1274.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">map</span>[<span class="number">201</span>][<span class="number">201</span>], vis[<span class="number">201</span>] ;    <span class="comment">//map保存两点间是否有边，vis保存每次操作后该数是否操作过</span></span><br><span class="line"><span class="keyword">int</span> link[<span class="number">201</span>] ;                    <span class="comment">//link保存改点连接的另一点的序号</span></span><br><span class="line"><span class="keyword">int</span> m , n ;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> k )</span> </span></span><br><span class="line"><span class="function"></span>{<span class="comment">//对k寻找匹配，如果找到就记录匹配，并返回true,否则返回false</span></span><br><span class="line">    <span class="keyword">int</span> i , j ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt;= n ; i ++ )</span><br><span class="line">    {<span class="comment">//对所有节点遍历一遍，寻找没有访问过并且与i连同的点</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">map</span> [k][i] ==<span class="literal">true</span> &amp;&amp; ! vis[i] )</span><br><span class="line">        {</span><br><span class="line">            vis [i] = <span class="literal">true</span> ;    <span class="comment">//记录改点以被访问</span></span><br><span class="line">            <span class="keyword">if</span> ( link [i] == <span class="number">0</span> || find ( link [i] ) )</span><br><span class="line">            {<span class="comment">//如果该点还未与其他点匹配，或还能找到其他点能与该点匹配的点j进行匹配，即存在增广路</span></span><br><span class="line">                link [ i ] = k ;    <span class="comment">//将i与k进行匹配</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n ) </span><br><span class="line">    {<span class="comment">//初始化，接受数据的输入</span></span><br><span class="line">        <span class="built_in">memset</span> ( <span class="built_in">map</span> , <span class="literal">false</span> , <span class="keyword">sizeof</span> ( <span class="built_in">map</span> ) ) ;</span><br><span class="line">        <span class="built_in">memset</span> ( link , <span class="number">0</span> , <span class="keyword">sizeof</span> ( link ) ) ;</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt;= m ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> s ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s ;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; s ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">int</span> k ;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; k ;</span><br><span class="line">                <span class="built_in">map</span> [i][k] = <span class="literal">true</span> ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;    <span class="comment">//最大匹配数</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt;= m ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">memset</span> ( vis , <span class="literal">false</span> , <span class="keyword">sizeof</span> ( vis ) ) ;<span class="comment">//对所有数据都初始为0，表明数据还没有试探</span></span><br><span class="line">            <span class="keyword">if</span> ( find ( i ) ) <span class="comment">//如果对i找到一个匹配</span></span><br><span class="line">                ans ++ ;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目大意就是求二分图的最大匹配，算得上是基础题，直接运用匈牙利算法可以求解，关于匈牙利算法昨天找了一天资料，看了无数ppt都没有搞懂，那些讲解都太抽象了，直接文字表述，连个图都没有，现在也只是对该算法一知半解。匈牙利算法的思想说白了就是要你从二分图中找出一条路径来，让路径的起点和终点都是还没有匹配过的点，并且路径经过的连线是一条没被匹配、一条已经匹配过，再下一条又没匹配这样交替地出现。找到这样的路径后，显然路径里没被匹配的连线比已经匹配了的连线多一条，于是修改匹配图，把路径里所有匹配过的连线去掉匹配关系，把没有匹配的连线变成匹配的，这样匹配数就比原来多1个。不断执行上述操作，直到找不到这样的路径为止。（传自Matrix67大牛的博客）&lt;/p&gt;
&lt;p&gt;第一次做，刚开始不懂，看了nocow的代码后，自己当CPU运行了一遍，知道了大概，直接套模板把这题给AC了&lt;br&gt;
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="二分图" scheme="https://acshiryu.github.io/tags/binary-picture/"/>
    
      <category term="最大匹配" scheme="https://acshiryu.github.io/tags/maximum-match/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="匈牙利算法" scheme="https://acshiryu.github.io/tags/hungarian-algorithm/"/>
    
  </entry>
  
  <entry>
    <title>poj1284 欧拉函数的运用</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1284-primitive-roots.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1284-primitive-roots.html</id>
    <published>2018-09-16T02:10:00.000Z</published>
    <updated>2018-09-16T02:10:07.863Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是给出一个奇素数，求出他的原根的个数,定义$n$的原根$x$ 满足条件$0 &lt; x &lt; n $,并且有集合$\{ (x_i \bmod n) \mid 1 &lt;= i &lt;=n-1 \}$ 和集合$\{ 1, …, n-1 \}$相等</p><p>关于这道题。如果知道欧拉函数的话，看出的答案是$\phi(n-1)$其实也不难</p><blockquote><p>定理：如果$p$有原根，则它恰有$\phi(\phi(p))$个不同的原根</p></blockquote><p>如果$p$为素数，则$\phi(p)=p-1$,因此本题答案就是有$phi(p-1)$个原根 </p><p>关于证明我也不会，这些都是在Discuss里搜索到的，证明过程也算来自那吧！</p><p>对于给出的素数p,首先要明确一点：p的原根必然是存在的(这一点已由Euler证明，此处不再赘述)，因此，不妨设其中的一个元根是$a_0(1 \leq a_0 \leq p-1)$</p><p>按照题目的定义，$a^i_0 \bmod p (1 \leq i \leq p-1) $的值是各不相同的，再由$p$是素数，联系Fermat小定理可知：$q^{p-1} \bmod p=1(1 \leq q \leq p-1)$(这个在下面有用)</p><p>下面证明,如果$b$是$p$的一个异于$a$的元根，不妨令$b$与$a^t_0$关于$p$同余，那么必然有$gcd(t,p-1)=1$,亦即$t$与$p-1$互质;反之亦然;</p><p>证明：</p><p>若$d=gcd(t,p-1)&gt;1$,令$t=k_1 \times d$，$p-1=k_2 \times d$,则由Fermat可知$(a^{k_1d}_0)^{k_2} \bmod p=(a^{k_2*d}_0)^{k_1} \bmod p = (a^{p-1}_0)^{k_1} \bmod p = 1$</p><p>再由$b=a^t_0 (\bmod p)$，结合上面的式子可知：$(a^{k_1d}_0)^{k_2} \bmod n = b^{k_2} \bmod p=1$;</p><p>然而$b^0 \bmod p=1$,所以$b^0=b^{k_2} (\bmod p)$,所以$b^i \bmod p$的循环节$=k_2 &lt; p-1$，因此这样的$b$不是原根；</p><p>再证，</p><p>若$d=gcd(t,p-1)=1$，即$t$与$p-1$互质，那么$b$必然是原根；</p><p>否则假设存在$1 \leq j &lt; i \leq p-1$，使得$b^j=b^i (\bmod p)$，即$a^{jt}_0=a^{it}_0 (\bmod p)$,由$a_0$是元根，即$a_0$的循环节长度是$(p-1)$可知，$(p-1) | (it-jt) \rightarrow (p-1) | (i-j)t$,由于$p$与$t$互质，所以$(p-1) | (i-j)$,但是根据假设,$0 &lt; i-j &lt; p-1$,得出矛盾，结论得证；</p><p>由上面的两个证明可知$b=a^t_0 (\bmod p)$，是一个元根的充要条件是$t$与$p-1$互质，所有的这些$t$的总个数就是$\phi(p-1)$;具体参见<a href="http://poj.org/showmessage?message_id=158630" target="_blank" rel="noopener">http://poj.org/showmessage?message_id=158630</a></p><p>然后直接套用那个求欧拉函数的模板1A了，我发现我最近好喜欢套模板啊，没办法，知道的太少了</p><figure class="highlight cpp"><figcaption><span>poj1284 Primitive Roots</span><a href="/assets/code/poj/1284.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> phi[<span class="number">66000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i , j ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">2</span> ; i &lt;=  <span class="number">65536</span> ; i ++ )</span><br><span class="line">        phi[i]=<span class="number">0</span>;</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">2</span> ; i &lt;=  <span class="number">65536</span> ; i ++ )</span><br><span class="line">        <span class="keyword">if</span> ( !phi[i] )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> ( j = i ; j &lt;=  <span class="number">65536</span> ; j += i )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> ( !phi[j] )</span><br><span class="line">                    phi[j] = j ;</span><br><span class="line">                phi[j] = phi[j] / i * (i - <span class="number">1</span> ) ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;phi[n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是给出一个奇素数，求出他的原根的个数,定义$n$的原根$x$ 满足条件$0 &amp;lt; x &amp;lt; n $,并且有集合$\{ (x_i \bmod n) \mid 1 &amp;lt;= i &amp;lt;=n-1 \}$ 和集合$\{ 1, …, n-1 \}$相等&lt;/p&gt;

      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="最大公约数" scheme="https://acshiryu.github.io/tags/greatest-common-divisor/"/>
    
      <category term="欧拉函数" scheme="https://acshiryu.github.io/tags/euler-function/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="费马小定理" scheme="https://acshiryu.github.io/tags/fermat-little-theorem/"/>
    
  </entry>
  
  <entry>
    <title>POJ1321 棋盘问题 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1321-checkerboard-problem.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1321-checkerboard-problem.html</id>
    <published>2018-09-16T02:09:00.000Z</published>
    <updated>2018-09-16T02:07:51.822Z</updated>
    
    <content type="html"><![CDATA[<p>简单搜索题，题目意思很明了，其中<code>#</code>可以放棋子，<code>·</code>不能，并且同一行或同一列不能放两个棋子，</p><p>这题只需要深搜，每次从上一个放棋子地方的下一行开始寻找可以放棋子的地方，当发现该点时，记录行数，并更新棋盘，将于此点同行同列的都更新为<code>·</code>，如果找不到，则返回，当把所有棋子都放上去的时候，则找到一个接，计数+1，就这样进行搜索，可以保证AC</p><figure class="highlight cpp"><figcaption><span>poj1321 棋盘问题</span><a href="/assets/code/poj/1321.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span> {</span></span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">map</span> [<span class="number">10</span>][<span class="number">10</span>];    <span class="comment">//棋盘</span></span><br><span class="line">    <span class="keyword">int</span> x;                <span class="comment">//上一个棋子的行数</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> m;                    <span class="comment">//棋盘大小</span></span><br><span class="line"><span class="keyword">int</span> ans;                <span class="comment">//解的个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(prog tmp,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    {<span class="comment">//如果要求放的所有棋子都已经放好了，则索命找到了答案，则计数+1并返回</span></span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> i , j ;</span><br><span class="line">    <span class="keyword">for</span> ( i = tmp.x + <span class="number">1</span> ; i &lt;= m -n; i ++ )</span><br><span class="line">    {<span class="comment">//从上个棋子的下一行开始搜，如果剩余可放棋子数明显大于剩余行数，则可以知道此时无解</span></span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; m ; j ++ )</span><br><span class="line">        {<span class="comment">//从该行的第一个棋盘开始搜到最后一个</span></span><br><span class="line">            <span class="keyword">if</span> ( tmp.<span class="built_in">map</span>[i][j]==<span class="string">'#'</span>)</span><br><span class="line">            {<span class="comment">//如果找到了一点可以放棋子</span></span><br><span class="line">                prog tmp2;</span><br><span class="line">                tmp2=tmp;</span><br><span class="line">                tmp2.x=i;<span class="comment">//记下改点的行数</span></span><br><span class="line">                <span class="keyword">int</span> k;</span><br><span class="line">                <span class="keyword">for</span> (k = i+<span class="number">1</span> ; k &lt; m ; k ++)</span><br><span class="line">                {<span class="comment">//更新棋盘，因为，不会再向该行和该行之前的棋盘搜索，故只用更新该行下同列的棋盘</span></span><br><span class="line">                    tmp2.<span class="built_in">map</span>[k][j]=<span class="string">'.'</span>;</span><br><span class="line">                }</span><br><span class="line">                DFS(tmp2,n<span class="number">-1</span>);<span class="comment">//放好一个棋子，继续搜</span></span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>  n ;            <span class="comment">//要求放棋子的多少</span></span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n , m != <span class="number">-1</span> || n != <span class="number">-1</span> )</span><br><span class="line">    {</span><br><span class="line">        ans=<span class="number">0</span>;<span class="comment">//初始化为0</span></span><br><span class="line">        prog <span class="built_in">map</span>;</span><br><span class="line">        <span class="built_in">map</span>.x=<span class="number">-1</span>;<span class="comment">//此时还未放棋子，初始化为-1</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; m ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span> . <span class="built_in">map</span> [ i ];</span><br><span class="line">        }</span><br><span class="line">        DFS(<span class="built_in">map</span>,n);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单搜索题，题目意思很明了，其中&lt;code&gt;#&lt;/code&gt;可以放棋子，&lt;code&gt;·&lt;/code&gt;不能，并且同一行或同一列不能放两个棋子，&lt;/p&gt;
&lt;p&gt;这题只需要深搜，每次从上一个放棋子地方的下一行开始寻找可以放棋子的地方，当发现该点时，记录行数，并更新棋盘，将于此点同
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="深度优先搜索" scheme="https://acshiryu.github.io/tags/depth-first-search/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="搜索" scheme="https://acshiryu.github.io/tags/search/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1325 Machine Schedule 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1325-machine-schedule.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1325-machine-schedule.html</id>
    <published>2018-09-16T02:08:00.000Z</published>
    <updated>2018-09-16T02:07:26.821Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是有两台机器A，B，分别由m和n种模式，初始时都在模式0，现在有k个工作，每一个工作都可以将A设置成模式i或将B设置成模式j，但每一次更换模式时机器不得不要重启，求完成所有工作的最小重启次数</p><p>输入数据的第一行有三个数据，分别代表工作数，A/B的模式数，当输入0时结束程序，接下来多行，每行的开始代表工作的序号，和完成该工作需将A/B设置的模式数，</p><p>输出一个整数，代表机器最小重启次数，</p><p>这一题关键的地方在于建图，图建好了问题就迎刃而解，这题可以将每一个工作的A/B的模式连接成一条边，这样就构成了一个二分图，这样每一个工作都可以由图中所构成的边完成，故我们只需要用最少的顶点覆盖每一条边就行了，也就是说题目要求求的最小重启次数实际上是要求二分图的最小覆盖数，在根据二分图的一个重要性质，最小覆盖数=最大匹配数，关于证明详见Matrix67’s Blog。</p><p>关于求二分图最大匹配的算法这里不再重复，详见<a href="/archives/acm/poj-1274-the-perfect-stall.html" title="POJ 1274 The Perfect Stall 解题报告">POJ 1274 The Perfect Stall 解题报告</a></p><p>参考代码（未加注释，因为代码和POJ 1274很像，建议直接看其解题报告</p><figure class="highlight cpp"><figcaption><span>poj1325 Machine Schedule</span><a href="/assets/code/poj/1325.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m , n , k ;</span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">map</span>[<span class="number">100</span>][<span class="number">100</span>] , vis [<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> link [<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> x )</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt; n ; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>[x][i] &amp;&amp; !vis[i] )</span><br><span class="line">        {</span><br><span class="line">            vis[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>( link [i] == <span class="number">0</span> || find ( link [i] ) )</span><br><span class="line">            {</span><br><span class="line">                link [i] = x ;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; m , m )</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k ;</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="built_in">memset</span> ( <span class="built_in">map</span> , <span class="number">0</span> , <span class="keyword">sizeof</span> ( <span class="built_in">map</span> ) ) ;</span><br><span class="line">        <span class="built_in">memset</span> ( link , <span class="number">0</span> , <span class="keyword">sizeof</span> ( link ) );</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; k ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> a , b , c ;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c ;</span><br><span class="line">            <span class="keyword">if</span> ( b == <span class="number">0</span> || c == <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">continue</span> ;</span><br><span class="line">            <span class="built_in">map</span> [b][c] = <span class="literal">true</span> ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; i &lt; m ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">memset</span> ( vis , <span class="number">0</span> , <span class="keyword">sizeof</span> ( vis ) ) ;</span><br><span class="line">            <span class="keyword">if</span> ( find ( i ) )</span><br><span class="line">                ans ++ ;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是有两台机器A，B，分别由m和n种模式，初始时都在模式0，现在有k个工作，每一个工作都可以将A设置成模式i或将B设置成模式j，但每一次更换模式时机器不得不要重启，求完成所有工作的最小重启次数&lt;/p&gt;
&lt;p&gt;输入数据的第一行有三个数据，分别代表工作数，A/B的模式数
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="最小覆盖点" scheme="https://acshiryu.github.io/tags/minimum-coverage-point/"/>
    
  </entry>
  
  <entry>
    <title>POJ1390 Blocks 常见动态规划模型</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1390-blocks.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1390-blocks.html</id>
    <published>2018-09-16T02:07:00.000Z</published>
    <updated>2018-09-16T02:06:37.239Z</updated>
    
    <content type="html"><![CDATA[<p>黑书真不是盖的！lrj黑书的常见模型分析的第一道例题（P123）<br>题目大意黑书上都有，但分析初看时没看懂,等到wa了几次才明白，因为合并的区间段有可能来自不同的区域，所以这个若干段不好处理。</p><figure class="highlight cpp"><figcaption><span>poj1390 Blocks</span><a href="/assets/code/poj/1390.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line">}ans[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">205</span>][<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T,TT=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">i=<span class="number">-1</span>,k=<span class="number">-1</span>;</span><br><span class="line">zero(ans);</span><br><span class="line"><span class="keyword">while</span>(N--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line"><span class="keyword">if</span>(a!=k)</span><br><span class="line">i++;</span><br><span class="line">ans[i].k=a;</span><br><span class="line">ans[i].num++;</span><br><span class="line">k=a;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ans[i].k==ans[j].k)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">ans[i].p=j;</span><br><span class="line">}</span><br><span class="line">zero(dp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">200</span>;j++)</span><br><span class="line">dp[i][i][j]=(ans[i].num+j)*(ans[i].num+j);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i+j&lt;n;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">200</span>;k++)</span><br><span class="line">{</span><br><span class="line">dp[i][i+j][k]=dp[i][i+j<span class="number">-1</span>][<span class="number">0</span>]+(ans[i+j].num+k)*(ans[i+j].num+k);</span><br><span class="line"><span class="keyword">int</span> p=ans[i+j].p;</span><br><span class="line"><span class="keyword">while</span>(p&gt;=i&amp;&amp;ans[i+j].num+k&lt;<span class="number">200</span>)</span><br><span class="line">{</span><br><span class="line">dp[i][i+j][k]=max(dp[i][i+j][k],dp[i][p][ans[i+j].num+k]+dp[p+<span class="number">1</span>][i+j<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">p=ans[p].p;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,TT++,dp[<span class="number">0</span>][n<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>附上两组测试数据，刚开始就是wa在这两组上的<br>输入：</p><blockquote><p>2<br>21<br>1 1 1 2 1 1 1 3 1 1 1 1 1 3 3 3 3 3 3 3 3<br>8<br>1 2 2 3 1 3 2 1</p></blockquote><p>输出：</p><blockquote><p>187<br>18</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;黑书真不是盖的！lrj黑书的常见模型分析的第一道例题（P123）&lt;br&gt;题目大意黑书上都有，但分析初看时没看懂,等到wa了几次才明白，因为合并的区间段有可能来自不同的区域，所以这个若干段不好处理。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;fig
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="DP" scheme="https://acshiryu.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>POJ1426 Find The Multiple 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1426-find-the-multiple.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1426-find-the-multiple.html</id>
    <published>2018-09-16T02:06:00.000Z</published>
    <updated>2018-09-16T02:06:17.788Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意是给出一个数n，找出一个数要求是n的倍数，并且这个数的十进制只由1和0组成，明显这样的数不止一个（如果，满足条件一定会有m×10也满足，故不止一种），题目要求输出任意一个满足该条件的m</p><p>对于数据1，可知2×5=10，故答案可以得出是10（当然，100，1000…也满足，但是special judge，只用输出一个满足条件的解），其他数据也同理。<br>刚开始时被这题给吓住了，因为n最大200，以为最后的结果会非常大，但看了discuss后了解到64位无符号整数可以存下结果，过可以用深搜（刚开始用广搜+STL给MLE了，才改的深搜），如果搜到m则输出，否则搜索m×10和m×10+1直到得出答案</p><figure class="highlight cpp"><figcaption><span>poj1426 Find The Multiple</span><a href="/assets/code/poj/1426.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;iostream&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdlib&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstdio&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cstring&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;algorithm&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;cmath&amp;gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&amp;lt;queue&amp;gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> found;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">unsigned</span> __int64 t ,<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(found)</span><br><span class="line">        <span class="keyword">return</span> ;<span class="comment">//如果已经发现了答案就没搜的必要了</span></span><br><span class="line">    <span class="keyword">if</span>(t%n==<span class="number">0</span>)</span><br><span class="line">    {<span class="comment">//发现答案，输出，标记变量该true</span></span><br><span class="line">        <span class="built_in">printf</span>(&amp;quot;%I64u\n&amp;quot;,t);</span><br><span class="line">        found=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">19</span>)<span class="comment">//到第19层，回溯</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    DFS(t*<span class="number">10</span>,n,k+<span class="number">1</span>);    <span class="comment">//搜索×10</span></span><br><span class="line">    DFS(t*<span class="number">10</span>+<span class="number">1</span>,n,k+<span class="number">1</span>);    <span class="comment">//搜索×10+1</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&amp;gt;&amp;gt;n,n)</span><br><span class="line">    {</span><br><span class="line">        found=<span class="literal">false</span>;<span class="comment">//标记变量，当为true代表搜到了题意第一的m</span></span><br><span class="line">        DFS(<span class="number">1</span>,n,<span class="number">0</span>);    <span class="comment">//从1开始搜n的倍数，第三个参数代表搜的层数，当到第19层时返回（因为第20层64位整数存不下）</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意是给出一个数n，找出一个数要求是n的倍数，并且这个数的十进制只由1和0组成，明显这样的数不止一个（如果，满足条件一定会有m×10也满足，故不止一种），题目要求输出任意一个满足该条件的m&lt;/p&gt;
&lt;p&gt;对于数据1，可知2×5=10，故答案可以得出是10（当然，100，
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="深度优先搜索" scheme="https://acshiryu.github.io/tags/depth-first-search/"/>
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="搜索" scheme="https://acshiryu.github.io/tags/search/"/>
    
  </entry>
  
  <entry>
    <title>poj1458 最长公共子序列问题</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1458-common-subsequence.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1458-common-subsequence.html</id>
    <published>2018-09-16T02:05:00.000Z</published>
    <updated>2018-09-16T02:04:42.345Z</updated>
    
    <content type="html"><![CDATA[<p>杭电挂了，状态dp完全没看懂，只有秒一道水题充数，dp还要加油啊<br><figure class="highlight java"><figcaption><span>poj1458 Common Subsequence</span><a href="/assets/code/poj/1458.java">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[][] dp=<span class="keyword">null</span>;</span><br><span class="line">String s1=<span class="keyword">new</span> String();</span><br><span class="line">String s2=<span class="keyword">new</span> String();</span><br><span class="line">Scanner in=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">while</span>(in.hasNext()){</span><br><span class="line">s1=in.next();</span><br><span class="line">s2=in.next();</span><br><span class="line">dp=<span class="keyword">new</span> <span class="keyword">int</span>[s1.length()+<span class="number">1</span>][s2.length()+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s2.length();j++){</span><br><span class="line"><span class="keyword">if</span>(s1.charAt(i)==s2.charAt(j))</span><br><span class="line">dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=dp[i][j]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=Math.max(dp[i+<span class="number">1</span>][j],dp[i][j+<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.println(dp[s1.length()][s2.length()]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;杭电挂了，状态dp完全没看懂，只有秒一道水题充数，dp还要加油啊&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;poj1458 Common Subsequence&lt;/span&gt;&lt;a href=&quot;/assets/co
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="最长公共子序列" scheme="https://acshiryu.github.io/tags/longest-common-subsequence/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1469 COURSES 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1469-courses.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1469-courses.html</id>
    <published>2018-09-16T02:04:00.000Z</published>
    <updated>2018-09-16T02:03:28.919Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是n个学生去p个课堂，每一个学生都有自己的课堂，并且每个学生只能去一个课堂，题目要求能够安排每一个课堂都有人吗？</p><p>输入数据的第一行是测试数据的个数，每组测试数据的开始分别是p和n，接着p行，每行的开始是这个课堂的学生人数m，接着m个数代表该课堂的学生编号，对于输出，如果该组数据能够这样安排就输出YES，否则输出NO。</p><p>例如，对于第一组数据明显可以这样匹配，3-3，2-2，1-1，而对于第二组数据则无法找到匹配方案，这题明显的求二分图的最大匹配，关于该算法详见<a href="/archives/acm/poj-1274-the-perfect-stall.html" title="POJ 1274 The Perfect Stall 解题报告">POJ 1274 The Perfect Stall 解题报告</a></p><p>但做这题的时候，用临界矩阵做刚开始时数组开小了，RE了一次，第二次TLE，后改为临界表，依旧TLE，最后，无奈，把cin全换成scanf时过了，在此要感谢laputa大神的提醒，Orz！</p><figure class="highlight cpp"><figcaption><span>poj1469 COURSES</span><a href="/assets/code/poj/1469.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">301</span>*<span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> first[maxn],next[maxn],v[maxn];<span class="comment">//头结点，下一点，和边的终点（即学生编号）</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];    <span class="comment">//记录是否访问过</span></span><br><span class="line"><span class="keyword">int</span> link [maxn];<span class="comment">//记录与之匹配的点</span></span><br><span class="line"><span class="keyword">int</span> p , n ;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> k )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">for</span> ( i = first[k] ; i != <span class="number">-1</span> ;  i =next [i] ) </span><br><span class="line">    {<span class="comment">//寻找与k连接的点</span></span><br><span class="line">        <span class="keyword">if</span> ( !vis [v[i]] )</span><br><span class="line">        {<span class="comment">//如果没访问过，则访问并标记</span></span><br><span class="line">            vis [ v[i]] =<span class="literal">true</span> ;</span><br><span class="line">            <span class="keyword">if</span> ( link [v[i]] == <span class="number">0</span> || find ( link [v[i]] ) )</span><br><span class="line">            {<span class="comment">//如果该学生还未匹配课堂或存在增广路</span></span><br><span class="line">                link [v[i]] = k ;<span class="comment">//与之匹配</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t ; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t) ;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p,&amp;n) ;</span><br><span class="line">        <span class="keyword">if</span> ( p &gt; n ) <span class="comment">//如果学生人数都少于课堂数，明显不可能达到匹配</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> i , j ; </span><br><span class="line">            <span class="built_in">memset</span> ( first , <span class="number">-1</span> , <span class="keyword">sizeof</span> ( first ) );    <span class="comment">//初始化表头</span></span><br><span class="line">            <span class="built_in">memset</span> ( link , <span class="number">0</span> , <span class="keyword">sizeof</span> ( link ) ) ;        <span class="comment">//初始化</span></span><br><span class="line">            <span class="keyword">int</span> e = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; p ; i ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">int</span> a ;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">                <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; a ; j ++ , e ++ )</span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v[e]);</span><br><span class="line">                    next [e] = first [i+<span class="number">1</span>];    <span class="comment">//插入链表，从头端插入</span></span><br><span class="line">                    first [i+<span class="number">1</span>] = e ;        <span class="comment">//记录链表头结点</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">bool</span> ans = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; p ; i ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">memset</span> ( vis , <span class="number">0</span> , <span class="keyword">sizeof</span> ( vis ) ) ;</span><br><span class="line">                <span class="keyword">if</span> ( !find ( i + <span class="number">1</span> ) )</span><br><span class="line">                {<span class="comment">//如果找不到与改点匹配的点，则答案就为NO</span></span><br><span class="line">                    ans =<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> ( ans )</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是n个学生去p个课堂，每一个学生都有自己的课堂，并且每个学生只能去一个课堂，题目要求能够安排每一个课堂都有人吗？&lt;/p&gt;
&lt;p&gt;输入数据的第一行是测试数据的个数，每组测试数据的开始分别是p和n，接着p行，每行的开始是这个课堂的学生人数m，接着m个数代表该课堂的学生
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="二分图" scheme="https://acshiryu.github.io/tags/binary-picture/"/>
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="最大匹配" scheme="https://acshiryu.github.io/tags/maximum-match/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj1579 Function Run Fun 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1579-function-run-fun.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1579-function-run-fun.html</id>
    <published>2018-09-16T02:03:00.000Z</published>
    <updated>2018-09-16T02:02:53.619Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="http://poj.org/problem?id=1579" title="Function Run Fun" target="_blank" rel="noopener">http://poj.org/problem?id=1579</a></p><p>记忆化搜索，因为递推的重复量很大，不能直接进行，必须记忆化，详细看代码</p><figure class="highlight cpp"><figcaption><span>poj1579 Function Run Fun</span><a href="/assets/code/poj/1579.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">25</span>][<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(a&lt;=<span class="number">0</span>||b&lt;=<span class="number">0</span>||c&lt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a&gt;<span class="number">20</span>||b&gt;<span class="number">20</span>||c&gt;<span class="number">20</span>)</span><br><span class="line"><span class="keyword">return</span> DFS(<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">int</span>&amp; ans=w[a][b][c];</span><br><span class="line"><span class="keyword">if</span>(ans!=<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b&amp;&amp;b&lt;c)</span><br><span class="line">ans=DFS(a, b, c<span class="number">-1</span>) + DFS(a, b<span class="number">-1</span>, c<span class="number">-1</span>) - DFS(a, b<span class="number">-1</span>, c);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans=DFS(a<span class="number">-1</span>, b, c) + DFS(a<span class="number">-1</span>, b<span class="number">-1</span>, c) + DFS(a<span class="number">-1</span>, b, c<span class="number">-1</span>) - DFS(a<span class="number">-1</span>, b<span class="number">-1</span>, c<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="built_in">memset</span>(w,<span class="number">-1</span>,<span class="keyword">sizeof</span>(w));</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;i&gt;&gt;j&gt;&gt;k)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">-1</span>&amp;&amp;j==<span class="number">-1</span>&amp;&amp;k==<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"w(%d, %d, %d) = %d\n"</span>,i,j,k,DFS(i,j,k));</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址:&lt;a href=&quot;http://poj.org/problem?id=1579&quot; title=&quot;Function Run Fun&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://poj.org/problem?id=1579&lt;/a&gt;&lt;
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="记忆化搜索" scheme="https://acshiryu.github.io/tags/memory-search/"/>
    
  </entry>
  
  <entry>
    <title>POJ1681 Painter&#39;s Problem 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1681-painters-problem.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1681-painters-problem.html</id>
    <published>2018-09-16T02:02:00.000Z</published>
    <updated>2018-09-16T02:02:34.282Z</updated>
    
    <content type="html"><![CDATA[<p>题目意思很简单，很poj 1222其实是一模一样的，只是要会判断是否存在无解的情况，思路可参考<a href="/archives/acm/poj-1222-extended-lights-out.html" title="POJ1222EXTENDED LIGHTS OUT 解题报告">POJ1222EXTENDED LIGHTS OUT 解题报告</a>。可以位运算枚举，也可以高斯消元</p><figure class="highlight cpp"><figcaption><span>poj1681 Painter's Problem</span><a href="/assets/code/poj/1681.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OneCount</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//计算二进制中的1的个数  参考Matrix67</span></span><br><span class="line">    x=(x&amp;<span class="number">0x55555555</span>)+((x&gt;&gt;<span class="number">1</span>)&amp;<span class="number">0x55555555</span>); </span><br><span class="line">    x=(x&amp;<span class="number">0x33333333</span>)+((x&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x33333333</span>);</span><br><span class="line">    x=(x&amp;<span class="number">0x0f0f0f0f</span>)+((x&gt;&gt;<span class="number">4</span>)&amp;<span class="number">0x0f0f0f0f</span>); </span><br><span class="line">    x=(x&amp;<span class="number">0x00ff00ff</span>)+((x&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0x00ff00ff</span>); </span><br><span class="line">    x=(x&amp;<span class="number">0x0000ffff</span>)+((x&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0x0000ffff</span>);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    k=k^t;</span><br><span class="line">    k=k^(t&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    k=k^(t&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    k=k&amp;((<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T,cas=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i,j,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        {</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i]);</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            {</span><br><span class="line">                a[i][j]=(a[i][j]==<span class="string">'y'</span>?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">                k=k*<span class="number">2</span>+a[i][j];</span><br><span class="line">            }</span><br><span class="line">            mat[i]=k;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> bin=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> up;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=bin;i++)</span><br><span class="line">        {</span><br><span class="line">            ans[<span class="number">0</span>]=i;</span><br><span class="line">            k=mat[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            {</span><br><span class="line">                up=test(k,ans[j<span class="number">-1</span>]);</span><br><span class="line">                k=mat[j]^ans[j<span class="number">-1</span>];</span><br><span class="line">                ans[j]=up;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(up==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i==bin+<span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"inf\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        {</span><br><span class="line">            cnt+=OneCount(ans[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目意思很简单，很poj 1222其实是一模一样的，只是要会判断是否存在无解的情况，思路可参考&lt;a href=&quot;/archives/acm/poj-1222-extended-lights-out.html&quot; title=&quot;POJ1222EXTENDED LIGHTS OU
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="枚举" scheme="https://acshiryu.github.io/tags/enumerate/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="位运算" scheme="https://acshiryu.github.io/tags/bit-operation/"/>
    
      <category term="高斯消元" scheme="https://acshiryu.github.io/tags/gaussian-elimination/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1789 Truck History 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1789-truck-history.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1789-truck-history.html</id>
    <published>2018-09-16T02:01:00.000Z</published>
    <updated>2018-09-16T02:02:13.552Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意是就是给出n个长度为7的字符串，每个字符串代表一个车，定义车的距离是两个字符串间不同字母的个数，题目要求的数不同的车的距离的最小值，即所求的就是最小生成树</p><p>关于数据的输入和输出详见样例，要注意输出完数据后还有个<code>·</code>，这题是一个稠密图，用Prim算法比较好，关于Prim算法详见：<br><a href="http://www.nocow.cn/index.php/Prim%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">http://www.nocow.cn/index.php/Prim%E7%AE%97%E6%B3%95</a></p><figure class="highlight cpp"><figcaption><span>poj1789 Truck History</span><a href="/assets/code/poj/1789.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">2000</span>][<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">2000</span>][<span class="number">2000</span>];</span><br><span class="line"><span class="keyword">int</span> lowdis[<span class="number">2000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n , n )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j , k ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; str [i];</span><br><span class="line">        <span class="built_in">memset</span>(dis,<span class="number">0</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">        <span class="comment">//求任意两车之间的距离</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n - <span class="number">1</span> ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> ( j = i+<span class="number">1</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span> ( k = <span class="number">0</span> ; k &lt; <span class="number">7</span> ; k ++ )</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">if</span>(str[i][k]!=str[j][k])</span><br><span class="line">                        dis[i][j]++;</span><br><span class="line">                }</span><br><span class="line">                dis[j][i]=dis[i][j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//初始化集合和颠倒集合的距离</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            lowdis[i]=dis[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span> ;    <span class="comment">//    所求的解</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n - <span class="number">1</span> ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> mindis = ( <span class="number">1</span> &lt;&lt; <span class="number">20</span> ) ;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>( lowdis[j] &amp;&amp; mindis &gt; lowdis[j] )</span><br><span class="line">                {<span class="comment">//寻找到集合距离最小的点</span></span><br><span class="line">                    mindis = lowdis[j] ;</span><br><span class="line">                    k = j;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            ans += mindis ;</span><br><span class="line">            lowdis[k] = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {<span class="comment">//更新各点到集合的距离</span></span><br><span class="line">                <span class="keyword">if</span>(lowdis[j]&gt;dis[k][j])</span><br><span class="line">                    lowdis[j]=dis[k][j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//输出答案，注意后面还有个‘.’</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"The highest possible quality is 1/"</span>&lt;&lt;ans&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意是就是给出n个长度为7的字符串，每个字符串代表一个车，定义车的距离是两个字符串间不同字母的个数，题目要求的数不同的车的距离的最小值，即所求的就是最小生成树&lt;/p&gt;
&lt;p&gt;关于数据的输入和输出详见样例，要注意输出完数据后还有个&lt;code&gt;·&lt;/code&gt;，这题是一个稠
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="生成树" scheme="https://acshiryu.github.io/tags/spanning-tree/"/>
    
      <category term="prim" scheme="https://acshiryu.github.io/tags/prim/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1797 Heavy Transportation 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1797-heavy-transportation.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1797-heavy-transportation.html</id>
    <published>2018-09-16T02:00:00.000Z</published>
    <updated>2018-09-16T02:00:37.270Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意是就是何处一个图，n个顶点和m条边，每个边都有最大承载量，现在我要从1点运送货物到n点，求能运送货物的最大重量。</p><p>对于数据，第一行为t代表测试数据个数，第二行为n和m（意义见上），接着m行，每行三个整数分别是代表一条边的起点，终点及最大承重量。输出能运送货物的最大重量，格式见样例。注意数据输完后还要再多输一个空行。</p><p>对于数据，从1运到3有两种方案</p><ul><li>方案1：1-2-3，其中1-2承重为3，2-3承重为5，则可以运送货物的最大重量是3（当大于3时明显1到不了2）</li><li>方案2：1-3，可知1-3承重为4，故此路可运送货物的最大重量是4，故答案输出4</li></ul><p>因为此前也没做过图论题，对一些算法都不熟，再刚开始题意理解有问题，WA了几次，看懂题意后，搜了下别人的解题报告，说是Dijkstra的变形或这求最大生成树。也许对Dijkstra运用（压根就没用过）的不是很熟，一直不知道怎么下手，连样列都过不了。后就直接转到求最大生成树上去了，网上大部分代码是Prim算法，由于《算法入门竞赛经典》书没介绍该算法，暂时还没看，所以就选择Kruskal求最大生成树。然后选择Kruskal的一个问题就是连通分量的处理，《入门经典》是用的并查集来处理，因为对生成树算法不是很熟，就直接套的上面的模板。然后题目就是编程了求最大生成树，并找出从1-n的最小权值的边。当然，这棵树不用搜完，因为，你从1到n不一定会每一个节点都走过，当将1-n连通时此时的权值就是所求的值；转换用Kruskal时因为数组开大了MLE一次，开小了RE一次，最后决定还是动态分配靠谱些。不过因为一个小细节又WA了一次，最后改正，终于AC了，你说，AC一题我容易不！！！总之ACM搞图论的上辈子都是折翼的天使！！！</p><p>如果有时间，这题还会再做一遍的，用Prim算法和Dijkstra试一下！</p><figure class="highlight cpp"><figcaption><span>poj1797 Heavy Transportation</span><a href="/assets/code/poj/1797-1.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一次提交的代码基本是套模板的，和自己写的出入较大，不习惯，将代码修改下感觉也许更好！，第一次提交的代码见最下面</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>);</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1005</span>];        <span class="comment">//p是用于并查集的，r是用来存储边序号的</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span> {</span></span><br><span class="line">    <span class="keyword">int</span> w,v,u;        <span class="comment">//记录起点，终点，权值</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(prog a,prog b)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//间接排序函数，</span></span><br><span class="line">    <span class="keyword">return</span> a.w&gt;b.w;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//并查集里的find函数，你懂的</span></span><br><span class="line">    <span class="keyword">return</span> p[x]==x?x:p[x]=find(p[x]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n ,m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        prog *r;</span><br><span class="line">        r=<span class="keyword">new</span> prog[m];</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; m ; i ++ )</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;r[i].u&gt;&gt;r[i].v&gt;&gt;r[i].w;    <span class="comment">//输入边的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( i =<span class="number">1</span> ; i &lt;= n; i ++ )</span><br><span class="line">            p[i]=i;<span class="comment">//初始化并查集</span></span><br><span class="line"></span><br><span class="line">        sort(r,r+m,cmp);<span class="comment">//根据边的权值的大小将边的序号进行排序，r[i]表示第i+1大的边存储在u，v，w数组中的序号</span></span><br><span class="line">        <span class="keyword">int</span> ans=inf;    <span class="comment">//将答案初始化为最大值</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; m ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x=find(r[i].u);</span><br><span class="line">            <span class="keyword">int</span> y=find(r[i].v);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)</span><br><span class="line">            {<span class="comment">//如果该边所在的两边不在同一个连通分量里，则连接该边</span></span><br><span class="line">                <span class="keyword">if</span>(ans&gt;r[i].w)<span class="comment">//如果该边的权值比ans小（实际上一定不会比ans大），则更新ans</span></span><br><span class="line">                    ans=r[i].w;</span><br><span class="line">                p[x]=y;<span class="comment">//连接该边</span></span><br><span class="line">                <span class="keyword">if</span>(find(<span class="number">1</span>)==find(n))<span class="comment">//当1和n连通时，则说明找到了一条从1到n的路，并且可知该路的所有边的权值都是最大的，故边的最小权值就是答案</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//输出答案，格式如题所述</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;k&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        k++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>　　附：第一次参考代码<br><figure class="highlight cpp"><figcaption><span>poj1797 Heavy Transportation</span><a href="/assets/code/poj/1797-2.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>);</span><br><span class="line"><span class="keyword">int</span> *p,*r;        <span class="comment">//p是用于并查集的，r是用来存储边序号的</span></span><br><span class="line"><span class="keyword">int</span> *u,*v,*w;    <span class="comment">//分别代表边的起点，终点，和权值，明显不是我的风格，先熟悉下模板，不得不这样写</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a,<span class="keyword">const</span> <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//间接排序函数，</span></span><br><span class="line">    <span class="keyword">return</span> w[a]&gt;w[b];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//并查集里的find函数，你懂的</span></span><br><span class="line">    <span class="keyword">return</span> p[x]==x?x:p[x]=find(p[x]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n ,m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        u=<span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        v=<span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        w=<span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        r=<span class="keyword">new</span> <span class="keyword">int</span>[m];<span class="comment">//动态分配</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; m ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> a , b , c ;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">            u[i]=a;</span><br><span class="line">            v[i]=b;</span><br><span class="line">            w[i]=c;<span class="comment">//加入边</span></span><br><span class="line">        }</span><br><span class="line">        p=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> ( i =<span class="number">1</span> ; i &lt;= n; i ++ )</span><br><span class="line">            p[i]=i;<span class="comment">//初始化并查集</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ;i &lt; m ; i ++ )</span><br><span class="line">            r[i]=i;<span class="comment">//初始化边序号</span></span><br><span class="line">        sort(r,r+m,cmp);<span class="comment">//根据边的权值的大小将边的序号进行排序，r[i]表示第i+1大的边存储在u，v，w数组中的序号</span></span><br><span class="line">        <span class="keyword">int</span> ans=inf;    <span class="comment">//将答案初始化为最大值</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; m ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> e=r[i];<span class="comment">//找到第i+1大的边</span></span><br><span class="line">            <span class="keyword">int</span> x=find(u[e]);</span><br><span class="line">            <span class="keyword">int</span> y=find(v[e]);</span><br><span class="line">            <span class="keyword">if</span>(x!=y)</span><br><span class="line">            {<span class="comment">//如果该边所在的两边不在同一个连通分量里，则连接该边</span></span><br><span class="line">                <span class="keyword">if</span>(ans&gt;w[e])<span class="comment">//如果该边的权值比ans小（实际上一定不会比ans大），则更新ans</span></span><br><span class="line">                    ans=w[e];</span><br><span class="line">                p[x]=y;<span class="comment">//连接该边</span></span><br><span class="line">                <span class="keyword">if</span>(find(<span class="number">1</span>)==find(n))<span class="comment">//当1和n连通时，则说明找到了一条从1到n的路，并且可知该路的所有边的权值都是最大的，故边的最小权值就是答案</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//输出答案，格式如题所述</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;k&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        k++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意是就是何处一个图，n个顶点和m条边，每个边都有最大承载量，现在我要从1点运送货物到n点，求能运送货物的最大重量。&lt;/p&gt;
&lt;p&gt;对于数据，第一行为t代表测试数据个数，第二行为n和m（意义见上），接着m行，每行三个整数分别是代表一条边的起点，终点及最大承重量。输出能运
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="并查集" scheme="https://acshiryu.github.io/tags/union-set/"/>
    
      <category term="最短路" scheme="https://acshiryu.github.io/tags/shortest-road/"/>
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="生成树" scheme="https://acshiryu.github.io/tags/spanning-tree/"/>
    
  </entry>
  
  <entry>
    <title>POJ1830 开关问题 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-1830-switch-problem.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-1830-switch-problem.html</id>
    <published>2018-09-16T01:59:00.000Z</published>
    <updated>2018-09-16T02:00:13.097Z</updated>
    
    <content type="html"><![CDATA[<p>和POJ1222类似，不过互相影响关系不在固定，有数据给出，可以高斯消元，也可位运算！高斯消元套用的是czyuan神牛的模板</p><figure class="highlight cpp"><figcaption><span>poj1830 开关问题</span><a href="/assets/code/poj/1830.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> equ, var; <span class="comment">// 有equ个方程，var个变元。增广阵行数为equ, 分别为到equ - 1，列数为var + 1，分别为到var.</span></span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> x[maxn]; <span class="comment">// 解集.</span></span><br><span class="line"><span class="keyword">bool</span> free_x[maxn]; <span class="comment">// 判断是否是不确定的变元.</span></span><br><span class="line"><span class="keyword">int</span> free_num;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debug</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; equ; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; var + <span class="number">1</span>; j++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        t = b;</span><br><span class="line">        b = a % b;</span><br><span class="line">        a = t;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a * b / gcd(a, b);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 高斯消元法解方程组(Gauss-Jordan elimination).(-2表示有浮点数解，但无整数解，-1表示无解，表示唯一解，大于表示无穷解，并返回自由变元的个数)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gauss</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> max_r; <span class="comment">// 当前这列绝对值最大的行.</span></span><br><span class="line">    <span class="keyword">int</span> col; <span class="comment">// 当前处理的列.</span></span><br><span class="line">    <span class="keyword">int</span> ta, tb;</span><br><span class="line">    <span class="keyword">int</span> LCM;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">int</span> free_x_num;</span><br><span class="line">    <span class="keyword">int</span> free_index;</span><br><span class="line">    <span class="comment">// 转换为阶梯阵.</span></span><br><span class="line">    col = <span class="number">0</span>; <span class="comment">// 当前处理的列.</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; equ &amp;&amp; col &lt; var; k++, col++)</span><br><span class="line">    { <span class="comment">// 枚举当前处理的行.</span></span><br><span class="line">        <span class="comment">// 找到该col列元素绝对值最大的那行与第k行交换.(为了在除法时减小误差)</span></span><br><span class="line">        max_r = k;</span><br><span class="line">        <span class="keyword">for</span> (i = k + <span class="number">1</span>; i &lt; equ; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(a[i][col]) &gt; <span class="built_in">abs</span>(a[max_r][col])) max_r = i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (max_r != k)</span><br><span class="line">        { <span class="comment">// 与第k行交换.</span></span><br><span class="line">            <span class="keyword">for</span> (j = k; j &lt; var + <span class="number">1</span>; j++) swap(a[k][j], a[max_r][j]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (a[k][col] == <span class="number">0</span>)</span><br><span class="line">        { <span class="comment">// 说明该col列第k行以下全是了，则处理当前行的下一列.</span></span><br><span class="line">            k--; <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (i = k + <span class="number">1</span>; i &lt; equ; i++)</span><br><span class="line">        { <span class="comment">// 枚举要删去的行.</span></span><br><span class="line">            <span class="keyword">if</span> (a[i][col] != <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                LCM = lcm(<span class="built_in">abs</span>(a[i][col]), <span class="built_in">abs</span>(a[k][col]));</span><br><span class="line">                ta = LCM / <span class="built_in">abs</span>(a[i][col]), tb = LCM / <span class="built_in">abs</span>(a[k][col]);</span><br><span class="line">                <span class="keyword">if</span> (a[i][col] * a[k][col] &lt; <span class="number">0</span>) tb = -tb; <span class="comment">// 异号的情况是两个数相加.</span></span><br><span class="line">                <span class="keyword">for</span> (j = col; j &lt; var + <span class="number">1</span>; j++)</span><br><span class="line">                {</span><br><span class="line">                    a[i][j] = a[i][j] * ta - a[k][j] * tb;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> <span class="comment">//   Debug();</span></span><br><span class="line">    <span class="comment">// 1\. 无解的情况: 化简的增广阵中存在(0, 0, ..., a)这样的行(a != 0).</span></span><br><span class="line">    <span class="keyword">for</span> (i = k; i &lt; equ; i++)</span><br><span class="line">    { <span class="comment">// 对于无穷解来说，如果要判断哪些是自由变元，那么初等行变换中的交换就会影响，则要记录交换.</span></span><br><span class="line">        <span class="keyword">if</span> (a[i][col] != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 2\. 无穷解的情况: 在var * (var + 1)的增广阵中出现(0, 0, ..., 0)这样的行，即说明没有形成严格的上三角阵.</span></span><br><span class="line">    <span class="comment">// 且出现的行数即为自由变元的个数.</span></span><br><span class="line">    <span class="keyword">if</span> (k &lt; var)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 首先，自由变元有var - k个，即不确定的变元至少有var - k个.</span></span><br><span class="line">        <span class="keyword">for</span> (i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 第i行一定不会是(0, 0, ..., 0)的情况，因为这样的行是在第k行到第equ行.</span></span><br><span class="line">            <span class="comment">// 同样，第i行一定不会是(0, 0, ..., a), a != 0的情况，这样的无解的.</span></span><br><span class="line">            free_x_num = <span class="number">0</span>; <span class="comment">// 用于判断该行中的不确定的变元的个数，如果超过个，则无法求解，它们仍然为不确定的变元.</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; var; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] != <span class="number">0</span> &amp;&amp; free_x[j]) free_x_num++, free_index = j;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (free_x_num &gt; <span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">// 无法求解出确定的变元.</span></span><br><span class="line">            <span class="comment">// 说明就只有一个不确定的变元free_index，那么可以求解出该变元，且该变元是确定的.</span></span><br><span class="line">            temp = a[i][var];</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; var; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] != <span class="number">0</span> &amp;&amp; j != free_index) temp -= a[i][j] * x[j];</span><br><span class="line">            }</span><br><span class="line">            x[free_index] = temp / a[i][free_index]; <span class="comment">// 求出该变元.</span></span><br><span class="line">            free_x[free_index] = <span class="number">0</span>; <span class="comment">// 该变元是确定的.</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> var - k; <span class="comment">// 自由变元有var - k个.</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="keyword">sizeof</span>(x));</span><br><span class="line">        <span class="built_in">memset</span>(free_x, <span class="number">1</span>, <span class="keyword">sizeof</span>(free_x));</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i]);</span><br><span class="line">        equ=var=n;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            a[i][n]=s[i]^d[i];</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y),x||y)</span><br><span class="line">            a[y<span class="number">-1</span>][x<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            a[i][i]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        free_num = Gauss();</span><br><span class="line">        <span class="keyword">if</span> (free_num == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"Oh,it's impossible~!!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (free_num &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (<span class="number">1</span>&lt;&lt;free_num));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;和POJ1222类似，不过互相影响关系不在固定，有数据给出，可以高斯消元，也可位运算！高斯消元套用的是czyuan神牛的模板&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;poj1830 开关问题&lt;/span&gt;&lt;a 
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="位运算" scheme="https://acshiryu.github.io/tags/bit-operation/"/>
    
      <category term="高斯消元" scheme="https://acshiryu.github.io/tags/gaussian-elimination/"/>
    
  </entry>
  
  <entry>
    <title>poj2115 同余方程与扩展欧几里得</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2115-c-looooops.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2115-c-looooops.html</id>
    <published>2018-09-16T01:58:00.000Z</published>
    <updated>2018-09-24T05:07:33.604Z</updated>
    
    <content type="html"><![CDATA[<p>题目意思给出A,B,C，问对于C语句语句<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable = A; variable != B; variable += C)</span><br><span class="line">  statement;</span><br></pre></td></tr></table></figure></p><p>循环的次数，如果是死循环，就输出FOREVER 。其中数据都在$2^k$内，且都为非负数,也就是说当数据大于$2^k$时就要对$2^k$取模</p><p>这题题目意思很好理解，细细观察发现假设循环执行了$t$次，则会有 $(A + Ct ) = B \bmod 2 ^ k$ 题目就是要求的最小的非负数$t$ 。</p><p>对于同余方程的解法，可以参考<a href="http://www.cnblogs.com/ACShiryu/archive/2011/08/03/2126676.html" target="_blank" rel="noopener">http://www.cnblogs.com/ACShiryu/archive/2011/08/03/2126676.html</a></p><p>题目数据虽然都是32位，但在中间算的时候有可能超int 故要用__int64 刚开始没注意到，WA了2次，有一次是对1左移时没强制转换。</p><figure class="highlight cpp"><figcaption><span>poj2115 C Looooops</span><a href="/assets/code/poj/2115.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gcd</span> <span class="params">( __int64 a , __int64 b , __int64 &amp;d , __int64 &amp;x ,__int64 &amp;y )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> ( ! b ) </span><br><span class="line">        d = a , x = <span class="number">1</span> , y = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        gcd ( b , a % b , d , y , x ) , y -= x * ( a / b ) ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    __int64 a, b , c, k ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; k , a || b || c || k )</span><br><span class="line">    {</span><br><span class="line">        __int64 d , x , y ;</span><br><span class="line">        gcd ( c ,  ( ( __int64 ) <span class="number">1</span> )&lt;&lt; k , d , x , y ) ;</span><br><span class="line">        <span class="keyword">if</span> ( ( b - a ) % d != <span class="number">0</span> )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"FOREVER"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            __int64 ans = ( b - a ) / d * x ;</span><br><span class="line">            ans = ans % ( (  ( ( __int64 ) <span class="number">1</span> )&lt;&lt; k ) / d ) ;</span><br><span class="line">            <span class="keyword">if</span> ( ans &lt; <span class="number">0</span> )</span><br><span class="line">                ans += (  ( ( __int64 ) <span class="number">1</span> )&lt;&lt; k ) / d ;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目意思给出A,B,C，问对于C语句语句&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="中国剩余定理" scheme="https://acshiryu.github.io/tags/chinese-remainder-theorem/"/>
    
      <category term="同余方程" scheme="https://acshiryu.github.io/tags/congruence-equation/"/>
    
      <category term="扩展欧几里得" scheme="https://acshiryu.github.io/tags/extended-euclid/"/>
    
  </entry>
  
  <entry>
    <title>POJ2249--一道简单的排列组合题</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2249-binomial-showdown.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2249-binomial-showdown.html</id>
    <published>2018-09-16T01:55:00.000Z</published>
    <updated>2018-09-16T01:55:53.628Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是从n个数中取k个数的情况种数，就是求$C^k_n$；<br>刚开始时用递推，RE了几次，最后改成数组来，但有些细节没注意到，WA了几次，总的说来，这是一道比较简单的组合数学的基本功是的运用<br>排列组合的基本公式：<br><img src="/assets/image/poj/2249-1.jpg" alt=""><br>Pascal公式<br><img src="/assets/image/poj/2249-2.png" alt=""><br>和一些恒等式<br><img src="/assets/image/poj/2249-3.png" alt=""></p><p>要解答出这道题主要运用的就是恒等式(1)</p><figure class="highlight cpp"><figcaption><span>poj2249 Binomial Showdown</span><a href="/assets/code/poj/2249.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">__int64 a[ <span class="number">100000000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    __int64 m , n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>,&amp;m,&amp;n), m || n )</span><br><span class="line">    {</span><br><span class="line">        a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( n &gt; m / <span class="number">2</span> )</span><br><span class="line">            n = m - n ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; i ++ )</span><br><span class="line">            a[i] = a[i<span class="number">-1</span>] * ( m - i + <span class="number">1</span> ) / i ;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, a[n] );</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是从n个数中取k个数的情况种数，就是求$C^k_n$；&lt;br&gt;刚开始时用递推，RE了几次，最后改成数组来，但有些细节没注意到，WA了几次，总的说来，这是一道比较简单的组合数学的基本功是的运用&lt;br&gt;排列组合的基本公式：&lt;br&gt;&lt;img src=&quot;/assets/i
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="排列" scheme="https://acshiryu.github.io/tags/arrangement/"/>
    
      <category term="组合数学" scheme="https://acshiryu.github.io/tags/combinatorial-mathematics/"/>
    
  </entry>
  
  <entry>
    <title>POJ2689 Prime Distance 素数筛选</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2689-prime-distance.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2689-prime-distance.html</id>
    <published>2018-09-15T13:17:00.000Z</published>
    <updated>2018-09-15T14:56:37.960Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是求出l,r间距离最近和最远的两个相邻素数。数据范围是2^32，明显不能直接枚举，会超时，也不能直接筛选，会超内存，但还好，l与r的值相差不超过10^6，故可以两次筛选，第一次，筛选出1~2^16里的所有素数，第二次用这些素数筛选出l到r的所有素数，由于数据太大，存储的下表明显不能直接用l到r之间的数，但注意到数组l之前的数权威空白，故下表可以用i-l来进行存储</p><figure class="highlight cpp"><figcaption><span>poj2689 Prime Distance</span><a href="/assets/code/poj/2689.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ispri[<span class="number">46348</span>];</span><br><span class="line"><span class="keyword">bool</span> ans[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">one(ispri);</span><br><span class="line">ispri[<span class="number">0</span>]=ispri[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">46348</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ispri[i])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(j=i*i;j&lt;<span class="number">46348</span>;j+=i)</span><br><span class="line">ispri[j]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%u%u"</span>,&amp;l,&amp;r))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a,b,c,d;</span><br><span class="line">a=b=c=d=<span class="number">-1</span>;</span><br><span class="line">one(ans);</span><br><span class="line"><span class="keyword">if</span>(l&lt;<span class="number">2</span>)l=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">46348</span>;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ispri[i])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> t=l/i;</span><br><span class="line"><span class="keyword">for</span>(j=i*t;j&lt;=r;j+=i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(j&gt;=l)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(j!=i)</span><br><span class="line">ans[j-l]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans[j-l]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=r-l;i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ans[i])</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">-1</span>)</span><br><span class="line">a=c=i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b==<span class="number">-1</span>)</span><br><span class="line">b=d=i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(b-a&gt;i-k)</span><br><span class="line">b=i,a=k;</span><br><span class="line"><span class="keyword">if</span>(d-c&lt;i-k)</span><br><span class="line">d=i,c=k;</span><br><span class="line">}</span><br><span class="line">k=i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"There are no adjacent primes.\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%u,%u are closest, %u,%u are most distant.\n"</span>,a+l,b+l,c+l,d+l);</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是求出l,r间距离最近和最远的两个相邻素数。数据范围是2^32，明显不能直接枚举，会超时，也不能直接筛选，会超内存，但还好，l与r的值相差不超过10^6，故可以两次筛选，第一次，筛选出1~2^16里的所有素数，第二次用这些素数筛选出l到r的所有素数，由于数据太大，
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="素数" scheme="https://acshiryu.github.io/tags/prime/"/>
    
      <category term="筛选" scheme="https://acshiryu.github.io/tags/filter/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>POJ2251 Dungeon Master 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2251-dungeon-master.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2251-dungeon-master.html</id>
    <published>2018-09-15T04:12:00.000Z</published>
    <updated>2018-09-15T14:56:37.952Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：这题是一个三维的迷宫题目，其中用<code>·</code>表示空地，<code>#</code>表示障碍物，<code>S</code>表示起点，<code>E</code>表示终点，求从起点到终点的最小移动次数，解法和二维的类似，只是在行动时除了东南西北移动外还多了上下。</p><p>对于题目给出数据的含义就是输入l，r，c，分别代表迷宫有l层，每层长宽分别是c，r。</p><p>对于数据一可以这样移动<br>(1,1,1)-&gt;(1,1,2)-&gt;(1,1,3)-&gt;(1,1,4)-&gt;(1,1,5)-&gt;(1,2,5)-&gt;(1,3,5)-&gt;(1,3,4)-&gt;(1,4,4)-&gt;(2,4,4)-&gt;(2,4,5)-&gt;(3,4,5)<br>共11步就可以到达终点 </p><p>对于数据二明显不能到达，则输出Trapped</p><p>这题用BFS解，每次去队首元素，如果是终点则输出结果移动的次数，否则，从该点开始分别向东南西北上下移动（如果可以走的话）并继续搜，如果到队列为空还没搜到解法，则说明无解。</p><figure class="highlight cpp"><figcaption><span>poj2251 Dungeon Master</span><a href="/assets/code/poj/2251.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> hash[<span class="number">35</span>][<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">35</span>][<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line">    <span class="keyword">int</span> x;<span class="keyword">int</span> y;<span class="keyword">int</span> z;        <span class="comment">//定义点的坐标</span></span><br><span class="line">    <span class="keyword">int</span> step;                <span class="comment">//移动的步子数</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> l , r , c ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; c , l &amp;&amp; r &amp;&amp; c )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j , k;</span><br><span class="line">        prog start;</span><br><span class="line">        <span class="built_in">memset</span>(hash,<span class="literal">false</span>,<span class="keyword">sizeof</span>(hash));<span class="comment">//初始化为false，表示每条路都没走过</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; l ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; r ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span> [i][j];</span><br><span class="line">                <span class="keyword">for</span> ( k = <span class="number">0</span> ; k &lt; c ; k ++ )</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">map</span>[i][j][k]==<span class="string">'S'</span>)</span><br><span class="line">                    {<span class="comment">//对起点的相关变量初始化</span></span><br><span class="line">                        start.x=i;</span><br><span class="line">                        start.y=j;</span><br><span class="line">                        start.z=k;</span><br><span class="line">                        start.step=<span class="number">0</span>;</span><br><span class="line">                        hash[i][j][k]=<span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;prog&gt;bfs;</span><br><span class="line">        bfs.push(start);    <span class="comment">//起点入队</span></span><br><span class="line">        <span class="keyword">bool</span> found=<span class="literal">false</span>;    <span class="comment">//标记变量，判断是否找到最优解，如果为true则说明从起点到终点存在着解</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!bfs.empty())</span><br><span class="line">        {</span><br><span class="line">            prog tmp=bfs.front();</span><br><span class="line">            bfs.pop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[tmp.x][tmp.y][tmp.z]==<span class="string">'E'</span>)</span><br><span class="line">            {<span class="comment">//已经到了终点，则将标记变量设为true，并输出答案</span></span><br><span class="line">                found=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"Escaped in "</span>&lt;&lt;tmp.step&lt;&lt;<span class="string">" minute(s)."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            tmp.step++;        <span class="comment">//移动步子+1</span></span><br><span class="line">            prog tmp2;</span><br><span class="line">            <span class="keyword">if</span>(tmp.x&gt;<span class="number">0</span>)</span><br><span class="line">            {<span class="comment">//向下走，所以改点不能在第一层，则x要大于0</span></span><br><span class="line">                tmp2=tmp;</span><br><span class="line">                tmp2.x--;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[tmp2.x][tmp2.y][tmp2.z]!=<span class="string">'#'</span>&amp;&amp;hash[tmp2.x][tmp2.y][tmp2.z]==<span class="literal">false</span>)</span><br><span class="line">                {<span class="comment">//如果下一层不是障碍物并且也没走过，则往下走，并标记该点已走过，入队</span></span><br><span class="line">                    hash[tmp2.x][tmp2.y][tmp2.z]=<span class="literal">true</span>;</span><br><span class="line">                    bfs.push(tmp2);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//下面搜索方法同上 注释略</span></span><br><span class="line">            <span class="keyword">if</span>(tmp.x&lt;l<span class="number">-1</span>)</span><br><span class="line">            {<span class="comment">//向上</span></span><br><span class="line">                tmp2=tmp;</span><br><span class="line">                tmp2.x++;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[tmp2.x][tmp2.y][tmp2.z]!=<span class="string">'#'</span>&amp;&amp;hash[tmp2.x][tmp2.y][tmp2.z]==<span class="literal">false</span>)</span><br><span class="line">                {</span><br><span class="line">                    hash[tmp2.x][tmp2.y][tmp2.z]=<span class="literal">true</span>;</span><br><span class="line">                    bfs.push(tmp2);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tmp.y&gt;<span class="number">0</span>)</span><br><span class="line">            {<span class="comment">//向北</span></span><br><span class="line">                tmp2=tmp;</span><br><span class="line">                tmp2.y--;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[tmp2.x][tmp2.y][tmp2.z]!=<span class="string">'#'</span>&amp;&amp;hash[tmp2.x][tmp2.y][tmp2.z]==<span class="literal">false</span>)</span><br><span class="line">                {</span><br><span class="line">                    hash[tmp2.x][tmp2.y][tmp2.z]=<span class="literal">true</span>;</span><br><span class="line">                    bfs.push(tmp2);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tmp.y&lt;r<span class="number">-1</span>)</span><br><span class="line">            {<span class="comment">//向南</span></span><br><span class="line">                tmp2=tmp;</span><br><span class="line">                tmp2.y++;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[tmp2.x][tmp2.y][tmp2.z]!=<span class="string">'#'</span>&amp;&amp;hash[tmp2.x][tmp2.y][tmp2.z]==<span class="literal">false</span>)</span><br><span class="line">                {</span><br><span class="line">                    hash[tmp2.x][tmp2.y][tmp2.z]=<span class="literal">true</span>;</span><br><span class="line">                    bfs.push(tmp2);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tmp.z&gt;<span class="number">0</span>)</span><br><span class="line">            {<span class="comment">//向西</span></span><br><span class="line">                tmp2=tmp;</span><br><span class="line">                tmp2.z--;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[tmp2.x][tmp2.y][tmp2.z]!=<span class="string">'#'</span>&amp;&amp;hash[tmp2.x][tmp2.y][tmp2.z]==<span class="literal">false</span>)</span><br><span class="line">                {</span><br><span class="line">                    hash[tmp2.x][tmp2.y][tmp2.z]=<span class="literal">true</span>;</span><br><span class="line">                    bfs.push(tmp2);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tmp.z&lt;c<span class="number">-1</span>)</span><br><span class="line">            {<span class="comment">//向东</span></span><br><span class="line">                tmp2=tmp;</span><br><span class="line">                tmp2.z++;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[tmp2.x][tmp2.y][tmp2.z]!=<span class="string">'#'</span>&amp;&amp;hash[tmp2.x][tmp2.y][tmp2.z]==<span class="literal">false</span>)</span><br><span class="line">                {</span><br><span class="line">                    hash[tmp2.x][tmp2.y][tmp2.z]=<span class="literal">true</span>;</span><br><span class="line">                    bfs.push(tmp2);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(!found)<span class="comment">//如果没有找到解</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Trapped!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意：这题是一个三维的迷宫题目，其中用&lt;code&gt;·&lt;/code&gt;表示空地，&lt;code&gt;#&lt;/code&gt;表示障碍物，&lt;code&gt;S&lt;/code&gt;表示起点，&lt;code&gt;E&lt;/code&gt;表示终点，求从起点到终点的最小移动次数，解法和二维的类似，只是在行动时除了东南西北移动外
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
      <category term="广度优先搜索" scheme="https://acshiryu.github.io/tags/breadth-first-search/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="搜索" scheme="https://acshiryu.github.io/tags/search/"/>
    
      <category term="队列" scheme="https://acshiryu.github.io/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2253 Frogger 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2253-frogger.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2253-frogger.html</id>
    <published>2018-09-15T04:11:00.000Z</published>
    <updated>2018-09-15T14:56:37.953Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意，有两只青蛙，分别在两个石头上，青蛙A想要到青蛙B那儿去，他可以直接跳到B的石头上，也可以跳到其他石头上，再从其他石头跳到B那儿，求青蛙从A到B的所有路径中最小的Frog Distance，我们定义Frog Distance为从A到B的一条路径中所跳的最大距离，例如，如果从A到B某条路径跳的距离是2，5，6，4，则Frog Distance就是6，题目输入的第一行代表石头的个数，当个数为0时结束程序，接着有n行，其中第2，3行分别代表A，B青蛙的坐标，其他n-2行分别代表空的石头的坐标，输出一个小数（保留三位），具体格式参见样例，注意没输出一个答案还要再空一行。</p><p>题目数据1很明显为5.000</p><p>对于数据2青蛙有两种方案</p><ul><li>方案1：1-2则经过距离为2.000故此时Frog Distance=2.000</li><li>方案2：1-3-2 则经过距离分别是1.414 1.414 故此时Frog Distance=1.414</li></ul><p>故所求的最小的Frog Distance=1.414</p><p>这道题和POJ1797比较类似，那个是求最大生成树的最小权，这个是求最小生成树的最大权，哪题是用Kruskal+并查集做的，比较麻烦，则此从网上搜了小Prim算法，果然比较方面，开始时从图中取出点0（数组从0开始），入集合，然后搜索集合外的点到集合的距离，找出距离最小的点，入集合，重复该步骤，直到点1也进入了集合，则此时的权值就是所求的值。</p><p>刚开始输出没注意，WA了一次，这还是要提醒我们要小心注意题目的输入输出，别遗漏，确保万无一失才能交；</p><figure class="highlight cpp"><figcaption><span>poj2253 Frogger</span><a href="/assets/code/poj/2253.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt; a[<span class="number">200</span>];            <span class="comment">//保存n个石头的坐标</span></span><br><span class="line"><span class="keyword">double</span> lowcost[<span class="number">200</span>],closet[<span class="number">200</span>];<span class="comment">//Prim算法必备，lowcost[i]表示i距离集合的最近距离，closet[i]表示i距离集合最近的点</span></span><br><span class="line"><span class="keyword">double</span> <span class="built_in">map</span>[<span class="number">200</span>][<span class="number">200</span>];            <span class="comment">//两点之间的距离</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n,n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span> ;i &lt; n ; i++ )</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i].first&gt;&gt;a[i].second;    <span class="comment">//输入n个点的坐标，从0开始，也就是说题目编程求0-1的最小Frog Distance</span></span><br><span class="line">        <span class="built_in">memset</span>(lowcost,<span class="number">0</span>,<span class="keyword">sizeof</span>(lowcost));    <span class="comment">//清零</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {<span class="comment">//求任意两点的距离，保存到map中</span></span><br><span class="line">                <span class="built_in">map</span>[i][j]=<span class="number">1.0</span>*<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(<span class="number">1.0</span>*<span class="built_in">abs</span>(a[i].first-a[j].first),<span class="number">2</span>)+<span class="built_in">pow</span>(<span class="number">1.0</span>*<span class="built_in">abs</span>(a[i].second-a[j].second),<span class="number">2</span>));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0.0</span>;<span class="comment">//所要求的答案，初始化为0</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i&lt; n ; i++ )</span><br><span class="line">        {<span class="comment">//把0放入集合，则点到集合的距离此时是点到0的距离</span></span><br><span class="line">            lowcost[i]=<span class="built_in">map</span>[<span class="number">0</span>][i];</span><br><span class="line">            closet[i]=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n - <span class="number">1</span> ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">double</span> mindis=<span class="number">1.0</span>*(<span class="number">1</span>&lt;&lt;<span class="number">20</span>);        <span class="comment">//点到集合最小距离，初始化为最大</span></span><br><span class="line">            <span class="keyword">int</span> minone;                        <span class="comment">//到集合最小距离对应的点</span></span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(lowcost[j]&amp;&amp;mindis&gt;lowcost[j])</span><br><span class="line">                {<span class="comment">//j点不在集合中，并且j到集合的距离比最小距离还小，则更新最小距离</span></span><br><span class="line">                    mindis=lowcost[j];</span><br><span class="line">                    minone=j;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(ans&lt;mindis)        <span class="comment">//如果答案并不比更新的最小距离大</span></span><br><span class="line">                ans=mindis;        <span class="comment">//更新答案</span></span><br><span class="line">            lowcost[minone]=<span class="number">0.0</span>;<span class="comment">//将该点入集合</span></span><br><span class="line">            <span class="keyword">if</span>(minone==<span class="number">1</span>)        <span class="comment">//如果改点是1，则水明义江找到了答案</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {<span class="comment">//更新各点到集合的最小距离</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[j][minone]&lt;lowcost[j])</span><br><span class="line">                {<span class="comment">//如果minone到某点j的距离比原来的j到集合的距离要小，则更新该点到集合的距离为改点到minone的距离</span></span><br><span class="line">                    lowcost[j]=<span class="built_in">map</span>[j][minone];</span><br><span class="line">                    closet[j]=minone;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Frog Distance = %.3f\n\n"</span>,ans);</span><br><span class="line">        k++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意，有两只青蛙，分别在两个石头上，青蛙A想要到青蛙B那儿去，他可以直接跳到B的石头上，也可以跳到其他石头上，再从其他石头跳到B那儿，求青蛙从A到B的所有路径中最小的Frog Distance，我们定义Frog Distance为从A到B的一条路径中所跳的最大距离，例如
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="最短路" scheme="https://acshiryu.github.io/tags/shortest-road/"/>
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="生成树" scheme="https://acshiryu.github.io/tags/spanning-tree/"/>
    
  </entry>
  
  <entry>
    <title>POJ2262Goldbach&#39;s Conjecture 简单的素数判定</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2262-goldbach-s-conjecture.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2262-goldbach-s-conjecture.html</id>
    <published>2018-09-15T04:10:00.000Z</published>
    <updated>2018-09-15T14:56:37.953Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是输入一个不小于6的合数，把它表示成两个质数的和，如果有多个，数出相差最大的一组</p><p>这题就是简单的枚举+素数判定，没什么技巧</p><p>行开始时分解合数时到sqrt（n）时停止，WA了一次，应该是n/2</p><figure class="highlight cpp"><figcaption><span>poj2262 Goldbach's Conjecture</span><a href="/assets/code/poj/2262.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span> <span class="params">( <span class="keyword">int</span> k )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">sqrt</span> ( k + <span class="number">0.5</span> ) ;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">2</span>  ; i &lt;= t ; i ++ )</span><br><span class="line">        <span class="keyword">if</span> ( k % i == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;n) , n )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">int</span> t = n / <span class="number">2</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">3</span> ; i &lt;= t ; i += <span class="number">2</span> )</span><br><span class="line">            <span class="keyword">if</span> ( isprime ( i ) &amp;&amp; isprime ( n - i ) )</span><br><span class="line">                <span class="keyword">break</span> ;</span><br><span class="line">        <span class="built_in">printf</span> ( <span class="string">"%d = %d + %d\n"</span> , n , i , n - i ) ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是输入一个不小于6的合数，把它表示成两个质数的和，如果有多个，数出相差最大的一组&lt;/p&gt;
&lt;p&gt;这题就是简单的枚举+素数判定，没什么技巧&lt;/p&gt;
&lt;p&gt;行开始时分解合数时到sqrt（n）时停止，WA了一次，应该是n/2&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="素数" scheme="https://acshiryu.github.io/tags/prime/"/>
    
      <category term="枚举" scheme="https://acshiryu.github.io/tags/enumerate/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>从poj2356来体会 抽屉原理 的妙用</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2356-find-a-multiple.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2356-find-a-multiple.html</id>
    <published>2018-09-15T04:09:00.000Z</published>
    <updated>2018-09-15T14:56:37.954Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是先给出一个数N，接着再给出N个数，要你从这N个数中任意选择1个或多个数，使得其和是N的倍数</p><p>如果找不到这样的答案 则输出0</p><p>答案可能有多个，但智勇任意输出一个解就行。</p><p>输出的第一行是选择元素的个数M，接着M行分别是选择的元素的值</p><p>刚开始的时候并不同为什么这一题回事抽屉原理，分析后才明白，昨晚后更有体会</p><p>实际上此题一定有解，不存在输出0的结果</p><p>证明如下</p><blockquote><p>我们可以依次求出a[0],a[0]+a[1],a[0]+a[1]+a[2],……,a[0]+a[1]+a[2]…+a[n]；<br>假设分别是sum[0],sum[1],sum[2],……,sum[n]<br>如果在某一项存在是N的倍数，则很好解，即可直接从第一项开始直接输出答案<br>但如果不存在，则sum[i]%N的值必定在[1,N-1]之间，又由于有n项sum，有抽屉原理：</p><blockquote><p>把多于n个的物体放到n个抽屉里，则至少有一个抽屉里有2个或2个以上的物体。<br>则必定有一对i，j，使得sum[i]=sum[j]，其中i！=j，不妨设j&gt;i</p></blockquote><p>则（sum[j]-sum[i]）%N=0，故sum[j]-sum[i]是N的倍数</p></blockquote><p>则只要输出从i+1～j的所有的a的值就是答案</p><p>然后就利用这个思路就可以直接的解出该题的答案</p><p>刚开始时是因为第一次做这题，代码写的过长，实际上第一种情况和第二种情况可以算一种情况考虑，关于简化后的的代码可以参考 <a href="/archives/acm/poj-3370-halloween-treats.html" title="poj3370同样的是抽屉原理">poj3370同样的是抽屉原理</a></p><figure class="highlight cpp"><figcaption><span>poj2356 Find a multiple</span><a href="/assets/code/poj/2356.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10000</span>] ;</span><br><span class="line"><span class="keyword">int</span> mod[<span class="number">10000</span>] ;<span class="comment">//mod存储判断sum%n是否出现过，如果没出现时-1，如果出现，则是此时sum对应的k值，即前k项和</span></span><br><span class="line"><span class="keyword">int</span> sum [<span class="number">10001</span>];<span class="comment">//sum存储的与描述略有不同，sum[k]=a[0]+a[1]+...+a[k-1]；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">memset</span> ( mod , <span class="number">-1</span> , <span class="keyword">sizeof</span> ( mod ) ) ;</span><br><span class="line">        sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i] ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            sum[i+<span class="number">1</span>]=sum[i]+a[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( sum [i+<span class="number">1</span>] % n == <span class="number">0</span> )</span><br><span class="line">            {<span class="comment">//如果是N的倍数，则输出</span></span><br><span class="line">                <span class="keyword">int</span> j ;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt;= i ; j ++ )</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;a[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> ( mod[sum [i+<span class="number">1</span>] % n]!=<span class="number">-1</span>)</span><br><span class="line">            {<span class="comment">//如果找到两个数的余数相同，则依次输出</span></span><br><span class="line">                <span class="keyword">int</span> j ;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i-mod[sum [i+<span class="number">1</span>] % n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">for</span> ( j = mod[sum [i+<span class="number">1</span>] % n]+<span class="number">1</span> ; j &lt;= i ; j ++ )</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;a[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            mod[sum [i+<span class="number">1</span>] % n]=i;<span class="comment">//将此时对应的余数存到mod中，值为此时的i</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是先给出一个数N，接着再给出N个数，要你从这N个数中任意选择1个或多个数，使得其和是N的倍数&lt;/p&gt;
&lt;p&gt;如果找不到这样的答案 则输出0&lt;/p&gt;
&lt;p&gt;答案可能有多个，但智勇任意输出一个解就行。&lt;/p&gt;
&lt;p&gt;输出的第一行是选择元素的个数M，接着M行分别是选择的
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="抽屉原理" scheme="https://acshiryu.github.io/tags/drawer-principle/"/>
    
  </entry>
  
  <entry>
    <title>POJ2407Relatives --欧拉函数的简单运用</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2407-relatives.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2407-relatives.html</id>
    <published>2018-09-15T04:06:00.000Z</published>
    <updated>2018-09-15T14:56:37.955Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是给一个数n，求出不大于n且与n互素的数的个数，<br>这就是简单的欧拉函数的运用，关于欧拉函数的求法，网上一搜一大堆，这里省略。<br>提交一次就A了，不过测试数据不强，我的程序对于1输出的是1，而实际应该是0</p><figure class="highlight cpp"><figcaption><span>poj2407 Relatives</span><a href="/assets/code/poj/2407.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">scanf</span> ( <span class="string">"%d"</span>, &amp; n ) , n )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> ( n == <span class="number">1</span> )</span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">"0\n"</span>) ; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> i , j , m;</span><br><span class="line">            m = <span class="built_in">sqrt</span> ( n + <span class="number">0.5</span> ) ;</span><br><span class="line">            <span class="keyword">int</span> ans = n ;</span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">2</span>; i &lt;= m ; i ++ )</span><br><span class="line">                <span class="keyword">if</span> ( n % i == <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    ans = ans / i * ( i - <span class="number">1</span> ) ;</span><br><span class="line">                    <span class="keyword">while</span> ( n % i == <span class="number">0</span> ) </span><br><span class="line">                        n /= i ;</span><br><span class="line">                }</span><br><span class="line">            <span class="keyword">if</span> ( n &gt; <span class="number">1</span> )</span><br><span class="line">                ans = ans / n * ( n - <span class="number">1</span> ) ;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是给一个数n，求出不大于n且与n互素的数的个数，&lt;br&gt;这就是简单的欧拉函数的运用，关于欧拉函数的求法，网上一搜一大堆，这里省略。&lt;br&gt;提交一次就A了，不过测试数据不强，我的程序对于1输出的是1，而实际应该是0&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="欧拉函数" scheme="https://acshiryu.github.io/tags/euler-function/"/>
    
      <category term="素数" scheme="https://acshiryu.github.io/tags/prime/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj2409 Let it Bead 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2409-let-it-bead.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2409-let-it-bead.html</id>
    <published>2018-09-15T04:05:00.000Z</published>
    <updated>2018-09-15T14:56:37.955Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址:<a href="http://poj.org/problem?id=2409" title="Let it Bead" target="_blank" rel="noopener">http://poj.org/problem?id=2409</a></p><p>Polya计数，直接套模版水过，关于Polya计数，任何一本关于组合数学的书都有，详细证明略去。模版地址<a href="/archives/template/cpp-template-polya.html" title="burnside定理，polya计数 模版">burnside定理，polya计数 模版</a></p><figure class="highlight cpp"><figcaption><span>poj2409 Let it Bead</span><a href="/assets/code/poj/2409.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>{ </span><br><span class="line"><span class="keyword">return</span> b ? gcd(b,a%b) : a; </span><br><span class="line">}</span><br><span class="line"><span class="function">ll <span class="title">polya</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">ll p[<span class="number">64</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// power of c</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span> (k=<span class="number">0</span> ; k&lt;s ; k++) </span><br><span class="line">p[k+<span class="number">1</span>] = p[k] * c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reflection part</span></span><br><span class="line">ll count = s&amp;<span class="number">1</span> ? s * p[s/<span class="number">2</span> + <span class="number">1</span>] :</span><br><span class="line">(s/<span class="number">2</span>) * (p[s/<span class="number">2</span>] + p[s/<span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rotation part</span></span><br><span class="line"><span class="keyword">for</span> (k=<span class="number">1</span> ; k&lt;=s ; k++) </span><br><span class="line">count += p[gcd(k, s)];</span><br><span class="line">count /= <span class="number">2</span> * s;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> c, s;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c, &amp;s),c||s) </span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;polya(c,s)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址:&lt;a href=&quot;http://poj.org/problem?id=2409&quot; title=&quot;Let it Bead&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://poj.org/problem?id=2409&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="polya" scheme="https://acshiryu.github.io/tags/polya/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="组合数学" scheme="https://acshiryu.github.io/tags/combinatorial-mathematics/"/>
    
  </entry>
  
  <entry>
    <title>poj2478 又一欧拉公式的运用</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2478-farey-sequence.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2478-farey-sequence.html</id>
    <published>2018-09-15T04:04:00.000Z</published>
    <updated>2018-09-24T05:07:33.606Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是求Fi集合中元素的个数，其中Fi集合的元素满足下列条件</p><p>形如a/b，且0 &lt; a &lt; b &lt;= i, gcd(a,b)=1 </p><p>很明显，这题就是欧拉公式的运用，关于欧拉公式可查看下这篇文章 <a href="/archives/acm/poj-2407-relatives.html" title="POJ2407Relatives --欧拉函数的简单运用">POJ2407Relatives --欧拉函数的简单运用</a></p><p>对于这题，可以先求出以每一个小于m的数为分母的数的个数，即也是与该数互素的数的个数，也就是求的phi[i]；</p><p>然后再每一个phi都加起来</p><p>题目就是比较简单的欧拉运用，1A</p><figure class="highlight cpp"><figcaption><span>poj2478 Farey Sequence</span><a href="/assets/code/poj/2478.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line">usingnamespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> phi[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i , j ;</span><br><span class="line">    <span class="built_in">memset</span> ( phi , <span class="number">0</span> ,<span class="keyword">sizeof</span> ( phi ) ) ;</span><br><span class="line">    <span class="keyword">for</span> ( i =<span class="number">2</span> ; i &lt;=<span class="number">1000000</span> ; i ++ )</span><br><span class="line">    {<span class="comment">//筛选求phi</span></span><br><span class="line"><span class="keyword">if</span> ( ! phi [i] )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> ( j = i ; j &lt;=<span class="number">1000000</span> ; j += i )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> ( ! phi [j] )</span><br><span class="line">                    phi [j ] = j ;</span><br><span class="line">                phi [j] = phi [j] / i * ( i <span class="number">-1</span> ) ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n  , n )</span><br><span class="line">    {</span><br><span class="line">        __int64 sum =<span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> ( i =<span class="number">2</span> ; i &lt;= n ; i ++ )</span><br><span class="line">            sum += phi [i] ;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    return0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是求Fi集合中元素的个数，其中Fi集合的元素满足下列条件&lt;/p&gt;
&lt;p&gt;形如a/b，且0 &amp;lt; a &amp;lt; b &amp;lt;= i, gcd(a,b)=1 &lt;/p&gt;
&lt;p&gt;很明显，这题就是欧拉公式的运用，关于欧拉公式可查看下这篇文章 &lt;a href=&quot;/arch
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="欧拉函数" scheme="https://acshiryu.github.io/tags/euler-function/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj2479与poj2593,同一道DP题</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2479-maximum-sum-2593-max-sequence.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2479-maximum-sum-2593-max-sequence.html</id>
    <published>2018-09-15T04:03:00.000Z</published>
    <updated>2018-09-15T14:56:37.956Z</updated>
    
    <content type="html"><![CDATA[<p>这两道题的题目的题目大意如上，对于输入的n个数，求出最大的S,这是一个简单的DP题，开两个数组，DP[i][0],DP[i][1];,其中DP[i][0]表示的是从0～i中连续子串的最大和,DP[i][1]表示i～n-1中连续子串的最大和,则题目就变成求max{DP[i][0]+DP[i+1][1]}</p><p>参考代码：<br>poj2479<br><figure class="highlight cpp"><figcaption><span>poj2479 Maximum sum</span><a href="/assets/code/poj/2479.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">50005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span> ( t -- )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;a[i]) ;</span><br><span class="line">            <span class="keyword">if</span> (  i )</span><br><span class="line">            {</span><br><span class="line">                sum = max(sum+a[i],a[i]);</span><br><span class="line">                dp[i][<span class="number">0</span>]=max(sum,dp[i<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][<span class="number">0</span>]=sum=a[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> ( i = n <span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i -- )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> ( i != ( n - <span class="number">1</span> ) )</span><br><span class="line">            {</span><br><span class="line">                sum = max(sum + a[i] , a[i]);</span><br><span class="line">                dp[i][<span class="number">1</span>]=max(sum,dp[i+<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][<span class="number">1</span>]=sum=a[i];</span><br><span class="line">        }</span><br><span class="line">        sum = -(<span class="number">1</span>&lt;&lt;<span class="number">30</span>) ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n - <span class="number">1</span> ; i ++ )</span><br><span class="line">            sum = max ( sum , dp[i][<span class="number">0</span>]+dp[i+<span class="number">1</span>][<span class="number">1</span>] );</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><p>poj2593<br><figure class="highlight cpp"><figcaption><span>poj2593 Max Sequence</span><a href="/assets/code/poj/2593.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">100005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) , n )</span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d"</span>, &amp;a[i]) ;</span><br><span class="line">            <span class="keyword">if</span> (  i )</span><br><span class="line">            {</span><br><span class="line">                sum = max(sum+a[i],a[i]);</span><br><span class="line">                dp[i][<span class="number">0</span>]=max(sum,dp[i<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][<span class="number">0</span>]=sum=a[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> ( i = n <span class="number">-1</span> ; i&gt;=<span class="number">0</span> ; i -- )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> ( i != ( n - <span class="number">1</span> ) )</span><br><span class="line">            {</span><br><span class="line">                sum = max(sum + a[i] , a[i]);</span><br><span class="line">                dp[i][<span class="number">1</span>]=max(sum,dp[i+<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][<span class="number">1</span>]=sum=a[i];</span><br><span class="line">        }</span><br><span class="line">        sum = -(<span class="number">1</span>&lt;&lt;<span class="number">30</span>) ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n - <span class="number">1</span> ; i ++ )</span><br><span class="line">            sum = max ( sum , dp[i][<span class="number">0</span>]+dp[i+<span class="number">1</span>][<span class="number">1</span>] );</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两道题的题目的题目大意如上，对于输入的n个数，求出最大的S,这是一个简单的DP题，开两个数组，DP[i][0],DP[i][1];,其中DP[i][0]表示的是从0～i中连续子串的最大和,DP[i][1]表示i～n-1中连续子串的最大和,则题目就变成求max{DP[i][
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="动态规划" scheme="https://acshiryu.github.io/tags/dynamic-planning/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2485 Highways 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2485-highways.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2485-highways.html</id>
    <published>2018-09-15T04:02:00.000Z</published>
    <updated>2018-09-15T14:56:37.957Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是求最小生成树的最大权边，关于求法不再重复，详情请见本博客的今天和昨天题目的解题报告，可以看到此题的类似解法，可以直接把那代码贴过来，改两行就行了。</p><figure class="highlight cpp"><figcaption><span>poj2485 Window Pains</span><a href="/assets/code/poj/2485.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"><span class="keyword">int</span> lowcost[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>) ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> ( t -- )</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            lowcost[i]=<span class="built_in">map</span>[<span class="number">0</span>][i];    <span class="comment">//初始化各点到集合的距离</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="comment">//记录生成树的最大权值</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n<span class="number">-1</span> ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> mindis=inf;</span><br><span class="line">            <span class="keyword">int</span> minone;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {<span class="comment">//寻找到集合距离最近的点</span></span><br><span class="line">                <span class="keyword">if</span>(lowcost[j]&amp;&amp;mindis&gt;lowcost[j])</span><br><span class="line">                {</span><br><span class="line">                    mindis=lowcost[j];</span><br><span class="line">                    minone=j;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(ans &lt;mindis )</span><br><span class="line">                ans =mindis;</span><br><span class="line">            lowcost[minone]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">            {<span class="comment">//更新各点到集合的距离</span></span><br><span class="line">                <span class="keyword">if</span>(lowcost[j]&gt;<span class="built_in">map</span>[minone][j])</span><br><span class="line">                    lowcost[j]=<span class="built_in">map</span>[minone][j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是求最小生成树的最大权边，关于求法不再重复，详情请见本博客的今天和昨天题目的解题报告，可以看到此题的类似解法，可以直接把那代码贴过来，改两行就行了。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;poj24
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="图论" scheme="https://acshiryu.github.io/tags/graph-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="最小生成树" scheme="https://acshiryu.github.io/tags/minimum-spanning-tree/"/>
    
  </entry>
  
  <entry>
    <title>POJ2488 A Knight&#39;s Journey 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2488-a-knights-journey.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2488-a-knights-journey.html</id>
    <published>2018-09-14T13:27:00.000Z</published>
    <updated>2018-09-15T14:56:37.957Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意是给出一个规格小于8*8的棋盘，判断一个只能走“日”的骑士能否不重复的走遍整个棋盘，如果能，按字典序输出走的路径，否则输出“impossible”</p><p>这题是一道搜索题，可以用DFS直接解决。每次从左到右，从上到下进行搜索，并标记搜索过的地方；</p><figure class="highlight cpp"><figcaption><span>poj2488 Snakes</span><a href="/assets/code/poj/2488.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span> {</span></span><br><span class="line"><span class="keyword">char</span> a ;</span><br><span class="line"><span class="keyword">int</span> b ;</span><br><span class="line">}tra;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proglu</span>{</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">900</span>];</span><br><span class="line">}<span class="built_in">map</span>;</span><br><span class="line"><span class="keyword">bool</span> hash[<span class="number">900</span>];</span><br><span class="line"><span class="keyword">bool</span> found=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> p , q ;</span><br><span class="line"><span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(prog tmp , <span class="keyword">int</span> n ,proglu <span class="built_in">map</span> ,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span>(found)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;number&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">map</span>.str[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">found=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> t=(tmp.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp.b;</span><br><span class="line">hash[t]=<span class="literal">true</span>;</span><br><span class="line">prog tmp2;</span><br><span class="line">tmp2=tmp;</span><br><span class="line">tmp2.a-=<span class="number">2</span>;</span><br><span class="line">tmp2.b--;</span><br><span class="line"><span class="keyword">if</span>(tmp2.a&gt;=<span class="string">'A'</span>&amp;&amp;tmp2.b&gt;=<span class="number">1</span>&amp;&amp;hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]==<span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">map</span>.str[k]=tmp2.a;</span><br><span class="line"><span class="built_in">map</span>.str[k+<span class="number">1</span>]=tmp2.b+<span class="string">'0'</span>;</span><br><span class="line">DFS(tmp2,n<span class="number">-1</span>,<span class="built_in">map</span>,k+<span class="number">2</span>);</span><br><span class="line">hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tmp2=tmp;</span><br><span class="line">tmp2.a-=<span class="number">2</span>;</span><br><span class="line">tmp2.b++;</span><br><span class="line"><span class="keyword">if</span>(tmp2.a&gt;=<span class="string">'A'</span>&amp;&amp;tmp2.b&lt;=q&amp;&amp;hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]==<span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">map</span>.str[k]=tmp2.a;</span><br><span class="line"><span class="built_in">map</span>.str[k+<span class="number">1</span>]=tmp2.b+<span class="string">'0'</span>;</span><br><span class="line">DFS(tmp2,n<span class="number">-1</span>,<span class="built_in">map</span>,k+<span class="number">2</span>);</span><br><span class="line">hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tmp2=tmp;</span><br><span class="line">tmp2.a-=<span class="number">1</span>;</span><br><span class="line">tmp2.b-=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp2.a&gt;=<span class="string">'A'</span>&amp;&amp;tmp2.b&gt;=<span class="number">1</span>&amp;&amp;hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]==<span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">map</span>.str[k]=tmp2.a;</span><br><span class="line"><span class="built_in">map</span>.str[k+<span class="number">1</span>]=tmp2.b+<span class="string">'0'</span>;</span><br><span class="line">DFS(tmp2,n<span class="number">-1</span>,<span class="built_in">map</span>,k+<span class="number">2</span>);</span><br><span class="line">hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tmp2=tmp;</span><br><span class="line">tmp2.a-=<span class="number">1</span>;</span><br><span class="line">tmp2.b+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp2.a&gt;=<span class="string">'A'</span>&amp;&amp;tmp2.b&lt;=q&amp;&amp;hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]==<span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">map</span>.str[k]=tmp2.a;</span><br><span class="line"><span class="built_in">map</span>.str[k+<span class="number">1</span>]=tmp2.b+<span class="string">'0'</span>;</span><br><span class="line">DFS(tmp2,n<span class="number">-1</span>,<span class="built_in">map</span>,k+<span class="number">2</span>);</span><br><span class="line">hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tmp2=tmp;</span><br><span class="line">tmp2.a+=<span class="number">1</span>;</span><br><span class="line">tmp2.b-=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp2.a&lt;=<span class="string">'A'</span>+p<span class="number">-1</span>&amp;&amp;tmp2.b&gt;=<span class="number">1</span>&amp;&amp;hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]==<span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">map</span>.str[k]=tmp2.a;</span><br><span class="line"><span class="built_in">map</span>.str[k+<span class="number">1</span>]=tmp2.b+<span class="string">'0'</span>;</span><br><span class="line">DFS(tmp2,n<span class="number">-1</span>,<span class="built_in">map</span>,k+<span class="number">2</span>);</span><br><span class="line">hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tmp2=tmp;</span><br><span class="line">tmp2.a+=<span class="number">1</span>;</span><br><span class="line">tmp2.b+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp2.a&lt;=<span class="string">'A'</span>+p<span class="number">-1</span>&amp;&amp;tmp2.b&lt;=q&amp;&amp;hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]==<span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">map</span>.str[k]=tmp2.a;</span><br><span class="line"><span class="built_in">map</span>.str[k+<span class="number">1</span>]=tmp2.b+<span class="string">'0'</span>;</span><br><span class="line">DFS(tmp2,n<span class="number">-1</span>,<span class="built_in">map</span>,k+<span class="number">2</span>);</span><br><span class="line">hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tmp2=tmp;</span><br><span class="line">tmp2.a+=<span class="number">2</span>;</span><br><span class="line">tmp2.b-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp2.a&lt;=<span class="string">'A'</span>+p<span class="number">-1</span>&amp;&amp;tmp2.b&gt;=<span class="number">1</span>&amp;&amp;hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]==<span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">map</span>.str[k]=tmp2.a;</span><br><span class="line"><span class="built_in">map</span>.str[k+<span class="number">1</span>]=tmp2.b+<span class="string">'0'</span>;</span><br><span class="line">DFS(tmp2,n<span class="number">-1</span>,<span class="built_in">map</span>,k+<span class="number">2</span>);</span><br><span class="line">hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">tmp2=tmp;</span><br><span class="line">tmp2.a+=<span class="number">2</span>;</span><br><span class="line">tmp2.b+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp2.a&lt;=<span class="string">'A'</span>+p<span class="number">-1</span>&amp;&amp;tmp2.b&lt;=q&amp;&amp;hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]==<span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">map</span>.str[k]=tmp2.a;</span><br><span class="line"><span class="built_in">map</span>.str[k+<span class="number">1</span>]=tmp2.b+<span class="string">'0'</span>;</span><br><span class="line">DFS(tmp2,n<span class="number">-1</span>,<span class="built_in">map</span>,k+<span class="number">2</span>);</span><br><span class="line">hash[(tmp2.a-<span class="string">'A'</span>)*<span class="number">30</span>+tmp2.b]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">{</span><br><span class="line">number++;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q &gt;&gt; p ;</span><br><span class="line"><span class="keyword">if</span>(number!=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">memset</span>(hash,<span class="literal">false</span>,<span class="keyword">sizeof</span>(hash)) ;</span><br><span class="line">tra.a=<span class="string">'A'</span>;</span><br><span class="line">tra.b=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>.str,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>.str));</span><br><span class="line"><span class="built_in">map</span>.str[<span class="number">0</span>]=<span class="string">'A'</span>;</span><br><span class="line"><span class="built_in">map</span>.str[<span class="number">1</span>]=<span class="string">'1'</span>;</span><br><span class="line">found=<span class="literal">false</span>;</span><br><span class="line">DFS(tra,p*q,<span class="built_in">map</span>,<span class="number">2</span>); </span><br><span class="line"><span class="keyword">if</span>(!found)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;number&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意是给出一个规格小于8*8的棋盘，判断一个只能走“日”的骑士能否不重复的走遍整个棋盘，如果能，按字典序输出走的路径，否则输出“impossible”&lt;/p&gt;
&lt;p&gt;这题是一道搜索题，可以用DFS直接解决。每次从左到右，从上到下进行搜索，并标记搜索过的地方；&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="深度优先搜索" scheme="https://acshiryu.github.io/tags/depth-first-search/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="搜索" scheme="https://acshiryu.github.io/tags/search/"/>
    
  </entry>
  
  <entry>
    <title>poj 2492 并查集</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2492-a-bug-s-life.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2492-a-bug-s-life.html</id>
    <published>2018-09-14T13:26:00.000Z</published>
    <updated>2018-09-15T14:56:37.958Z</updated>
    
    <content type="html"><![CDATA[<p>题目有点怪，就是告诉你有n只虫子，m条信息，每一条信息的i和j有JQ，求出根据所给的信息能否判断出有搞基的虫子，并按照题目要求信息输出这题用并查集解决起来很方便，当然搜索也可以解</p><p>首先分析第一组数据，则可知1和2异性，2和3也异性，可是1和3竟然也有JQ ，这是怎么回事？只能说他们在搞基，则输出Suspicious bugs found!</p><p>然后就是这题的处理办法，首先应该想到的是并查集，对于每一对有JQ的虫子，可以将他们分入到两个不同的并查集中，并记录跟这只虫子有JQ的虫子如果加入后存在冲突，则说明有搞基的虫子，没办法，这样就可以不用再考虑以后的虫子JQ了。</p><p>上面是大体思路，但有些小细节要考虑</p><p>如果那两只虫子之前都没有对象，都是处虫，则更新他们的对象信息；</p><p>如果只有其中的一个有对象，假设是a，而b没对象，则将b的对象更新为a，并且让a的对象和b同性，也就是入同一个并查集；</p><p>如果a和b都有对象，则有两种情况：</p><ul><li>a和b在同一个并查集里，则说明a和b有JQ，则可以不必考虑后面的虫子了；</li><li>否则，将a和b之前的对象入同一个并查集，b和a之前的对象入同一个并查集；</li></ul><p>这就是解这题我的思路，虽不是最优！</p><p>开始时因为很久没写并查集了，竟然写错了，WA了一个，然后就是对a和b都有对象的情况考虑不完整，也WA了一次，修正后果然AC了！</p><figure class="highlight cpp"><figcaption><span>poj2492 Standard Point System</span><a href="/assets/code/poj/2492.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">2005</span>];    <span class="comment">//并查集常用</span></span><br><span class="line"><span class="keyword">int</span> com[<span class="number">2005</span>];    <span class="comment">//保存i的对象</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//并查集的find</span></span><br><span class="line">    <span class="keyword">return</span> pre[x]==x?x:pre[x]=find(pre[x]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//并查集的join</span></span><br><span class="line">    <span class="keyword">int</span> px=find(x);</span><br><span class="line">    <span class="keyword">int</span> py=find(y);</span><br><span class="line">    <span class="keyword">if</span>(px!=py)</span><br><span class="line">        pre[px]=py;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n , m ;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">2005</span>;i++)</span><br><span class="line">        {<span class="comment">//pre初始化</span></span><br><span class="line">            pre[i]=i;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">memset</span>(com,<span class="number">-1</span>,<span class="keyword">sizeof</span>(com));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> found = <span class="literal">false</span>;        <span class="comment">//判断是否找到搞基的虫子</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            <span class="keyword">if</span>(found)            <span class="comment">//如果找到搞基的虫子，则不用考虑后面了</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (com[a]!=<span class="number">-1</span>)</span><br><span class="line">            {<span class="comment">//如果a有对象</span></span><br><span class="line">                <span class="keyword">if</span>(com[b]!=<span class="number">-1</span>)</span><br><span class="line">                {<span class="comment">//b也有对象</span></span><br><span class="line">                    <span class="keyword">if</span> (find(a)==find(b))</span><br><span class="line">                    {<span class="comment">//并且a和b也在同一个并查集，则a和b在搞基</span></span><br><span class="line">                        found=<span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">//否则，将a和b之前的对象入同一个并查集，b和a之前的对象入同一个并查集</span></span><br><span class="line">                    join(a,com[b]);</span><br><span class="line">                    join(b,com[a]);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">//b没对象，则将b的对象更新为a，并且让a的对象和b同性，也就是入同一个并查集</span></span><br><span class="line">                join(com[a],b);</span><br><span class="line">                com[b]=a;</span><br><span class="line">            } </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {<span class="comment">//a没对象</span></span><br><span class="line">                <span class="keyword">if</span>(com[b]!=<span class="number">-1</span>)</span><br><span class="line">                {<span class="comment">//b有对象，则将a的对象更新为b，并且让b的对象和a同性，也就是入同一个并查集</span></span><br><span class="line">                    join(a,com[b]);</span><br><span class="line">                    com[a]=b;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                {<span class="comment">//a和b都没对象，则更新他们的对象信息</span></span><br><span class="line">                    com[a]=b;</span><br><span class="line">                    com[b]=a;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d:\n"</span>,cas++);</span><br><span class="line">        <span class="keyword">if</span> (found)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Suspicious bugs found!\n"</span>);</span><br><span class="line">        } </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No suspicious bugs found!\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目有点怪，就是告诉你有n只虫子，m条信息，每一条信息的i和j有JQ，求出根据所给的信息能否判断出有搞基的虫子，并按照题目要求信息输出这题用并查集解决起来很方便，当然搜索也可以解&lt;/p&gt;
&lt;p&gt;首先分析第一组数据，则可知1和2异性，2和3也异性，可是1和3竟然也有JQ ，这
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
      <category term="并查集" scheme="https://acshiryu.github.io/tags/union-set/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2506 高精度+递推</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2506-tiling.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2506-tiling.html</id>
    <published>2018-09-14T13:25:00.000Z</published>
    <updated>2018-09-15T14:56:37.959Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是有$2 \times 1$和$2 \times 2$两种规格的地板，现要拼$2 \times n$的形状，共有多少种情况，首先要做这道题目要先对递推有一定的了解。<br>假设我们已经铺好了$2 \times (n-1)$的情形，则要铺到$2 \times n$则只能用$2 \times 1$的地板<br>假设我们已经铺好了$2 \times (n-2)$的情形，则要铺到$2 \times n$则可以选择1个$2 \times 2$或两个$2 \times 1$，故可能有下列三种铺法</p><p><img src="/assets/image/poj/2506-1.png" alt=""> <img src="/assets/image/poj/2506-2.png" alt=""> <img src="/assets/image/poj/2506-3.png" alt=""></p><p>其中要注意到第三个会与铺好$2 \times (n-1)$的情况重复，故不可取，故可以得到递推式$a_i=2a_{i-2}+a_{i-1}$</p><p>然后就是高精度部分，可直接用高精度的模板</p><p>直接套用模板就1A了，只是简单的递推题，算是练习套模板能力或验证模板的正确性吧！</p><figure class="highlight cpp"><figcaption><span>poj2506 Tiling</span><a href="/assets/code/poj/2506.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Base=<span class="number">1000000000</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Capacity=<span class="number">100</span>;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> huge;    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigInt</span>{</span>  </span><br><span class="line">     <span class="keyword">int</span> Len;  </span><br><span class="line">     <span class="keyword">int</span> Data[Capacity];  </span><br><span class="line">     BigInt() : Len(<span class="number">0</span>) {}  </span><br><span class="line">     BigInt (<span class="keyword">const</span> BigInt &amp;V) : Len(V.Len) { <span class="built_in">memcpy</span> (Data, V.Data, Len*<span class="keyword">sizeof</span>*Data);}  </span><br><span class="line">     BigInt(<span class="keyword">int</span> V) : Len(<span class="number">0</span>) {<span class="keyword">for</span>(;V&gt;<span class="number">0</span>;V/=Base) Data[Len++]=V%Base;}  </span><br><span class="line">     BigInt &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> BigInt &amp;V) {Len=V.Len; <span class="built_in">memcpy</span>(Data, V.Data, Len*<span class="keyword">sizeof</span>*Data); <span class="keyword">return</span> *<span class="keyword">this</span>;}  </span><br><span class="line">     <span class="keyword">int</span> &amp;<span class="keyword">operator</span>[] (<span class="keyword">int</span> Index) {<span class="keyword">return</span> Data[Index];}  </span><br><span class="line">     <span class="keyword">int</span> <span class="keyword">operator</span>[] (<span class="keyword">int</span> Index) <span class="keyword">const</span> {<span class="keyword">return</span> Data[Index];}  </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">BigInt <span class="keyword">operator</span>+(<span class="keyword">const</span> BigInt &amp;A,<span class="keyword">const</span> BigInt &amp;B){  </span><br><span class="line">     <span class="keyword">int</span> i,Carry(<span class="number">0</span>);  </span><br><span class="line">     BigInt R;  </span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;A.Len||i&lt;B.Len||Carry&gt;<span class="number">0</span>;i++){  </span><br><span class="line">         <span class="keyword">if</span>(i&lt;A.Len) Carry+=A[i];  </span><br><span class="line">         <span class="keyword">if</span>(i&lt;B.Len) Carry+=B[i]; </span><br><span class="line">         R[i]=Carry%Base;  </span><br><span class="line">         Carry/=Base;  </span><br><span class="line">     }  </span><br><span class="line">     R.Len=i;  </span><br><span class="line">     <span class="keyword">return</span> R;  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;Out,<span class="keyword">const</span> BigInt &amp;V){  </span><br><span class="line">     <span class="keyword">int</span> i;  </span><br><span class="line">     Out&lt;&lt;(V.Len==<span class="number">0</span> ? <span class="number">0</span>:V[V.Len<span class="number">-1</span>]);  </span><br><span class="line">     <span class="keyword">for</span>(i=V.Len<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">for</span>(<span class="keyword">int</span> j=Base/<span class="number">10</span>;j&gt;<span class="number">0</span>;j/=<span class="number">10</span>) Out&lt;&lt;V[i]/j%<span class="number">10</span>;  </span><br><span class="line">     <span class="keyword">return</span> Out;  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">BigInt ans[<span class="number">300</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ans[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    ans[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">2</span>  ; i &lt;= <span class="number">250</span> ; i ++ )</span><br><span class="line">    {</span><br><span class="line">        ans[i]=ans[i<span class="number">-2</span>]+ans[i<span class="number">-1</span>]+ans[i<span class="number">-2</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n )</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是有$2 \times 1$和$2 \times 2$两种规格的地板，现要拼$2 \times n$的形状，共有多少种情况，首先要做这道题目要先对递推有一定的了解。&lt;br&gt;假设我们已经铺好了$2 \times (n-1)$的情形，则要铺到$2 \times n$则
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="递归" scheme="https://acshiryu.github.io/tags/recursive/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="高精度" scheme="https://acshiryu.github.io/tags/high-precision/"/>
    
  </entry>
  
  <entry>
    <title>poj2663 Tri Tiling 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2663-tri-tiling.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2663-tri-tiling.html</id>
    <published>2018-09-14T13:24:00.000Z</published>
    <updated>2018-09-15T14:56:37.959Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="http://poj.org/problem?id=2663" title="Tri Tiling" target="_blank" rel="noopener">http://poj.org/problem?id=2663</a></p><p>递推题，推导有点复杂，可能还有更好的办法吧，下面是我的想法</p><p>用$f_n$表示铺成$3 \times n$没铺满，还有一个空缺，$g_n$表示铺成$3 \times n$没铺满，有两个空缺，用$a_n$表示铺成$3 \times n$时全部铺满。</p><p>则很容易知道如果要铺成$a_n$，只需要$g_n$再加一块或者$f_{n-1}$再加两块，故$a_n=g_n+f_{n-1}$ </p><p>同理，可知只要$f_{n-1}$再加一块就是$g_n$，而$f_n$则是只需要$a_{n-1}$再加一块或者$g_{n-1}$上加（需要点空间想像），综上，就可以推出递推公式了</p><figure class="highlight cpp"><figcaption><span>poj2663 Tri Tiling</span><a href="/assets/code/poj/2663.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">35</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">31</span>;i++)</span><br><span class="line">{</span><br><span class="line">f[i]=<span class="number">2</span>*a[i<span class="number">-1</span>]+g[i<span class="number">-1</span>];</span><br><span class="line">g[i]=f[i<span class="number">-1</span>];</span><br><span class="line">a[i]=f[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n]);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址：&lt;a href=&quot;http://poj.org/problem?id=2663&quot; title=&quot;Tri Tiling&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://poj.org/problem?id=2663&lt;/a&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="递归" scheme="https://acshiryu.github.io/tags/recursive/"/>
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2773 互素问题</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2773-happy-2006.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2773-happy-2006.html</id>
    <published>2018-09-14T13:16:00.000Z</published>
    <updated>2018-09-15T14:56:37.960Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是给出n和k求出第k个与n互素的数</p><p>如果知道欧几里德算法的话就应该知道gcd（b×t+a，b）=gcd（a，b）  （t为任意整数）</p><p>则如果a与b互素，则b×t+a与b也一定互素，如果a与b不互素，则b×t+a与b也一定不互素</p><p>故与m互素的数对m取模具有周期性，则根据这个方法我们就可以很快的求出第k个与m互素的数</p><p>假设小于m的数且与m互素的数有k个，其中第i个是ai，则第m×k+i与m互素的数是k×m+ai</p><p>这道题这样做并不是最优的，网上说可以用欧拉函数+容斥原理+二分枚举可做，我暂时还不知道这样做的思想</p><p>如果用我的方法做的话，时间上的花费比较大</p><figure class="highlight cpp"><figcaption><span>poj2773 Happy 2006</span><a href="/assets/code/poj/2773.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line">usingnamespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pri[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span> <span class="params">( <span class="keyword">int</span> a , <span class="keyword">int</span> b )</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> b ==<span class="number">0</span>? a : gcd ( b , a % b ) ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> m , k ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; k ) </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="keyword">for</span> ( i =<span class="number">1</span> , j =<span class="number">0</span> ; i &lt;= m ; i ++ )</span><br><span class="line">            <span class="keyword">if</span> ( gcd ( m , i ) ==<span class="number">1</span> )</span><br><span class="line">                pri [ j ++ ] = i ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( k%j !=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;k/j * m +pri[k%j<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//要特别考虑k%j=0的情况，因为数组是从0开始的，第i个对应的是pri[i-1]</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (k/j<span class="number">-1</span>)*m+pri[j<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">    }</span><br><span class="line">    return0;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是给出n和k求出第k个与n互素的数&lt;/p&gt;
&lt;p&gt;如果知道欧几里德算法的话就应该知道gcd（b×t+a，b）=gcd（a，b）  （t为任意整数）&lt;/p&gt;
&lt;p&gt;则如果a与b互素，则b×t+a与b也一定互素，如果a与b不互素，则b×t+a与b也一定不互素&lt;/p&gt;

      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="素数" scheme="https://acshiryu.github.io/tags/prime/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj 2891 Strange Way to Express Integers 扩展欧几里得</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-2891-strange-way-to-express-integers.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-2891-strange-way-to-express-integers.html</id>
    <published>2018-09-14T13:15:00.000Z</published>
    <updated>2018-09-15T14:56:37.961Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是给出$a$和$r$，求$c$,其中$c \bmod a_i = r_i$ 这题就是扩展欧几里得的一个简单应用</p><p>首先我们可以假设$c=a_0x+r_0=a_1y+r_1$则$a_0x-a_1y=r_1-r_0$;此时可以求出$x$，故可以求出$c$。</p><p>假设$A= \mathrm{lcm} (a_0,a_1)$,则$A=a_0t_1=a_1t_1$；那么可以推出$C’=Az+C=a_0tz+a_0x+r_0=a_0(t_0z+x)+r_0=a_1(t_1z+y)+r_1$</p><p>故这时再将这两个式子合并写成$C’= \mathrm{lcm} (a_0,a_1)z+C$再与接下来的$a_i$和$r_i$合并即可</p><figure class="highlight cpp"><figcaption><span>poj2891 Strange Way to Express Integers</span><a href="/assets/code/poj/2891.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">e_gcd</span> <span class="params">( __int64 a , __int64 b , __int64 &amp;d , __int64 &amp;x , __int64 &amp;y )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( ! b )</span><br><span class="line">d = a , x =<span class="number">1</span> , y =<span class="number">0</span> ;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">e_gcd ( b , a%b , d , y , x ) , y -= x * ( a / b ) ;</span><br><span class="line">}</span><br><span class="line">__<span class="function">int64 <span class="title">gcd</span><span class="params">(__int64 a,__int64 b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">}</span><br><span class="line">__<span class="function">int64 <span class="title">lcm</span><span class="params">(__int64 a,__int64 b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> a/gcd(a,b)*b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">T--;</span><br><span class="line">__int64 m,n,r1,r2;</span><br><span class="line"><span class="keyword">bool</span> ans=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>,&amp;m,&amp;r1);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;T;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>,&amp;n,&amp;r2);</span><br><span class="line"><span class="keyword">if</span>(ans)</span><br><span class="line">{</span><br><span class="line">__int64 x,y,d;</span><br><span class="line">e_gcd(m,n,d,x,y);</span><br><span class="line"><span class="keyword">if</span>((r2-r1)%d!=<span class="number">0</span>)</span><br><span class="line">ans=<span class="literal">false</span>;</span><br><span class="line">__int64 t=(r2-r1)/d;</span><br><span class="line">x=x*t;</span><br><span class="line">y=y*t;</span><br><span class="line">x%=(n/d);<span class="comment">//求出最小正整数x</span></span><br><span class="line"><span class="keyword">while</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">x+=(n/d);</span><br><span class="line">r1=m*x+r1;<span class="comment">//合并</span></span><br><span class="line">m=lcm(m,n);</span><br><span class="line"><span class="keyword">if</span>((r1-r2)%n!=<span class="number">0</span>)</span><br><span class="line">ans=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ans)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,r1);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是给出$a$和$r$，求$c$,其中$c \bmod a_i = r_i$ 这题就是扩展欧几里得的一个简单应用&lt;/p&gt;
&lt;p&gt;首先我们可以假设$c=a_0x+r_0=a_1y+r_1$则$a_0x-a_1y=r_1-r_0$;此时可以求出$x$，故可以求出$c$。
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="最大公约数" scheme="https://acshiryu.github.io/tags/greatest-common-divisor/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="扩展欧几里得" scheme="https://acshiryu.github.io/tags/extended-euclid/"/>
    
      <category term="欧几里得" scheme="https://acshiryu.github.io/tags/euclid/"/>
    
  </entry>
  
  <entry>
    <title>POJ3009Curling 2.0解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-3009-curling-2-0.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-3009-curling-2-0.html</id>
    <published>2018-09-14T13:00:13.000Z</published>
    <updated>2018-09-15T14:56:37.962Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是给出一个w*h的地图，其中0代表空地，1代表障碍物，2代表起点，3代表终点，每次行动可以走多个方格，每次只能向附近一格不是障碍物的方向行动，直到碰到障碍物才停下来，此时障碍物也会随之消失,如果行动时超出方格的界限或行动次数超过了10则会game over .如果行动时经过3则会win，记下此时行动次数（不是行动的方格数），求最小的行动次数</p><p>由于题目给出要在10步内找到最优解，又每次可以向四个方向进行搜索，时间复杂度是O（4^10）=O((2^10)^2)=O(1000^2)=O(1000000)</p><p>在搜索时如果发现此时搜索的层次已经大于最优解，则可以回溯，因为继续向下搜也不会再出现更优解。</p><figure class="highlight cpp"><figcaption><span>poj3009 Curling 2.0</span><a href="/assets/code/poj/3009.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w,h;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span>{</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">25</span>][<span class="number">25</span>];<span class="comment">//迷宫地图</span></span><br><span class="line">    <span class="keyword">int</span> x ;    <span class="keyword">int</span> y ；<span class="comment">//此时的坐标</span></span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> step;            <span class="comment">//最优移动次数，初始时为11</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span> <span class="params">( prog tmp , <span class="keyword">int</span> k )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=step)        <span class="comment">//如果递归层数不小于最优移动次数，就没必要继续搜索</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> i , j ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tmp.x+<span class="number">1</span>&lt;h&amp;&amp;tmp.<span class="built_in">map</span>[tmp.x+<span class="number">1</span>][tmp.y]!=<span class="number">1</span>)</span><br><span class="line">    {<span class="comment">//如果该处下面没越界，并且不是障碍物</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; tmp.x + i &lt; h; i ++ )</span><br><span class="line">        {<span class="comment">//从该处深度+1开始，一步步寻找</span></span><br><span class="line">            <span class="keyword">if</span>(tmp.<span class="built_in">map</span>[tmp.x+i][tmp.y]==<span class="number">1</span>)</span><br><span class="line">            {<span class="comment">//如果找到某处有障碍物，则从该处开始继续搜索</span></span><br><span class="line">                prog tmp2=tmp;                <span class="comment">//定义一个临时结构体</span></span><br><span class="line">                tmp2.<span class="built_in">map</span>[tmp.x+i][tmp.y]=<span class="number">0</span>;    <span class="comment">//将该处的障碍物消失</span></span><br><span class="line">                tmp2.x=tmp.x+i<span class="number">-1</span>;            <span class="comment">//位置应为障碍物的上面</span></span><br><span class="line">                DFS(tmp2,k+<span class="number">1</span>);                <span class="comment">//继续搜索</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tmp.<span class="built_in">map</span>[tmp.x+i][tmp.y]==<span class="number">3</span>)</span><br><span class="line">            {<span class="comment">//如果经过了3，即终点</span></span><br><span class="line">                <span class="keyword">if</span>(step&gt;k+<span class="number">1</span>)    <span class="comment">//看搜索的结果是否比最优解优，如果优，更新step</span></span><br><span class="line">                    step=k+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面的搜索原理和上面类似，注释略</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tmp.x<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;tmp.<span class="built_in">map</span>[tmp.x<span class="number">-1</span>][tmp.y]!=<span class="number">1</span>)</span><br><span class="line">    {<span class="comment">//向上</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; tmp.x - i &gt;=<span class="number">0</span>; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(tmp.<span class="built_in">map</span>[tmp.x-i][tmp.y]==<span class="number">1</span>)</span><br><span class="line">            {</span><br><span class="line">                prog tmp2=tmp;</span><br><span class="line">                tmp2.<span class="built_in">map</span>[tmp.x-i][tmp.y]=<span class="number">0</span>;</span><br><span class="line">                tmp2.x=tmp.x-i+<span class="number">1</span>;</span><br><span class="line">                DFS(tmp2,k+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tmp.<span class="built_in">map</span>[tmp.x-i][tmp.y]==<span class="number">3</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(step&gt;k+<span class="number">1</span>)</span><br><span class="line">                    step=k+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tmp.y+<span class="number">1</span>&lt;w&amp;&amp;tmp.<span class="built_in">map</span>[tmp.x][tmp.y+<span class="number">1</span>]!=<span class="number">1</span>)</span><br><span class="line">    {<span class="comment">//向右</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; tmp.y + i &lt; w; i ++ )</span><br><span class="line">        {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tmp.<span class="built_in">map</span>[tmp.x][tmp.y+i]==<span class="number">1</span>)</span><br><span class="line">            {</span><br><span class="line">                prog tmp2=tmp;</span><br><span class="line">                tmp2.<span class="built_in">map</span>[tmp.x][tmp.y+i]=<span class="number">0</span>;</span><br><span class="line">                tmp2.y=tmp.y+i<span class="number">-1</span>;</span><br><span class="line">                DFS(tmp2,k+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tmp.<span class="built_in">map</span>[tmp.x][tmp.y+i]==<span class="number">3</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(step&gt;k+<span class="number">1</span>)</span><br><span class="line">                    step=k+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tmp.y<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;tmp.<span class="built_in">map</span>[tmp.x][tmp.y<span class="number">-1</span>]!=<span class="number">1</span>)</span><br><span class="line">    {<span class="comment">//向左</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span> ; tmp.y - i &gt;=<span class="number">0</span>; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(tmp.<span class="built_in">map</span>[tmp.x][tmp.y-i]==<span class="number">1</span>)</span><br><span class="line">            {</span><br><span class="line">                prog tmp2=tmp;</span><br><span class="line">                tmp2.<span class="built_in">map</span>[tmp.x][tmp.y-i]=<span class="number">0</span>;</span><br><span class="line">                tmp2.y=tmp.y-i+<span class="number">1</span>;</span><br><span class="line">                DFS(tmp2,k+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(tmp.<span class="built_in">map</span>[tmp.x][tmp.y-i]==<span class="number">3</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(step&gt;k+<span class="number">1</span>)</span><br><span class="line">                    step=k+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;w&gt;&gt;h,w&amp;&amp;h)</span><br><span class="line">    {<span class="comment">//输入长高</span></span><br><span class="line">        prog cur;</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        <span class="built_in">memset</span>(cur.<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(cur.<span class="built_in">map</span>));</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; h ; i ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; w ; j ++ )</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; cur.<span class="built_in">map</span>[i][j];</span><br><span class="line">                <span class="keyword">if</span>(cur.<span class="built_in">map</span>[i][j]==<span class="number">2</span>)</span><br><span class="line">                {<span class="comment">//记录起点坐标</span></span><br><span class="line">                    cur.x=i;</span><br><span class="line">                    cur.y=j;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        step=<span class="number">11</span>;<span class="comment">//初始化为11</span></span><br><span class="line">        DFS( cur , <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span>(step==<span class="number">11</span>)<span class="comment">//说明没找到解</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;step&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是给出一个w*h的地图，其中0代表空地，1代表障碍物，2代表起点，3代表终点，每次行动可以走多个方格，每次只能向附近一格不是障碍物的方向行动，直到碰到障碍物才停下来，此时障碍物也会随之消失,如果行动时超出方格的界限或行动次数超过了10则会game over .如果
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="深度优先搜索" scheme="https://acshiryu.github.io/tags/depth-first-search/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="搜索" scheme="https://acshiryu.github.io/tags/search/"/>
    
  </entry>
  
  <entry>
    <title>poj3070来体会矩阵的妙用</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-3070-fibonacci.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-3070-fibonacci.html</id>
    <published>2018-09-14T10:43:00.000Z</published>
    <updated>2018-09-15T14:56:37.962Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意就是求出斐波那契数列第k项的后四位，如果有前导0就不输出0，但最后一个0必须输出</p><p>刚开始的时候就想到了一个关于斐波那契数列的数列的一个公式，准备用那个公式求的，但题目已经提示了用矩阵，就没用那个公式</p><p>这一题就要注意到矩阵</p><p>的右上角或左下角对应的值正好是第n项的值</p><p>故可以通过快速幂来求得斐波那契数列的哦n项，由于数据较大，还要记得要不断的对10000取模</p><p>矩阵的快速幂我是直接抄的模板，刚开始时不理解，现在懂了，详情直接看代码</p><figure class="highlight cpp"><figcaption><span>poj3070 Fibonacci</span><a href="/assets/code/poj/3070.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prog</span> {</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>] ;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">        a[<span class="number">0</span>][<span class="number">0</span>]=a[<span class="number">1</span>][<span class="number">0</span>]=a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">prog <span class="title">matrixmul</span> <span class="params">( prog a ,prog b )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i , j , k ;</span><br><span class="line">    prog c ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; <span class="number">2</span> ; j ++ )</span><br><span class="line">        {</span><br><span class="line">            c.a[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> ( k =<span class="number">0</span> ; k &lt; <span class="number">2</span>; k ++ )</span><br><span class="line">                c.a[i][j]+=(a.a[i][k]*b.a[k][j]) ;</span><br><span class="line">            c.a[i][j] %= <span class="number">10000</span> ;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> c ;</span><br><span class="line">}</span><br><span class="line"><span class="function">prog <span class="title">mul</span> <span class="params">(prog s , <span class="keyword">int</span> k )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    prog ans ;</span><br><span class="line">    ans.init();</span><br><span class="line">    <span class="keyword">while</span> ( k &gt;= <span class="number">1</span> )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> ( k &amp; <span class="number">1</span> )</span><br><span class="line">            ans = matrixmul ( ans , s ) ;</span><br><span class="line">        k = k &gt;&gt; <span class="number">1</span> ;</span><br><span class="line">        s = matrixmul ( s , s ) ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans ;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n , ~ n )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> ( ! n )</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span> ;</span><br><span class="line">            <span class="keyword">continue</span> ;</span><br><span class="line">        }</span><br><span class="line">        prog s ;</span><br><span class="line">        s.init ( ) ;</span><br><span class="line">        s = mul ( s , n - <span class="number">1</span> ) ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s . a [<span class="number">0</span>][<span class="number">1</span>] % <span class="number">10000</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意就是求出斐波那契数列第k项的后四位，如果有前导0就不输出0，但最后一个0必须输出&lt;/p&gt;
&lt;p&gt;刚开始的时候就想到了一个关于斐波那契数列的数列的一个公式，准备用那个公式求的，但题目已经提示了用矩阵，就没用那个公式&lt;/p&gt;
&lt;p&gt;这一题就要注意到矩阵&lt;/p&gt;
&lt;p&gt;的
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="矩阵" scheme="https://acshiryu.github.io/tags/matrix/"/>
    
      <category term="快速幂" scheme="https://acshiryu.github.io/tags/fast-power/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="斐波那契数列" scheme="https://acshiryu.github.io/tags/fibonacci-sequence/"/>
    
  </entry>
  
  <entry>
    <title>poj3090 欧拉函数与法雷级数</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-3090-visible-lattice-points.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-3090-visible-lattice-points.html</id>
    <published>2018-09-14T10:42:00.000Z</published>
    <updated>2018-09-15T14:56:37.963Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意先看上图，给出大小为n的图（有（n+1）^2个格点），求出图中可视点的个数，可视点就是在图中从（0，0）看不被遮挡的点，例如（1，1）是可视点，（2，2）不是，因为（2，2）被（1，1）给遮挡了</p><p>这一题和poj2478的解法类似，解答方法也相似，点此进入<a href="/archives/acm/poj-2478-farey-sequence.html" title="poj2478 又一欧拉公式的运用">poj2478 又一欧拉公式的运用</a>，这题是求法雷级数的题</p><p>然而也不能直接就把poj2478的代码个复制过来</p><p>因为对于这一题，并没有要求分子一定比分母小，也就是（5，3）也是题目可视点，但进一步观察发现如果（a，b）是可视点，那么（b，a）也一定是可视点</p><p>则我们根据这个规律，我们就可以假设出a &lt; b,则只要求出a &lt; b的格点数，然后再乘以2</p><p>但还是会有问题，此题中（1，0），（0，1）也是格点数，但我们在运用欧拉函数时并不考虑0，并且也存在a=b的格点，即（1，1）</p><p>还好这样特殊的点并不多，只有三个，我们只需要特殊考虑就行了</p><p>刚开始是求欧拉函数没考虑边界大情形，RE了两次，最后发现问题，修正了一下，果然AC了</p><figure class="highlight cpp"><figcaption><span>poj3090 Visible Lattice Points</span><a href="/assets/code/poj/3090.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> phi[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i , j ;</span><br><span class="line">    <span class="built_in">memset</span> ( phi , <span class="number">0</span> ,<span class="keyword">sizeof</span> ( phi ) ) ;</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">2</span> ; i &lt;<span class="number">1005</span> ; i ++ )</span><br><span class="line">    {<span class="comment">//筛选求phi</span></span><br><span class="line">        <span class="keyword">if</span> ( ! phi [i] )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> ( j = i ; j &lt;<span class="number">1005</span> ; j += i )</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> ( ! phi [j] )</span><br><span class="line">                    phi [j ] = j ;</span><br><span class="line">                phi [j] = phi [j] / i * ( i - <span class="number">1</span> ) ;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span> ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t ;</span><br><span class="line">    <span class="keyword">while</span> ( t-- )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">' '</span> &lt;&lt; n &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">3</span> ;<span class="comment">//特别考虑的三个点，（1，0）（0，1）（1，1）</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">2</span> ; i &lt;= n ; i ++ )</span><br><span class="line">            sum += <span class="number">2</span> *(phi [i] );</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        k++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意先看上图，给出大小为n的图（有（n+1）^2个格点），求出图中可视点的个数，可视点就是在图中从（0，0）看不被遮挡的点，例如（1，1）是可视点，（2，2）不是，因为（2，2）被（1，1）给遮挡了&lt;/p&gt;
&lt;p&gt;这一题和poj2478的解法类似，解答方法也相似，点此进
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="欧拉函数" scheme="https://acshiryu.github.io/tags/euler-function/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="法雷级数" scheme="https://acshiryu.github.io/tags/farrell-series/"/>
    
  </entry>
  
  <entry>
    <title>POJ3185 The Water Bowls 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-3185-the-water-bowls.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-3185-the-water-bowls.html</id>
    <published>2018-09-14T10:41:00.000Z</published>
    <updated>2018-09-15T14:56:37.963Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意和POJ1222 类似，不过这题更简单，只用枚举第一个开关的状态就行了，题目保证有解，只需要简单的位运算即可，这题也可高斯消元</p><figure class="highlight cpp"><figcaption><span>poj3185 The Water Bowls</span><a href="/assets/code/poj/3185.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zero(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one(a) memset(a,1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fone(a) memset(a,-1,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow2(a) ((a)*(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pow3(a) ((pow2(a))*(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">25</span>],b[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[<span class="number">0</span>]))</span><br><span class="line">    {</span><br><span class="line">        b[<span class="number">0</span>]=a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            b[i]=a[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">memcpy</span>(b,a,<span class="keyword">sizeof</span>(b));</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">            {</span><br><span class="line">                b[<span class="number">0</span>]=!b[<span class="number">0</span>];</span><br><span class="line">                b[<span class="number">1</span>]=!b[<span class="number">1</span>];</span><br><span class="line">                cnt++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">19</span>;j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(b[j<span class="number">-1</span>]==<span class="number">1</span>)</span><br><span class="line">                {</span><br><span class="line">                    cnt++;</span><br><span class="line">                    b[j<span class="number">-1</span>]=!b[j<span class="number">-1</span>];</span><br><span class="line">                    b[j]=!b[j];</span><br><span class="line">                    b[j+<span class="number">1</span>]=!b[j+<span class="number">1</span>];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(b[<span class="number">19</span>]^b[<span class="number">18</span>]==<span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(b[<span class="number">19</span>]==<span class="number">1</span>)</span><br><span class="line">                    cnt++;</span><br><span class="line">                <span class="keyword">if</span>(ans&gt;cnt)</span><br><span class="line">                    ans=cnt;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意和POJ1222 类似，不过这题更简单，只用枚举第一个开关的状态就行了，题目保证有解，只需要简单的位运算即可，这题也可高斯消元&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;poj3185 The Water
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="枚举" scheme="https://acshiryu.github.io/tags/enumerate/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="位运算" scheme="https://acshiryu.github.io/tags/bit-operation/"/>
    
      <category term="高斯消元" scheme="https://acshiryu.github.io/tags/gaussian-elimination/"/>
    
  </entry>
  
  <entry>
    <title>poj3233 又见矩阵，不过是等比吗？</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-3233-matrix-power-series.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-3233-matrix-power-series.html</id>
    <published>2018-09-14T10:40:00.000Z</published>
    <updated>2018-09-15T14:56:37.964Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意很明了，初看是像是就等比数列前n项和，但公比是一个矩阵，能用吗？</p><p>我不知道，因为如果是类似等比数列前n项和的好像关于矩阵除法比较难写，中间涉及到逆举证神马的，直接忽略</p><p>输入的数据第一行分别是$n,k,m$</p><p>代表矩阵的是$n \times n$型，求前$k$项和，结果的每一项对$m$取模</p><p>然后就是一个$n \times n$的矩阵。</p><p>我做这题时用的是类似二分的方法做的，仔细观察可以发现</p><p>$S_k = \sum_{i=1}^{k}A_{i}=(1 + {A_{\frac{k}{2}}}) \sum_{i=1}^{\frac{k}{2}}A_i + A_k = (1 + {A_{\frac{k}{2}}})S_{\frac{k}{2}} + A_k (k为奇数)$<br>$S_k = \sum_{i=1}^{k}A_{i}=(1 + {A_{\frac{k}{2}}}) \sum_{i=1}^{\frac{k}{2}}A_i= (1 + {A_{\frac{k}{2}}})S_{\frac{k}{2}} (k为偶数)$  </p><p>故可以用这方法直接推出答案，中间要记得对数取模，以防超int，还要注意$S_1=A$ ；</p><p>然后就是写矩阵乘法与加法部分，可直接套模板</p><figure class="highlight cpp"><figcaption><span>poj3233 Matrix Power Series</span><a href="/assets/code/poj/3233.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n , m ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> {</span><span class="comment">//矩阵</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(  )</span></span></span><br><span class="line"><span class="function">    </span>{<span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="built_in">memset</span> ( a, <span class="number">0</span> ,<span class="keyword">sizeof</span> ( a ) ) ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; <span class="number">30</span> ; i ++ )</span><br><span class="line">            a[i][i] = <span class="number">1</span> ;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">( matrix s )</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//打印一个矩阵</span></span><br><span class="line">    <span class="keyword">int</span> i , j ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> ( j )</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s.a[i][j]%m;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function">matrix <span class="title">matrixadd</span> <span class="params">( matrix a , matrix b )</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//矩阵加法，计算时记得要取模，避免超int</span></span><br><span class="line">    <span class="keyword">int</span> i , j ;</span><br><span class="line">    matrix c ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>  ; j &lt; n ; j ++ )</span><br><span class="line">            c.a[i][j]=((a.a[i][j]+b.a[i][j])%m);</span><br><span class="line">    <span class="keyword">return</span> c ;</span><br><span class="line">}</span><br><span class="line"><span class="function">matrix <span class="title">matrixmul</span> <span class="params">( matrix a , matrix b )</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//矩阵乘法，计算时记得要取模，避免超int</span></span><br><span class="line">    <span class="keyword">int</span> i , j , k ;</span><br><span class="line">    matrix c ;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">        {</span><br><span class="line">            c.a[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> ( k = <span class="number">0</span> ; k &lt; n ; k ++ )</span><br><span class="line">                c.a[i][j] +=((a.a[i][k]*b.a[k][j])%m) ;</span><br><span class="line">            c.a[i][j] %= m ;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> c ;</span><br><span class="line">}</span><br><span class="line"><span class="function">matrix <span class="title">mul</span> <span class="params">( matrix s , <span class="keyword">int</span> k  )</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//矩阵的k次方，快速幂</span></span><br><span class="line">    matrix ans ;</span><br><span class="line">    ans .init () ;</span><br><span class="line">    <span class="keyword">while</span> ( k &gt;= <span class="number">1</span> )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> ( k &amp; <span class="number">1</span> )</span><br><span class="line">            ans = matrixmul ( ans , s ) ;</span><br><span class="line">        k = k &gt;&gt; <span class="number">1</span> ;</span><br><span class="line">        s = matrixmul ( s , s ) ;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans ;</span><br><span class="line">}</span><br><span class="line"><span class="function">matrix <span class="title">sum</span> <span class="params">( matrix s , <span class="keyword">int</span> k )</span></span></span><br><span class="line"><span class="function"></span>{<span class="comment">//举证前k项求和</span></span><br><span class="line">    <span class="keyword">if</span> ( k == <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">return</span> s ;</span><br><span class="line">    matrix tmp ;<span class="comment">//用来保存答案</span></span><br><span class="line">    tmp.init();<span class="comment">//初始化</span></span><br><span class="line">    tmp = matrixadd ( tmp , mul ( s , k &gt;&gt; <span class="number">1</span> ) );    <span class="comment">//计算1+A^(k/2)</span></span><br><span class="line">    tmp = matrixmul ( tmp , sum ( s , k &gt;&gt; <span class="number">1</span> ) ) ;    <span class="comment">//计算(1+A^(k/2))*(A + A^2 + A^3 + … + A^(k/2)  )</span></span><br><span class="line">    <span class="keyword">if</span> ( k&amp;<span class="number">1</span> )<span class="comment">//考虑是否要+A^k</span></span><br><span class="line">        tmp = matrixadd ( tmp , mul ( s , k ) ) ;</span><br><span class="line">    <span class="keyword">return</span> tmp ;<span class="comment">//返回前n项的值</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> k ;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; m )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> i , j ;</span><br><span class="line">        matrix s ;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span> ; j &lt; n ; j ++ )</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; s.a[i][j] ;</span><br><span class="line">        s = sum ( s , k ) ;</span><br><span class="line">        print(s);    </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意很明了，初看是像是就等比数列前n项和，但公比是一个矩阵，能用吗？&lt;/p&gt;
&lt;p&gt;我不知道，因为如果是类似等比数列前n项和的好像关于矩阵除法比较难写，中间涉及到逆举证神马的，直接忽略&lt;/p&gt;
&lt;p&gt;输入的数据第一行分别是$n,k,m$&lt;/p&gt;
&lt;p&gt;代表矩阵的是$n 
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数论" scheme="https://acshiryu.github.io/tags/number-theory/"/>
    
      <category term="矩阵" scheme="https://acshiryu.github.io/tags/matrix/"/>
    
      <category term="分治" scheme="https://acshiryu.github.io/tags/division/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>POJ3278 Catch That Cow 解题报告</title>
    <link href="https://acshiryu.github.io/archives/acm/poj-3278-catch-that-cow.html"/>
    <id>https://acshiryu.github.io/archives/acm/poj-3278-catch-that-cow.html</id>
    <published>2018-09-14T10:36:00.000Z</published>
    <updated>2018-09-15T14:56:37.965Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意，就是给出a和b点的横坐标，求到a，b的最小行动次数，其中每次行动只能是下面两种情况之一</p><ul><li>向左或向右移动一步，即横坐标加1或者减1</li><li>横坐标变成原来的两倍</li></ul><p>对于题目给出的数据5 17 ， 可以这样进行行动  5 – 10 – 9 – 18 – 17  所以只需要四步就可以到达b</p><p>这题因为是求最小行动次数，故可以用BFS，调用STL里面的队列来实现。每次去队首元素，如果到达了b点，输出步子并结束搜索，否则，行动步子+1，并分别将改点的横坐标+1，-1，×2操作后压入队列，一直到寻找到解。<span style="color:red;">注意到当位置的横坐标超过了b点就应该再向右走，故此时应该对其横坐标只有-1操作，还要注意到横坐标为0的特殊情况，此处应该只进行+1行走</span></p><p>刚开始的时候把标记数组开小了，没注意到×2可能会出现超过100,000的情况，提交时RE了一次，把数组改打就AC了</p><figure class="highlight cpp"><figcaption><span>poj3278 Catch That Cow</span><a href="/assets/code/poj/3278.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> hash[<span class="number">400001</span>];    <span class="comment">//标记改点是否走过，如果为true则走过</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> m , n ;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt; n &gt;&gt; m )</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">memset</span>(hash,<span class="literal">false</span>,<span class="keyword">sizeof</span>(hash));<span class="comment">//初始化</span></span><br><span class="line">        pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt;p;                <span class="comment">//第一个代表横坐标，第二个代表走的步子</span></span><br><span class="line">        p.first=n;</span><br><span class="line">        p.second=<span class="number">0</span>;                        <span class="comment">//初始化p</span></span><br><span class="line">        hash[n]=<span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt;&gt;bfs;</span><br><span class="line">        bfs.push(p);</span><br><span class="line">        <span class="keyword">while</span>(!bfs.empty())</span><br><span class="line">        {</span><br><span class="line">            p=bfs.front();        <span class="comment">//取队首元素</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(p.first==m)</span><br><span class="line">            {<span class="comment">//此时说明找到了，则输出，并结束搜索</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;p.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            p.second++;                    <span class="comment">//移动次数+1</span></span><br><span class="line">            pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt;q;            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(p.first&lt;m)</span><br><span class="line">            {<span class="comment">//如果改点在目标点的左边</span></span><br><span class="line">                q=p;</span><br><span class="line">                q.first*=<span class="number">2</span>;                <span class="comment">//×2操作</span></span><br><span class="line">                <span class="keyword">if</span>(hash[q.first]==<span class="literal">false</span>&amp;&amp;q.first)</span><br><span class="line">                {<span class="comment">//点没访问过，则从改点开始继续搜索</span></span><br><span class="line">                    hash[q.first]=<span class="literal">true</span>;</span><br><span class="line">                    bfs.push(q);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//下面搜索同上，注释略</span></span><br><span class="line">                q=p;</span><br><span class="line">                q.first+=<span class="number">1</span>;                </span><br><span class="line">                <span class="keyword">if</span>(hash[q.first]==<span class="literal">false</span>)</span><br><span class="line">                {</span><br><span class="line">                    hash[q.first]=<span class="literal">true</span>;</span><br><span class="line">                    bfs.push(q);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(p.first&gt;<span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                q=p;</span><br><span class="line">                q.first--;</span><br><span class="line">                <span class="keyword">if</span>(hash[q.first]==<span class="literal">false</span>)</span><br><span class="line">                {</span><br><span class="line">                    hash[q.first]=<span class="literal">true</span>;</span><br><span class="line">                    bfs.push(q);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            bfs.pop();    <span class="comment">//队首元素出队列</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意，就是给出a和b点的横坐标，求到a，b的最小行动次数，其中每次行动只能是下面两种情况之一&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向左或向右移动一步，即横坐标加1或者减1&lt;/li&gt;
&lt;li&gt;横坐标变成原来的两倍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于题目给出的数据5 17 ， 可以这样
      
    
    </summary>
    
      <category term="算法竞赛" scheme="https://acshiryu.github.io/categories/acm/"/>
    
    
      <category term="数据结构" scheme="https://acshiryu.github.io/tags/data-structure/"/>
    
      <category term="广度优先搜索" scheme="https://acshiryu.github.io/tags/breadth-first-search/"/>
    
      <category term="poj" scheme="https://acshiryu.github.io/tags/poj/"/>
    
      <category term="搜索" scheme="https://acshiryu.github.io/tags/search/"/>
    
  </entry>
  
</feed>
